{"post_stream":{"posts":[{"id":26709,"name":"","username":"rku","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png","created_at":"2018-11-27T15:50:16.750Z","cooked":"\u003cp\u003eWe discussed this briefly with \u003ca class=\"mention\" href=\"/u/eugene\"\u003e@Eugene\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA very cool feature would be automatic serialization of attributes that point to \u003ccode\u003eSerializable\u003c/code\u003e or it‚Äôs subclass.\u003c/p\u003e\n\u003cp\u003eMy proposed implementation of this is to have \u003ccode\u003eSerializer\u003c/code\u003e track serialization of objects by their pointer. Object would be serialized when it is encountered for the first time. If any other objects reference same object - a reference entry should be serialized instead.\u003cbr\u003e\nDeserialization would happen in similar manner: deserialized objects are put to the map and pointer is served from the map when object reference entry is encountered.\u003c/p\u003e\n\u003cp\u003eCaveats:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA bit of extra state is added to \u003ccode\u003eSerializer\u003c/code\u003e and \u003ccode\u003eDeserializer\u003c/code\u003e. Not perfect, but on the other hand \u003ccode\u003eDeserializer\u003c/code\u003e already has some state.\u003c/li\u003e\n\u003cli\u003eAttributes may store any instance of \u003ccode\u003eRefCounted\u003c/code\u003e while we can serialize only instances of \u003ccode\u003eSerializable\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eProposed scheme gets in a way of parallel (de)serialization. On the other hand engine does not do any of that.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf implemented, this would give us automagic serialization of objects referenced engine attributes. Even circular references would work. Imagine that - entire game state could be saved/loaded in one swoop with a bit of care.\u003c/p\u003e\n\u003cp\u003eWhat are your thoughts? Maybe anyone has a better idea how this could be implemented? or maybe we do not want this at all?\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2018-11-27T15:50:16.750Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":215,"reads":57,"readers_count":56,"score":1146.4,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":2}],"moderator":false,"admin":false,"staff":false,"user_id":246,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":27285,"name":"","username":"rku","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png","created_at":"2019-01-13T08:08:14.826Z","cooked":"\u003cp\u003eLooks like noone cares. Sigh.\u003c/p\u003e\n\u003cp\u003eIn the meantime i implemented proof of concept serialization using \u003ca href=\"http://uscilab.github.io/cereal/\" rel=\"nofollow noopener\"\u003ecereal\u003c/a\u003e library.\u003c/p\u003e\n\u003cp\u003eTo my surprise API is pretty non-invasive.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-cpp\"\u003e    /// Load from binary data. Return true if successful.\n    bool Load(Deserializer\u0026amp; source, SerializationFormat format);\n    /// Save as binary data. Return true if successful.\n    bool Save(Serializer\u0026amp; dest, SerializationFormat format) const;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese serialize object to binary/xml/json. You probably noticed that they are not virtual. This is because user is supposed to implement a single \u003ccode\u003etemplate\u0026lt;typename Archive\u0026gt; void serialize(Archive\u0026amp; ar, uint32_t version)\u003c/code\u003e for both serialization and deserialization. Down to one function from six, quite an upgrade i would say. This function can also be hidden from public API \u003cem\u003ei think\u003c/em\u003e, but \u003ccode\u003ecereal\u003c/code\u003e would still be required to be included in SDK as user would have to interact with it if user decided to serialize extra stuff that is not registered as attributes.\u003c/p\u003e\n\u003cp\u003eBinary output format is ok. It suffers from same issues like current urho‚Äôs one, which is not saving attribute names and being dependent on serialization order. On the other hand \u003ccode\u003eserialize()\u003c/code\u003e function has a \u003ccode\u003eversion\u003c/code\u003e variable which can be used to make code support both older and newer versions, so if you use binary serialization for save files - new game versions could support older saves.\u003c/p\u003e\n\u003cp\u003eJSON and XML serialization is a considerable downgrade from aesthetic point of view.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-json\"\u003e{\n    \"value0\": {\n        \"cereal_class_version\": 1,\n        \"Integer Foo\": {\n            \"value0\": 1234\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"lang-xml\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\n\u0026lt;root\u0026gt;\n\t\u0026lt;value0\u0026gt;\n\t\t\u0026lt;cereal_class_version\u0026gt;1\u0026lt;/cereal_class_version\u0026gt;\n\t\t\u0026lt;Integer_Foo\u0026gt;\n\t\t\t\u0026lt;value0\u0026gt;123\u0026lt;/value0\u0026gt;\n\t\t\u0026lt;/Integer_Foo\u0026gt;\n\t\u0026lt;/value0\u0026gt;\n\u0026lt;/root\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMaybe \u003ccode\u003ecereal\u003c/code\u003e could be patched to produce a bit more user-friendly output.\u003c/p\u003e\n\u003cp\u003eThings to be explored:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInheritance. \u003ccode\u003ecereal\u003c/code\u003e supports that.\u003c/li\u003e\n\u003cli\u003eSerialization of \u003ccode\u003eSerializable\u003c/code\u003e instances. Pretty confident that can be pulled off. \u003ccode\u003ecereal\u003c/code\u003e already supports serializing instances and saves them only once even if multiple objects reference same thing.\u003c/li\u003e\n\u003c/ul\u003e","post_number":2,"post_type":1,"updated_at":"2019-01-13T08:10:04.182Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":48,"readers_count":47,"score":59.6,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://uscilab.github.io/cereal/","internal":false,"reflection":false,"title":"cereal Docs - Main","clicks":4}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":246,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":27286,"name":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","username":"Modanung","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png","created_at":"2019-01-13T10:05:57.888Z","cooked":"\u003caside class=\"quote no-group\" data-post=\"2\" data-topic=\"4698\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/rku/40/881_2.png\" class=\"avatar\"\u003e rku:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eLooks like noone cares. Sigh.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eI care about Urho without having something useful to say about each of its workings. Your proposal sounds nice and more efficient, but I must admit the exact technicalities are a bit over my head. The same may be true for many others.\u003c/p\u003e\n\u003cp\u003eSometimes its the least appreciated efforts which bear most value. \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/slightly_smiling_face.png?v=6\" title=\":slightly_smiling_face:\" class=\"emoji\" alt=\":slightly_smiling_face:\"\u003e\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2019-01-13T10:11:55.386Z","reply_count":1,"reply_to_post_number":2,"quote_count":1,"incoming_link_count":1,"reads":47,"readers_count":46,"score":109.4,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":2,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"","bookmarked":false,"actions_summary":[{"id":2,"count":4}],"moderator":false,"admin":false,"staff":false,"user_id":192,"hidden":false,"trust_level":0,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"user_suspended":true,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":27287,"name":"","username":"JTippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts/{size}/357_2.png","created_at":"2019-01-13T17:06:14.874Z","cooked":"\u003cp\u003eI‚Äôm in the same boat as \u003ca class=\"mention\" href=\"/u/modanung\"\u003e@Modanung\u003c/a\u003e here. I care about Urho3D, and if something makes it better I‚Äôm all for it, but serialization isn‚Äôt something that I think about (or even use, for that matter) all that often, so I‚Äôm not likely to pipe up about it.\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2019-01-13T17:06:14.874Z","reply_count":0,"reply_to_post_number":3,"quote_count":0,"incoming_link_count":0,"reads":41,"readers_count":40,"score":23.2,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"Modanung","name":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"},"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":30,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":27293,"name":"Leith Ketchell","username":"Leith","avatar_template":"/user_avatar/discourse.urho3d.io/leith/{size}/2384_2.png","created_at":"2019-01-14T06:04:37.390Z","cooked":"\u003cp\u003eI care about serialization.\u003cbr\u003e\nIn fact, I believe I just fixed a bug in networked scene replication.\u003c/p\u003e\n\u003cp\u003eSerializing matters, but we should observe, there are several kinds of serializing!\u003cbr\u003e\nWe may serialize to, and from, the following: memory, network, and disk.\u003c/p\u003e\n\u003cp\u003eI don‚Äôt understand the engine well enough to comment further, but the point is,\u003cbr\u003e\nit depends on your application, and the context, what we serialize, how we serialize it,\u003cbr\u003e\nand how we reconstruct it later! Serialization is possibly one of the most complex subjects\u003cbr\u003e\nthat we could talk about - how does it serialize across platforms? What about Endian issues?\u003cbr\u003e\nThere is a lot of things to talk about with respect to serializing, and getting it right is very cool.\u003c/p\u003e","post_number":5,"post_type":1,"updated_at":"2019-01-14T06:04:37.390Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":42,"readers_count":41,"score":28.4,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"Leith Ketchell","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"suspended user","title_is_group":false,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":1098,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"user_suspended":true,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":27302,"name":"","username":"rku","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png","created_at":"2019-01-14T10:06:59.757Z","cooked":"\u003caside class=\"quote no-group\" data-username=\"Leith\" data-post=\"5\" data-topic=\"4698\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/leith/40/2384_2.png\" class=\"avatar\"\u003e Leith:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003ehow does it serialize across platforms?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eAutomagically \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=10\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"\u003e\u003c/p\u003e\n\u003caside class=\"quote no-group\" data-username=\"Leith\" data-post=\"5\" data-topic=\"4698\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/leith/40/2384_2.png\" class=\"avatar\"\u003e Leith:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat about Endian issues?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eCereal provides a separate portable binary archive serializer which takes care of that. Most of the time we dont care though. Even current urho serializer does not.\u003c/p\u003e\n\u003cp\u003eAnd a small update on progress:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-cpp\"\u003eclass CerealTest : public Serializable\n{\n    URHO3D_OBJECT(CerealTest, Serializable);\n    virtual void Serialize(::cereal::BinaryInputArchive\u0026amp; ar) { ar(*this); }\n    virtual void Serialize(::cereal::BinaryOutputArchive\u0026amp; ar) { ar(*this); }\n    virtual void Serialize(::cereal::PortableBinaryInputArchive\u0026amp; ar) { ar(*this); }\n    virtual void Serialize(::cereal::PortableBinaryOutputArchive\u0026amp; ar) { ar(*this); }\n    virtual void Serialize(::cereal::XMLInputArchive\u0026amp; ar) { ar(*this); }\n    virtual void Serialize(::cereal::XMLOutputArchive\u0026amp; ar) { ar(*this); }\n    virtual void Serialize(::cereal::JSONInputArchive\u0026amp; ar) { ar(*this); }\n    virtual void Serialize(::cereal::JSONOutputArchive\u0026amp; ar) { ar(*this); }\n\npublic:\n    explicit CerealTest(Context* context) : Serializable(context)\n    {\n    }\n\n    static void RegisterObject(Context* context)\n    {\n        context-\u0026gt;RegisterFactory\u0026lt;CerealTest\u0026gt;();\n        URHO3D_ATTRIBUTE(\"Integer Foo\", int, foo_, 0, AM_DEFAULT);\n    }\n\n    template\u0026lt;typename Archive\u0026gt;\n    void serialize(Archive\u0026amp; ar)\n    {\n        ar(::cereal::make_nvp(BaseClassName::GetTypeNameStatic().CString(), cereal::base_class\u0026lt;BaseClassName\u0026gt;(this))\n            ,CEREAL_NVP(hash_)\n            ,CEREAL_NVP(vector2_)\n        );\n    }\n\n    int foo_ = 0;\n    Vector2 vector2_{12, 34};\n    StringHash hash_;\n};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eProduces:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-xml\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\n\u0026lt;root\u0026gt;\n\t\u0026lt;value\u0026gt;\n\t\t\u0026lt;value name=\"Serializable\"\u0026gt;\n\t\t\t\u0026lt;value name=\"Integer Foo\"\u0026gt;123\u0026lt;/value\u0026gt;\n\t\t\u0026lt;/value\u0026gt;\n\t\t\u0026lt;value name=\"hash_\"\u0026gt;555\u0026lt;/value\u0026gt;\n\t\t\u0026lt;value name=\"vector2_\"\u0026gt;12 34\u0026lt;/value\u0026gt;\n\t\u0026lt;/value\u0026gt;\n\u0026lt;/root\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"lang-json\"\u003e[\n    {\n        \"Serializable\": {\n            \"Integer Foo\": 1234\n        },\n        \"hash_\": 555,\n        \"vector2_\": [\n            12.0,\n            34.0\n        ]\n    }\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eXML output required some modifications to cereal, but they are pretty minor. Overall i am pretty happy with output. There are a few things to note.\u003c/p\u003e\n\u003cp\u003eCereal has support for polymorphic types. Problem with that is that it requires extra macro to be used at global scope. This example would have required following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-cpp\"\u003eCEREAL_REGISTER_TYPE(CerealTest);\nCEREAL_REGISTER_POLYMORPHIC_RELATION(CerealTest::BaseClassName, CerealTest)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sucks as it is extra bookkeeping user must not forget about. Besides we already have this information recorded using \u003ccode\u003eURHO3D_OBJECT()\u003c/code\u003e macro. Those macros are also used to enable cereal to serialize object from most derived to the base. I could not get that part working however, so as a workaround i added bunch of \u003ccode\u003evirtual void Serialize()\u003c/code\u003e that call a correct templated serialization function variant. At least these can be hidden behind \u003ccode\u003eURHO3D_OBJECT()\u003c/code\u003e macro if need be.\u003c/p\u003e\n\u003cp\u003eLets look at actual serialization function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-cpp\"\u003e    template\u0026lt;typename Archive\u0026gt;\n    void serialize(Archive\u0026amp; ar)\n    {\n        ar(::cereal::make_nvp(BaseClassName::GetTypeNameStatic().CString(), cereal::base_class\u0026lt;BaseClassName\u0026gt;(this))\n            ,CEREAL_NVP(hash_)\n            ,CEREAL_NVP(vector2_)\n        );\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSingle function handles serialization \u003cem\u003eand\u003c/em\u003e deserialization to any number of supported formats. I am still stunned about this \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=10\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"\u003e \u003ccode\u003emake_nvp()\u003c/code\u003e (stands for ‚Äúmake name-value-pair‚Äù) for serialization of base class is not strictly necessary, but it makes output nicer. One thing you may find confusing is that \u003ccode\u003eInteger Foo\u003c/code\u003e attribute is registered to \u003ccode\u003eCerealTest\u003c/code\u003e class, but it is serialized as part of \u003ccode\u003eSerializable\u003c/code\u003e class. This is because \u003ccode\u003eSerializable\u003c/code\u003e class manages all attributes. This could probably be solved though.\u003c/p\u003e\n\u003cp\u003eAs you see \u003ccode\u003eStrignHash\u003c/code\u003e and \u003ccode\u003eVector2\u003c/code\u003e types are serialized transparently to the user as well. Their values in XML and JSON look user-friendly, but it comes at a cost of implementing serialization a little bit differently for every format.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-cpp\"\u003e\n// Vector2\ntemplate \u0026lt;class Archive\u0026gt; inline\nvoid CEREAL_SAVE_FUNCTION_NAME(Archive\u0026amp; ar, const Urho3D::Vector2\u0026amp; value)\n{\n    if (std::is_same\u0026lt;Archive, JSONInputArchive\u0026gt;::value || std::is_same\u0026lt;Archive, JSONOutputArchive\u0026gt;::value)\n    {\n        size_type size = 2;\n        ar(make_size_tag(size));    // Make json use array. Without this output would be {\"value0\": 12.0, \"value1\": 34.0}\n        ar(value.x_, value.y_);\n    }\n    else if (std::is_same\u0026lt;Archive, XMLInputArchive\u0026gt;::value || std::is_same\u0026lt;Archive, XMLOutputArchive\u0026gt;::value)\n        ar(std::string(value.ToString().CString()));    // Serialize as string to make everything fit into one xml tag.\n    else\n        ar(value.x_, value.y_);  // Binary archives, at least they are trivial\n}\n\ntemplate \u0026lt;class Archive\u0026gt; inline\nvoid CEREAL_LOAD_FUNCTION_NAME(Archive\u0026amp; ar, Urho3D::Vector2\u0026amp; value)\n{\n    if (std::is_same\u0026lt;Archive, JSONInputArchive\u0026gt;::value || std::is_same\u0026lt;Archive, JSONOutputArchive\u0026gt;::value)\n    {\n        size_type size = 2;\n        ar(make_size_tag(size));\n        ar(value.x_, value.y_);\n    }\n    else if (std::is_same\u0026lt;Archive, XMLInputArchive\u0026gt;::value || std::is_same\u0026lt;Archive, XMLOutputArchive\u0026gt;::value)\n    {\n        std::string text;\n        ar(text);\n        value = Urho3D::ToVector2(text.c_str());\n    }\n    else\n        ar(value.x_, value.y_);\n}\nURHO3D_SERIALIZE_PLAIN(XML, Urho3D::Vector2);  // Hint cereal that this type is simple enough that it does not need multi-level xml tree.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor time being i removed versioning. This matter still needs some thought. Object version has has also to be declared with a macro \u003ccode\u003eCEREAL_CLASS_VERSION(Type, Version)\u003c/code\u003e at global scope. Maybe versioning could be achieved by defining \u003ccode\u003eusing Version = 1;\u003c/code\u003e in the class and have cereal use that automatically if it is present.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eConclusion: current implementation is very early WIP, but it holds promise to satisfy all requirements. Implementation that is on par with current features is possible now (although file formats would change). More concerning part is support for polymorphism, so we could also serialize any subclasses of \u003ccode\u003eSerializable\u003c/code\u003e stored in shared pointers and have them restored properly. This would likely require some serious work reimplementing bulk of cereal‚Äôs features to use metadata defined in \u003ccode\u003eURHO3D_OBJECT()\u003c/code\u003e macro.\u003c/p\u003e","post_number":6,"post_type":1,"updated_at":"2019-01-14T10:06:59.757Z","reply_count":1,"reply_to_post_number":5,"quote_count":1,"incoming_link_count":2,"reads":42,"readers_count":41,"score":83.4,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":2}],"moderator":false,"admin":false,"staff":false,"user_id":246,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":27318,"name":"Leith Ketchell","username":"Leith","avatar_template":"/user_avatar/discourse.urho3d.io/leith/{size}/2384_2.png","created_at":"2019-01-15T01:22:29.592Z","cooked":"\u003cp\u003eVery nice!\u003cbr\u003e\nI‚Äôve just quit playing around with using RTTR to automate angelscript bindings at runtime.\u003cbr\u003e\nCereal looks quite tidy!\u003c/p\u003e\n\u003cp\u003eA few questions though.\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#1\u003c/span\u003e - Can it serialize private members?\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#2\u003c/span\u003e - Can we tag public members to NOT be serialized?\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#3\u003c/span\u003e - How does it serialize object references / deal with circular references? I mean - are referenced objects serialized uniquely, or entirely serialized every time a reference is encountered?\u003c/p\u003e","post_number":7,"post_type":1,"updated_at":"2019-01-15T01:22:29.592Z","reply_count":1,"reply_to_post_number":6,"quote_count":0,"incoming_link_count":0,"reads":37,"readers_count":36,"score":12.4,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"Leith Ketchell","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"suspended user","title_is_group":false,"reply_to_user":{"username":"rku","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":1098,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"user_suspended":true,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":27323,"name":"","username":"rku","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png","created_at":"2019-01-15T07:29:22.267Z","cooked":"\u003caside class=\"quote no-group\" data-username=\"Leith\" data-post=\"7\" data-topic=\"4698\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/leith/40/2384_2.png\" class=\"avatar\"\u003e Leith:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI‚Äôve just quit playing around with using RTTR to automate angelscript bindings at runtime.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eIf you are interested in the topic you should drop by to Urho‚Äôs gitter chat and talk to \u003cspan class=\"mention\"\u003e@hugoam\u003c/span\u003e. He is working on his own \u003ca href=\"https://github.com/hugoam/toy/\" rel=\"noopener nofollow ugc\"\u003etoy\u003c/a\u003e engine which automatic binding at runtime to lua and now javascript.\u003c/p\u003e\n\u003caside class=\"quote no-group\" data-username=\"Leith\" data-post=\"7\" data-topic=\"4698\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/leith/40/2384_2.png\" class=\"avatar\"\u003e Leith:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#1\u003c/span\u003e - Can it serialize private members?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eYes! It can serialize anything that serialization function has access to. We can even make serialization function private and still allow cereal to access it through friendling a class.\u003c/p\u003e\n\u003caside class=\"quote no-group\" data-username=\"Leith\" data-post=\"7\" data-topic=\"4698\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/leith/40/2384_2.png\" class=\"avatar\"\u003e Leith:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#2\u003c/span\u003e - Can we tag public members to NOT be serialized?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eSerialization is not automatic.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-cpp\"\u003e    template\u0026lt;typename Archive\u0026gt;\n    void serialize(Archive\u0026amp; ar)\n    {\n        ar(::cereal::make_nvp(BaseClassName::GetTypeNameStatic().CString(), cereal::base_class\u0026lt;BaseClassName\u0026gt;(this))\n            ,CEREAL_NVP(hash_)\n            ,CEREAL_NVP(vector2_)\n        );\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo stop serializing \u003ccode\u003ehash_\u003c/code\u003e you would just remove \u003ccode\u003e,CEREAL_NVP(hash_)\u003c/code\u003e from \u003ccode\u003ear()\u003c/code\u003e call.\u003c/p\u003e\n\u003caside class=\"quote no-group\" data-username=\"Leith\" data-post=\"7\" data-topic=\"4698\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/leith/40/2384_2.png\" class=\"avatar\"\u003e Leith:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#3\u003c/span\u003e - How does it serialize object references / deal with circular references? I mean - are referenced objects serialized uniquely, or entirely serialized every time a reference is encountered?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003ecereal takes care of that as well. Raw pointers are not serialized, but shared/weak pointers are. Cereal takes care to track references and serialize object only once even if it occurs multiple times during serialization. When deserializing it automatically puts same reference to multiple shared pointers as it was seen during serialization. This part needs some work though, because cereal supports only shared pointers from stdlib.\u003c/p\u003e","post_number":8,"post_type":1,"updated_at":"2019-01-15T07:32:00.561Z","reply_count":0,"reply_to_post_number":7,"quote_count":1,"incoming_link_count":3,"reads":38,"readers_count":37,"score":37.6,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":2,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/hugoam/toy/","internal":false,"reflection":false,"title":"GitHub - hugoam/toy: the thin c++ game engine","clicks":5}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":246,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":32996,"name":"gl.tch method","username":"glitch-method","avatar_template":"/user_avatar/discourse.urho3d.io/glitch-method/{size}/2552_2.png","created_at":"2019-08-25T23:54:24.326Z","cooked":"\u003cp\u003ethis is fantastic, thanks!\u003cbr\u003e\ni‚Äôm just a hobbyist and mostly in over my head around here, but this is sort of important. my project is still in the sketching stages, but it absolutely depends on this kind of data-oriented feature. i had been looking at ASN.1 (+xer/ber) recently with this kind of mechanic in mind.\u003c/p\u003e","post_number":9,"post_type":1,"updated_at":"2019-08-25T23:54:24.326Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":31,"readers_count":30,"score":11.2,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"gl.tch method","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":1223,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":33004,"name":"","username":"rku","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png","created_at":"2019-08-26T04:18:39.941Z","cooked":"\u003cp\u003eThis won‚Äôt make into upstream but we made our own solution in rbfx. And uniform serialization is pending. So check it out if that is something you need.\u003c/p\u003e","post_number":10,"post_type":1,"updated_at":"2019-08-26T04:18:39.941Z","reply_count":0,"reply_to_post_number":9,"quote_count":0,"incoming_link_count":0,"reads":32,"readers_count":31,"score":6.4,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"glitch-method","name":"gl.tch method","avatar_template":"/user_avatar/discourse.urho3d.io/glitch-method/{size}/2552_2.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":246,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":33005,"name":"gl.tch method","username":"glitch-method","avatar_template":"/user_avatar/discourse.urho3d.io/glitch-method/{size}/2552_2.png","created_at":"2019-08-26T04:27:30.828Z","cooked":"\u003cp\u003ei already expect to follow your fork as well as main for a few reasons. ;p  figured i‚Äôd mention though, since the thread didn‚Äôt get a grand reception.\u003c/p\u003e","post_number":11,"post_type":1,"updated_at":"2019-08-26T04:27:30.828Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":4,"reads":32,"readers_count":31,"score":26.4,"yours":false,"topic_id":4698,"topic_slug":"automatic-object-serialization","display_username":"gl.tch method","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":1223,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[26709,27285,27286,27287,27293,27302,27318,27323,32996,33004,33005]},"timeline_lookup":[[1,1457],[2,1410],[4,1409],[7,1408],[9,1185]],"suggested_topics":[{"id":7285,"title":"Adding SFINAE for Container Operators","fancy_title":"Adding SFINAE for Container Operators","slug":"adding-sfinae-for-container-operators","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-06-22T02:05:49.368Z","last_posted_at":"2022-06-22T02:05:49.441Z","bumped":true,"bumped_at":"2022-06-22T02:05:49.441Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":98,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7183,"title":"Automating Lua Bindings","fancy_title":"Automating Lua Bindings","slug":"automating-lua-bindings","posts_count":15,"reply_count":4,"highest_post_number":16,"image_url":null,"created_at":"2022-02-03T17:02:43.829Z","last_posted_at":"2022-08-17T18:54:38.644Z","bumped":true,"bumped_at":"2022-08-17T18:54:38.644Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":16,"views":700,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":631,"username":"JTippetts1","name":"J Tippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts1/{size}/96_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":4,"username":"weitjong","name":"Yao Wei Tjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1447,"username":"Batch","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/b/f17d59/{size}.png"}}]},{"id":7272,"title":"Normals causing mesh to go all over the place","fancy_title":"Normals causing mesh to go all over the place","slug":"normals-causing-mesh-to-go-all-over-the-place","posts_count":7,"reply_count":3,"highest_post_number":7,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/optimized/2X/0/0a0a9a3dc40a56fb224dc7ab3b9b167551b57cb6_2_1024x863.png","created_at":"2022-05-30T22:50:15.428Z","last_posted_at":"2022-06-03T09:23:21.988Z","bumped":true,"bumped_at":"2022-06-03T09:42:18.150Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":172,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1507,"username":"Kest","name":"Kest","avatar_template":"/user_avatar/discourse.urho3d.io/kest/{size}/3734_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":653,"username":"extobias","name":"tobias alarcon","avatar_template":"/user_avatar/discourse.urho3d.io/extobias/{size}/2836_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":809,"username":"elix22","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png"}}]},{"id":7197,"title":"Does Urho3D support multithreaded rendering?","fancy_title":"Does Urho3D support multithreaded rendering?","slug":"does-urho3d-support-multithreaded-rendering","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2022-02-21T08:07:57.726Z","last_posted_at":"2022-02-21T08:42:15.358Z","bumped":true,"bumped_at":"2022-02-21T08:42:15.358Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":156,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1490,"username":"Sunc","name":"DoubleSuper","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/df788c/{size}.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}}]},{"id":7290,"title":"Using HDR skies in scenes?","fancy_title":"Using HDR skies in scenes?","slug":"using-hdr-skies-in-scenes","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2022-07-01T22:10:02.015Z","last_posted_at":"2022-07-02T02:10:20.785Z","bumped":true,"bumped_at":"2022-07-02T02:10:20.785Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":133,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1529,"username":"hunkalloc","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/hunkalloc/{size}/3817_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]}],"tags_descriptions":{},"id":4698,"title":"Automatic object serialization","fancy_title":"Automatic object serialization","posts_count":11,"created_at":"2018-11-27T15:50:16.661Z","views":1104,"reply_count":6,"like_count":12,"last_posted_at":"2019-08-26T04:27:30.828Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"automatic-object-serialization","category_id":16,"word_count":2025,"deleted_at":null,"user_id":246,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_4698","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":11,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":5,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":246,"username":"rku","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png","post_count":5,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":1098,"username":"Leith","name":"Leith Ketchell","avatar_template":"/user_avatar/discourse.urho3d.io/leith/{size}/2384_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1},{"id":1223,"username":"glitch-method","name":"gl.tch method","avatar_template":"/user_avatar/discourse.urho3d.io/glitch-method/{size}/2552_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":30,"username":"JTippetts","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts/{size}/357_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":192,"username":"Modanung","name":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":0}],"created_by":{"id":246,"username":"rku","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png"},"last_poster":{"id":1223,"username":"glitch-method","name":"gl.tch method","avatar_template":"/user_avatar/discourse.urho3d.io/glitch-method/{size}/2552_2.png"},"links":[{"url":"https://github.com/hugoam/toy/","title":"GitHub - hugoam/toy: the thin c++ game engine","internal":false,"attachment":false,"reflection":false,"clicks":5,"user_id":246,"domain":"github.com","root_domain":"github.com"},{"url":"http://uscilab.github.io/cereal/","title":"cereal Docs - Main","internal":false,"attachment":false,"reflection":false,"clicks":4,"user_id":246,"domain":"uscilab.github.io","root_domain":"uscilab.github.io"}]}}