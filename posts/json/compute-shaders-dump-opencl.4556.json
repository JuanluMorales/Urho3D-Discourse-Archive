{"post_stream":{"posts":[{"id":25978,"name":"Jonathan","username":"Sinoid","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/f19dbf/{size}.png","created_at":"2018-09-20T05:04:55.923Z","cooked":"\u003cp\u003eHere’s a chunk of my code for compute.\u003c/p\u003e\n\u003caside class=\"onebox whitelistedgeneric\"\u003e\n  \u003cheader class=\"source\"\u003e\n      \u003cimg src=\"https://github.githubassets.com/favicon.ico\" class=\"site-icon\" width=\"32\" height=\"32\"\u003e\n      \u003ca href=\"https://github.com/JSandusky/Urho3DCompute\" target=\"_blank\" rel=\"nofollow noopener\"\u003eGitHub\u003c/a\u003e\n  \u003c/header\u003e\n  \u003carticle class=\"onebox-body\"\u003e\n    \u003cimg src=\"https://global.discourse-cdn.com/standard17/uploads/urho3d/original/2X/3/327f86a9d5a6be30dcd90d00c326190f35045e87.jpg\" class=\"thumbnail onebox-avatar\" width=\"400\" height=\"400\"\u003e\n\n\u003ch3\u003e\u003ca href=\"https://github.com/JSandusky/Urho3DCompute\" target=\"_blank\" rel=\"nofollow noopener\"\u003eJSandusky/Urho3DCompute\u003c/a\u003e\u003c/h3\u003e\n\n\u003cp\u003eCompute shaders for Urho3D. Contribute to JSandusky/Urho3DCompute development by creating an account on GitHub.\u003c/p\u003e\n\n\n  \u003c/article\u003e\n  \u003cdiv class=\"onebox-metadata\"\u003e\n    \n    \n  \u003c/div\u003e\n  \u003cdiv style=\"clear: both\"\u003e\u003c/div\u003e\n\u003c/aside\u003e\n\n\u003cp\u003eDX11 stuff has far too much cludge I have to clean up (it’s really really bad cludge), and OpenGL is still an SSBO land and it’s just a mess (\u003cstrong\u003espoiler:\u003c/strong\u003e you can have compute but no SSBO with OGL drivers - and I have 2 of those machines). I legitimately would feel like poo if I put those out.\u003c/p\u003e\n\u003cp\u003eOpenCL on the other-hand is dandy!\u003c/p\u003e\n\u003cp\u003eFor some reason, I can’t find my CMake scripts that dealt with finding OpenCL and setting all this up, once I find them I’ll add them into the repo (and as patch-files in another \u003ccode\u003ePatch\u003c/code\u003e folder).\u003c/p\u003e\n\u003cp\u003eDo not count on me to fulfill anything with this one, write your own DX11 or OGL versions of the common interface, refine it, w/e.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe OpenCL code has shipped, several times - though this exact incarnation (ported to Urho3D) has not. It’s been a traveling thing following me everywhere I go.\u003c/p\u003e\n\u003cp\u003eIf you need a hand being horrified away from compute, here’s some density functions I use for SDFs in compute (not just bytecode, but \u003cem\u003eimplied\u003c/em\u003e bytecode):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#define MATRIX_SIZE 3\n#define SprueMin(a, b) (((a) \u0026lt; (b)) ? (a) : (b))\n#define SprueMax(a, b) (((a) \u0026gt; (b)) ? (a) : (b))\n#define MaxElem(a) (max(a.x, max(a.y, a.z)))\n\nfloat3 MatrixMul(float3 pos, const global float4* transforms, int* shapeIndex)\n{\n    float4 f4 = { pos.x, pos.y, pos.z, 1.0f };\n    int idx = (*shapeIndex)++;\n    return (float3) { dot(transforms[idx * 3], f4), dot(transforms[idx * 3 + 1], f4), dot(transforms[idx * 3 + 2], f4) };\n}\n\nfloat length2(float3 a)\n{ \n    return a.x * a.x + a.y * a.y + a.z * a.z;\n}\n\nfloat3 ClosestPoint(float3 a, float3 b, float3 point)\n{ \n    float3 dir = b - a;\n    return a + clamp(dot(point - a, dir) / length2(dir), 0.0f, 1.0f) * dir;\n}\n\nfloat SphereDensity(float3 pos, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{ \n    pos = MatrixMul(pos, transforms, shapeIndex);\n    const float radius = data[(*paramIndex)];\n    (*paramIndex) = (*paramIndex) + 1;\n    // TODO\n    return length(pos) - radius;\n}\n\n\nfloat BoxDensity(float3 pos, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{ \n    pos = MatrixMul(pos, transforms, shapeIndex);\n    const float xDim = data[(*paramIndex)++]/2.0f;\n    const float yDim = data[(*paramIndex)++]/2.0f;\n    const float zDim = data[(*paramIndex)++]/2.0f;\n\n    float3 d = fabs(pos) - (float3){ xDim, yDim, zDim };\n    //d -= float3 { xDim, yDim, zDim };\n    return SprueMin(MaxElem(d), 0.0f) + length(max(d, (float3){ 0,0,0 }));\n}\n\nfloat RoundedBoxDensity(float3 pos, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{\n    pos = MatrixMul(pos, transforms, shapeIndex);\n    const float xDim = data[(*paramIndex)++]/4.0f;\n    const float yDim = data[(*paramIndex)++]/4.0f;\n    const float zDim = data[(*paramIndex)++]/4.0f;\n    const float rounding = data[(*paramIndex)++];\n    \n    float3 d = fabs(pos) - (float3){ xDim, yDim, zDim };\n    return SprueMin(MaxElem(d), 0.0f) + length(max(d, (float3){0,0,0})) - rounding;\n}\n\nfloat ConeDensity(float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{\n    p = MatrixMul(p, transforms, shapeIndex);\n    const float c = data[*paramIndex];// / 2.0f;\n    *paramIndex = *paramIndex + 1;\n    \n    const float r = data[*paramIndex];\n    *paramIndex = *paramIndex + 1;\n    \n    float d = length((float2)(p.x, p.z)) - r * (1.0f - (c + p.y) / (c + c));\n    d = max(d, -p.y - c);\n    d = max(d, p.y - c);\n    return d;\n}\n\nfloat EllipsoidDensity(float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{ \n    p = MatrixMul(p, transforms, shapeIndex);\n    const float paramX = data[(*paramIndex)++];\n    const float paramY = data[(*paramIndex)++];\n    const float paramZ = data[(*paramIndex)++];\n    return (length(p / (float3){paramX,paramY, paramZ}) - 1.0f) * min(min(paramX,paramY),paramZ);\n}\n\n\nfloat CylinderDensity(float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{ \n    p = MatrixMul(p, transforms, shapeIndex);\n    const float radius = data[(*paramIndex)++];\n    const float height = data[(*paramIndex)++];\n\n    float4 pt = { p.x, p.z, 0, 0 };\n    float d = length(pt) - radius;\n    return max(d, fabs(p.y) - height * 0.5f);\n}\n\nfloat CapsuleDensity(float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{ \n    p = MatrixMul(p, transforms, shapeIndex);\n    float p1 = data[(*paramIndex)++];\n    float p2 = data[(*paramIndex)++];\n    float3 a = { 0.0f, 0.0f, p2 / 2.0f };\n    float3 b = { 0.0f, 0.0f, -a.z };\n    float3 nearest = ClosestPoint(a, b, p);\n    return length(p - nearest) - p1;\n}\n\nfloat PlaneDensity(float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{\n    p = MatrixMul(p, transforms, shapeIndex);\n    return dot(p, (float3){ data[(*paramIndex)++], data[(*paramIndex)++], data[(*paramIndex)++] }) + data[(*paramIndex)++];\n}\n\nfloat TorusDensity(float3 p, const global float* data, const global float4* transforms, int* paramindex, int* shapeIndex)\n{ \n    p = MatrixMul(p, transforms, shapeIndex);\n    float4 q = { length((float4){ p.x, p.z, 0, 0 }) - data[(*paramindex)++], p.y, 0, 0 };\n    return length(q) - data[(*paramindex)++];\n}\n\nfloat Segment(float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{\n    p = MatrixMul(p, transforms, shapeIndex);\n    float segmentCount = data[(*paramIndex)++];\n    float currentDistance = 100000.0f;\n    for (float i = 0.0; i \u0026lt; segmentCount - 1; i += 1.0)\n    {\n        float sx  = data[(*paramIndex)++];\n        float sy  = data[(*paramIndex)++];\n        float sz  = data[(*paramIndex)++];\n        float sdx = data[(*paramIndex)++];\n        float sdy = data[(*paramIndex)++];\n        float sdz = data[(*paramIndex)++];\n    \n        float3 startPos = { sx,sy,sz };\n        float3 startDim = { sdx, sdy, sdz };\n        \n        float ex  = data[(*paramIndex)++];\n        float ey  = data[(*paramIndex)++];\n        float ez  = data[(*paramIndex)++];\n        float edx = data[(*paramIndex)++];\n        float edy = data[(*paramIndex)++];\n        float edz = data[(*paramIndex)++];\n        \n        float3 endPos = { ex, ey, ez };\n        float3 endDim = { edx, edy, edz };\n        \n        float3 pa = p - startPos;\n        float3 ba = endPos - startPos;\n        float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0f, 1.0f);\n\n        // Calculate an ellipsoid distance at the given point\n        float3 interpRad = mix(startDim, endDim, h);\n        const float distance = (length((pa - ba*h) / interpRad) - 1.0f) * min(interpRad.x, min(interpRad.y, interpRad.z));\n\n        currentDistance = min(currentDistance, distance);\n    }\n    return currentDistance;\n}\n\nfloat2 octahedron(float3 p, float r) {\n  float3 o = (fabs(p)/sqrt(3.f));\n  float s = (o.x+o.y+o.z);\n  return (float2)((s-(r*(2.f/sqrt(3.f)))),1.f);\n}\n \nfloat3 opTwist(float3 p) {\n  float t = 3.f;\n  float c = cos((t*p.y));\n  float s = sin((t*p.y));\n  float2 mp = { c * p.x - s * p.z, s * p.x + c * p.z };\n  float3 q = (float3)(mp.x, mp.y, p.y);\n  return q;\n}\n \nfloat PaniqQDensity(float3 p) {\n  p = opTwist(p);\n  //p = p * 0.1f;\n  float2 o = octahedron(p,15.0f);\n  float m = min(o.x, o.y);\n  return m;\n  //return max(m, (10.0f-length(p)));\n}\n\nfloat tangle(float3 p)\n{\n    p = p * 0.1f;\n    float a = p.x * p.x * p.x * p.x;\n    float b = -5.f * (p.x * p.x);\n    float c = p.y * p.y * p.y * p.y;\n    float d = -5.f * (p.y * p.y);\n    float e = p.z * p.z * p.z * p.z;\n    float f = -5.f * (p.z * p.z);\n    float g = 11.8f;\n    return a + b + c + d + e + f + g;\n}\n\nfloat CSGAdd(float lhs, float rhs)\n{ \n    return min(lhs, rhs);\n}\n\nfloat CSGSubtract(float lhs, float rhs)\n{ \n    return max(lhs, -rhs);\n}\n\nfloat CSGIntersect(float lhs, float rhs)\n{ \n    return max(lhs, rhs);\n}\n\nfloat EvaluateShape(float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{\n    uint shapeID = data[*paramIndex];\n    (*paramIndex)++;\n    \n    switch (shapeID)\n    {\n    case 0: // Sphere\n        return SphereDensity(p, data, transforms, paramIndex, shapeIndex);\n    case 1: // Box\n        return BoxDensity(p, data, transforms, paramIndex, shapeIndex);\n    case 2: // rounded box\n        break;\n    case 3: // Capsule\n        return CapsuleDensity(p, data, transforms, paramIndex, shapeIndex);\n    case 4: // Cylinder\n        return CylinderDensity(p, data, transforms, paramIndex, shapeIndex);\n    case 5: // Cone\n        return ConeDensity(p, data, transforms, paramIndex, shapeIndex);\n    case 6: // Plane\n        return PlaneDensity(p, data, transforms, paramIndex, shapeIndex);\n    case 7: // Ellipsoid\n        return EllipsoidDensity(p, data, transforms, paramIndex, shapeIndex);\n    case 8: // Torus\n        return TorusDensity(p, data, transforms, paramIndex, shapeIndex);\n    case 9: // Reserved space for super ellipsoid ... if the patent ever goes away\n        return 1000.0f;\n    case 10: // Reserved space for Segment\n        break;\n    case 11: // Reserved space for Catmul-Rom spline\n        break;\n    }\n    return 1000.0f;\n}\n\nfloat EvaluateGraph(float curDensity, float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{\n    uint command = data[*paramIndex];\n    (*paramIndex)++;\n    \n    // Todo: consider a stack, Blist won't actually work\n    while (command != 0)\n    {\n        float density = EvaluateShape(p, data, transforms, paramIndex, shapeIndex);\n        \n        switch (command)\n        {\n        case 0:\n            return curDensity;\n        case 1:\n            curDensity = CSGAdd(curDensity, density);\n            break;\n        case 2:\n            curDensity = CSGSubtract(curDensity, density);\n            break;\n        case 3:\n            curDensity = CSGIntersect(curDensity, density);\n            break;\n        }\n        \n        command = data[*paramIndex];\n    }\n    \n    return curDensity;\n}\n\nfloat EvaluateDensity(float3 p, const global float* data, const global float4* transforms, int* paramIndex, int* shapeIndex)\n{\n    float density = EvaluateShape(p, data, transforms, paramIndex, shapeIndex);\n    return EvaluateGraph(density, p, data, transforms, paramIndex, shapeIndex);\n}\u003c/code\u003e\u003c/pre\u003e","post_number":1,"post_type":1,"updated_at":"2018-09-20T05:05:59.720Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":74,"reads":52,"readers_count":51,"score":395.4,"yours":false,"topic_id":4556,"topic_slug":"compute-shaders-dump-opencl","display_username":"Jonathan","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/JSandusky/Urho3DCompute","internal":false,"reflection":false,"title":"GitHub - JSandusky/Urho3DCompute: Compute shaders for Urho3D","clicks":33}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":669,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[25978]},"timeline_lookup":[[1,1525]],"suggested_topics":[{"id":7099,"title":":fallen_leaf: Polynomials \u0026 Harmonics","fancy_title":":fallen_leaf: Polynomials \u0026amp; Harmonics","slug":"polynomials-harmonics","posts_count":6,"reply_count":0,"highest_post_number":7,"image_url":null,"created_at":"2021-12-13T05:06:04.641Z","last_posted_at":"2021-12-27T23:27:39.489Z","bumped":true,"bumped_at":"2021-12-27T23:27:39.489Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🍂 Polynomials \u0026 Harmonics","tags_descriptions":{},"like_count":6,"views":392,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]},{"id":7103,"title":":test_tube: DebugRenderer as GUI","fancy_title":":test_tube: DebugRenderer as GUI","slug":"debugrenderer-as-gui","posts_count":4,"reply_count":1,"highest_post_number":4,"image_url":null,"created_at":"2021-12-17T02:25:06.606Z","last_posted_at":"2021-12-18T01:09:27.738Z","bumped":true,"bumped_at":"2021-12-18T01:09:27.738Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🧪 DebugRenderer as GUI","tags_descriptions":{},"like_count":4,"views":267,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":861,"username":"GodMan","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]},{"id":7110,"title":"Resource fetch define","fancy_title":"Resource fetch define","slug":"resource-fetch-define","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2021-12-27T12:28:55.126Z","last_posted_at":"2021-12-27T17:00:37.699Z","bumped":true,"bumped_at":"2021-12-27T17:00:37.699Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":7,"views":184,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":1304,"username":"lebrewer","name":"lebrewer","avatar_template":"/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]},{"id":7120,"title":"Log Error Once Macro","fancy_title":"Log Error Once Macro","slug":"log-error-once-macro","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-01-04T02:24:37.857Z","last_posted_at":"2022-01-04T02:24:37.925Z","bumped":true,"bumped_at":"2022-01-04T02:24:37.925Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":3,"views":143,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7114,"title":":fireworks: Multi-Mower","fancy_title":":fireworks: Multi-Mower","slug":"multi-mower","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/optimized/2X/2/21e99fb677795abba6665611690df6db44a4f724_2_1024x336.png","created_at":"2022-01-01T00:59:53.176Z","last_posted_at":"2022-01-01T10:18:14.930Z","bumped":true,"bumped_at":"2022-01-01T22:11:41.028Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🎆 Multi-Mower","tags_descriptions":{},"like_count":1,"views":258,"category_id":12,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]}],"tags_descriptions":{},"id":4556,"title":"Compute Shaders Dump (OpenCL)","fancy_title":"Compute Shaders Dump (OpenCL)","posts_count":1,"created_at":"2018-09-20T05:04:55.834Z","views":718,"reply_count":0,"like_count":1,"last_posted_at":"2018-09-20T05:04:55.923Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"compute-shaders-dump-opencl","category_id":13,"word_count":1421,"deleted_at":null,"user_id":669,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_4556","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":1,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":1,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":669,"username":"Sinoid","name":"Jonathan","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/f19dbf/{size}.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2}],"created_by":{"id":669,"username":"Sinoid","name":"Jonathan","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/f19dbf/{size}.png"},"last_poster":{"id":669,"username":"Sinoid","name":"Jonathan","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/f19dbf/{size}.png"},"links":[{"url":"https://github.com/JSandusky/Urho3DCompute","title":"GitHub - JSandusky/Urho3DCompute: Compute shaders for Urho3D","internal":false,"attachment":false,"reflection":false,"clicks":33,"user_id":669,"domain":"github.com","root_domain":"github.com"}]}}