{"post_stream": {"posts": [{"id": 7070, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-08-05T20:51:56.000Z", "cooked": "<p>This exchange covers most of Google Play Services Achievements and Leaderboard, AdMob Banner and Interstitial, and Licensing check.  It doesn\u2019t cover in-app purchases, as I haven\u2019t had any in-app products to sell.</p>\n<p><span class=\"bbcode-b\">There are several parts to this exchange.</span><br>\nI\u2019ll start with Java code which will cover an optional part to remove the default shared library loader and replacing it with loading just a single game shared library, things that need to be changed in SDLActivity, what base function declarations are in SDLActivity, and onto a full implementation of it all in a secondary java file.<br>\nThen I\u2019ll cover JNI functions which will be an intermediary to Java and native code, and onto ServiceCmd singleton class, and wrap it up with a game side sample code.</p>\n<p><span class=\"bbcode-b\">Edit: this project was built in Android SDK and linked with a library from <a href=\"https://github.com/okamstudio/godot/tree/master/platform/android/libs/play_licensing\" data-bbcode=\"true\">https://github.com/okamstudio/godot/tree/master/platform/android/libs/play_licensing</a></span></p>\n<p><span class=\"bbcode-b\">[size=150]1) Removing the default shared library loader in SDLActivity (optional)[/size]</span><br>\nThis is optional, but I didn\u2019t see a point of having this shared library loader for a final product when I just needed to load <a href=\"http://MyGame.so\">MyGame.so</a> file.  Nor did I need the screen to change from portrait to landscape when I launched the game.<br>\nIn SDLActivity.java, starting at line 88.  Look for comment:  // Urho3D: auto load all the shared libraries available in the library path<br>\n[ul]<br>\ni) Remove lines 88 to line 113.<br>\nii) grep and remove all instances of <span class=\"bbcode-b\">mIsSharedLibraryLoaded</span> in the file.   Leave SDLActivity.nativeQuit(); there at line 172.<br>\niii) replace <span class=\"bbcode-b\">protected boolean onLoadLibrary()</span> function with</p>\n<pre><code class=\"lang-auto\">    // load the .so\n    static {\n        System.loadLibrary( \"MyGame\" );  // actual filename has \"lib\" prefix and \".so\" suffix, e.g. \"libMyGame.so\" in the jniLibs folder under Android SDK project\n                                         // or in libs folder for a non Android SDK project            \n    }</code></pre>\n<p>iv) You no longer need SampleLauncher.java and Urho3D.java files, delete them both.  These will be replaced by MyGame.java<br>\n[/ul]</p>\n<p><span class=\"bbcode-b\">[size=150]2) Changes to SDLActivity[/size]</span><br>\n[ul]<br>\ni) replace <span class=\"bbcode-b\">import android.widget.AbsoluteLayout;</span> with import android.widget.RelativeLayout;  // required for AdView<br>\nii) optional - change private static final String TAG = \u201cSDL\u201d; to <span class=\"bbcode-b\">protected</span> if you want to use the TAG in MyGame.java class.<br>\niii) changes starting from <span class=\"bbcode-b\">onCreate()</span>: change the layout, declare base class functions, JNI func. and changes to the onXXXX() funcs.<br>\n<span class=\"bbcode-b\">Note:</span> //LUMAKSOFTWARE comments were added to keep track of where I made the changes to the original code.</p>\n<pre><code class=\"lang-auto\">    // Setup\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Log.v(\"SDL\", \"onCreate():\" + mSingleton);\n        super.onCreate(savedInstanceState);\n\n        SDLActivity.initialize();\n        // So we can call stuff from static callbacks\n        mSingleton = this;\n\n        // Set up the surface\n        mSurface = new SDLSurface(getApplication());\n\n        // SDL standard layout\n        //mLayout = new AbsoluteLayout(this);\n        mLayout = new RelativeLayout(this);\n        mLayout.addView( mSurface );\n        setContentView( mLayout );\n\n        // intialize app after mLayout is created\n        InitializeApp();\n\n        // rest of setup\n        if ( Build.VERSION.SDK_INT &gt;= 12 ) {\n            mJoystickHandler = new SDLJoystickHandler_API12();\n        }\n        else {\n            mJoystickHandler = new SDLJoystickHandler();\n        }\n    }\n\n    // LUMAKSOFTWARE: declare base class funcs\n    protected void InitializeApp() {\n    }\n    protected void PauseApp() {\n    }\n    protected void ResumeApp() {\n    }\n    protected void DestroyApp() {\n    }\n    protected boolean onProcessUserCommand(int command, Object param) { \n        return false; \n    }\n\n    // LUMAKSOFTWARE: user native callback function\n    public static native void nativeUserActivityCallback(int val, int istat, String file);\n\n    // Events\n    @Override\n    protected void onPause() {\n        Log.v(\"SDL\", \"onPause()\");\n\n        // LUMAKSOFTWARE: pause app\n        PauseApp();\n\n        super.onPause();\n        SDLActivity.handlePause();\n    }\n\n    @Override\n    protected void onResume() {\n        Log.v(\"SDL\", \"onResume()\");\n        super.onResume();\n        SDLActivity.handleResume();\n\n        // LUMAKSOFTWARE: resume app\n        ResumeApp();\n    }\n\n    @Override\n    protected void onDestroy() {\n        Log.v(\"SDL\", \"onDestroy()\");\n\n        // LUMAKSOFTWARE: destroy app\n        DestroyApp();\n\n        // Send a quit message to the application\n        SDLActivity.mExitCalledFromJava = true;\n        SDLActivity.nativeQuit();\n\n        // Now wait for the SDL thread to quit\n        if (SDLActivity.mSDLThread != null) {\n            try {\n                SDLActivity.mSDLThread.join();\n            } catch(Exception e) {\n                Log.v(\"SDL\", \"Problem stopping thread: \" + e);\n            }\n            SDLActivity.mSDLThread = null;\n\n            //Log.v(\"SDL\", \"Finished waiting for SDL thread\");\n        }\n\n        super.onDestroy();\n        // Reset everything in case the user re opens the app\n        SDLActivity.initialize();\n    }\n</code></pre>\n<p>iv) also replace another place that had AbsoluteLayout with RelativeLayout</p>\n<pre><code class=\"lang-auto\">    static class ShowTextInputTask implements Runnable {\n        /*\n         * This is used to regulate the pan&amp;scan method to have some offset from\n         * the bottom edge of the input region and the top edge of an input\n         * method (soft keyboard)\n         */\n        static final int HEIGHT_PADDING = 15;\n\n        public int x, y, w, h;\n\n        public ShowTextInputTask(int x, int y, int w, int h) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n            this.h = h;\n        }\n\n        @Override\n        public void run() {\n            // LUMAKSOFTWARE: AdView requires RelativeLayout - Add adView to the bottom of the screen.\n            RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(\n                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n            params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);\n\n            //AbsoluteLayout.LayoutParams params = new AbsoluteLayout.LayoutParams(\n            //        w, h + HEIGHT_PADDING, x, y);\n\n            if (mTextEdit == null) {\n                mTextEdit = new DummyEdit(getContext());\n\n                mLayout.addView(mTextEdit, params);\n            } else {\n                mTextEdit.setLayoutParams(params);\n            }\n\n            mTextEdit.setVisibility(View.VISIBLE);\n            mTextEdit.requestFocus();\n\n            InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n            imm.showSoftInput(mTextEdit, 0);\n        }\n    }\n</code></pre>\n<p>v) changes to the SDLCommandHandler() func.</p>\n<pre><code class=\"lang-auto\">    protected static class SDLCommandHandler extends Handler {\n        @Override\n        public void handleMessage(Message msg) {\n            Context context = getContext();\n            if (context == null) {\n                Log.e(TAG, \"error handling message, getContext() returned null\");\n                return;\n            }\n            switch (msg.arg1) {\n            case COMMAND_CHANGE_TITLE:\n                if (context instanceof Activity) {\n                    ((Activity) context).setTitle((String)msg.obj);\n                } else {\n                    Log.e(TAG, \"error handling message, getContext() returned no Activity\");\n                }\n                break;\n            case COMMAND_TEXTEDIT_HIDE:\n                if (mTextEdit != null) {\n                    mTextEdit.setVisibility(View.GONE);\n\n                    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n                    imm.hideSoftInputFromWindow(mTextEdit.getWindowToken(), 0);\n                }\n                break;\n\n            default:\n                // LUMAKSOFTWARE: onProcessUserCommand function\n                if ((context instanceof SDLActivity) &amp;&amp; ((SDLActivity) context).onProcessUserCommand(msg.arg1, msg.obj)) {\n                    // returning true means the message was intended for the game/app, \n                    // otherwise process it as a unhandled message\n                }\n                else if ((context instanceof SDLActivity) &amp;&amp; !((SDLActivity) context).onUnhandledMessage(msg.arg1, msg.obj)) {\n                    Log.e(TAG, \"error handling message, command is \" + msg.arg1);\n                }\n            }\n        }\n    }\n</code></pre>\n<p>[/ul]</p>\n<p><span class=\"bbcode-b\">[size=150]3) MyGame.java code[/size]</span><br>\nThis replaces the java files mentioned in option 1).<br>\nThis is the main code that drives GooglePlay, AdMob, and License functions, class extends SDLActivity overriding the base class functions that we declared in step 2).</p>\n<pre><code class=\"lang-auto\">//=============================================================================\n// Copyright (c) 2015 LumakSoftware\n//=============================================================================\npackage com.mycompany.mygame;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\nimport org.libsdl.app.SDLActivity;\n\nimport android.content.Intent;\n\nimport android.widget.RelativeLayout;\nimport android.content.*;\nimport android.view.*;\nimport android.os.*;\nimport android.util.Log;\n\n//============================================\n// imports for licensing, admob and googleAPI\n//============================================\nimport com.google.android.vending.licensing.LicenseChecker;\nimport com.google.android.vending.licensing.LicenseCheckerCallback;\nimport com.google.android.vending.licensing.Policy;\nimport com.google.android.vending.licensing.ServerManagedPolicy;\nimport com.google.android.vending.licensing.AESObfuscator;\n\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.AdSize;\nimport com.google.android.gms.ads.AdView;\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.InterstitialAd;\n\nimport com.google.android.gms.common.ConnectionResult;\nimport com.google.android.gms.common.GooglePlayServicesUtil;\nimport com.google.android.gms.common.api.GoogleApiClient;\nimport com.google.android.gms.games.Games;\nimport com.google.android.gms.games.Player;\nimport com.google.android.gms.plus.Plus;\n\n// game R string values\nimport com.mycompany.mygame.R;\n\n//=============================================================================\n// game/app class\n//=============================================================================\npublic class MyGame extends SDLActivity implements GoogleApiClient.ConnectionCallbacks,\n        GoogleApiClient.OnConnectionFailedListener {\n\n    // google API\n    private GoogleApiClient mGoogleApiClient;\n    private static final int DBG_GCONNECT = 1;\n    private static final int RC_SIGN_IN = 9001;\n    private static final int RC_UNUSED = 5001;\n\n    // AdMob\n    private InterstitialAd mInterstitialAd;\n    private AdView mAdView;\n    private AdRequest mAdRequest;\n    private static final boolean DBG_ADMOB_TESTMODE = true;\n\n    private static final byte[] SALT = new byte[] {\n            -46,  63, 30, -77, -153, -59,  74, -64, 51, 88,\n            -95, -45, 77, -167, -33, -133, -15, 32, -64, 89\n    };\n\n    // license\n    private LicenseCheckerCallback mLicenseCheckerCallback;\n    private LicenseChecker mChecker;\n    private int miLicenseCheckRetries;\n\n    //=================================\n    // LUMAKSOFTWARE: func overrides\n    //=================================\n    @Override\n    protected void InitializeApp(){\n\n        // google api\n        CreateGoogleAPI();\n\n        // licensing - uncomment for test or for in-app purchase stuff\n        //CreateLicenseCheck();\n\n        // AdMob - only create the AdRequest on init, interstitial and adview are created on command\n        CreateAdRequest();\n    }\n\n    @Override\n    protected void PauseApp() {\n        // pause AdView\n        PauseAdView();\n    }\n\n    @Override\n    protected void ResumeApp() {\n        // resume AdView\n        ResumeAdView();\n    }\n\n    @Override\n    protected void DestroyApp(){\n\n        if ( mChecker != null )\n        {\n            mChecker.onDestroy();\n            mChecker = null;\n        }\n\n        // AdView\n        DestroyAdView();\n\n        // disconnect\n        if ( isSignedIn() ){\n            mGoogleApiClient.disconnect();\n        }\n    }\n\n    // LUMAKSOFTWARE: onProcessUserCommand function \n    @Override\n    protected boolean onProcessUserCommand(int command, Object param) {\n\n        boolean bresult = false;\n        int iParam = (int)param;\n        int iHasFocus = hasWindowFocus()?1:0;\n\n        //if ( command != COMMAND_WINDOW_HAS_FOCUS )\n        //{\n        //    Log.i(\"SDL\", \"onProcessUserCommand() cmd=\" + command + \", param=\" + iParam);\n        //}\n\n        switch ( command ) \n        {\n        case COMMAND_ADMOB_REQUEST_VIDEO:\n            CreateInterstitialAd();\n\n            if ( mInterstitialAd != null )\n            {\n                if ( mInterstitialAd.isLoaded() )\n                {\n                    nativeUserActivityCallback( COMMAND_ADMOB_STATE_VIDEO, ADMOB_STATE_VIDEO_LOADED, \" \");\n                }\n                else\n                {\n                    mInterstitialAd.loadAd(mAdRequest);\n                }\n            }\n            bresult = true;\n            break;\n\n        case COMMAND_ADMOB_SHOW_VIDEO:\n            if ( mInterstitialAd != null &amp;&amp; mInterstitialAd.isLoaded()) {\n                mInterstitialAd.show();\n                nativeUserActivityCallback(COMMAND_ADMOB_STATE_VIDEO, ADMOB_STATE_VIDEO_PLAYING, \" \");\n            }\n\n            bresult = true;\n            break;\n\n        case COMMAND_ADMOB_HIDE_VIDEO:\n            // video hides itself, and the game is minimized while the video is playing - do nothing\n            bresult = true;\n            break;\n\n        case COMMAND_ADMOB_DELETE_VIDEO:\n            if ( mInterstitialAd != null ) \n            {\n                mInterstitialAd = null;\n\n                nativeUserActivityCallback(COMMAND_ADMOB_STATE_VIDEO, ADMOB_STATE_VIDEO_DESTROYED, \" \");\n            }\n            bresult = true;\n            break;\n\n        case COMMAND_ADMOB_REQUEST_BANNER:\n            CreateAdView();\n\n            if ( mAdView != null )\n            {\n                mAdView.loadAd( mAdRequest );\n            }\n\n            bresult = true;\n            break;\n\n        case COMMAND_ADMOB_SHOW_BANNER:\n            if ( mAdView != null )\n            {\n                mAdView.setVisibility( View.VISIBLE );\n                nativeUserActivityCallback(COMMAND_ADMOB_STATE_BANNER, ADMOB_STATE_BANNER_VISIBLE, \" \");\n            }\n            bresult = true;\n            break;\n\n        case COMMAND_ADMOB_HIDE_BANNER:\n            if ( mAdView != null )\n            {\n                mAdView.setVisibility( View.GONE );\n                nativeUserActivityCallback(COMMAND_ADMOB_STATE_BANNER, ADMOB_STATE_BANNER_HIDDEN, \" \");\n            }\n            bresult = true;\n            break;\n\n        case COMMAND_ADMOB_DELETE_BANNER:\n            if ( mAdView != null )\n            {\n                mAdView.destroy();\n                mAdView = null;\n                nativeUserActivityCallback( COMMAND_ADMOB_STATE_BANNER, ADMOB_STATE_BANNER_DESTROYED, \" \" );\n            }\n            bresult = true;\n            break;\n\n        case COMMAND_LICENSE_QUERY:\n            if ( mChecker != null )\n            {\n                mChecker.checkAccess(mLicenseCheckerCallback);\n            }\n            bresult = true;\n            break;\n\n        case COMMAND_GOOGLEAPI_CONNECT:\n            if ( !isSignedIn() ){\n                mGoogleApiClient.connect();\n            }\n            bresult = true;\n            break;\n\n        case COMMAND_GOOGLEAPI_DISCONNECT:\n            if ( isSignedIn() ){\n                mGoogleApiClient.disconnect();\n            }\n            bresult = true;\n            break;\n\n        case COMMAND_ACHIEVEMENT_QUERY:\n            ShowAchievementsRequested();\n            bresult = true;\n            break;\n\n        case COMMAND_ACHIEVEMENT_SUBMIT:\n            UnlockAchievement(iParam);\n            bresult = true;\n            break;\n\n        case COMMAND_LEADERBOARD_QUERY:\n            ShowLeaderboardsRequested();\n            bresult = true;\n            break;\n\n        case COMMAND_LEADERBOARD_SUBMIT:\n            bresult = true;\n            break;\n\n        case COMMAND_LEADERBOARD_SETTIME_1:\n        case COMMAND_LEADERBOARD_SETTIME_2:\n        case COMMAND_LEADERBOARD_SETTIME_3:\n        case COMMAND_LEADERBOARD_SETTIME_4:\n        case COMMAND_LEADERBOARD_SETTIME_5:\n        case COMMAND_LEADERBOARD_SETTIME_6:\n            SubmitLeaderboardScore( command - COMMAND_LEADERBOARD_SETTIME_1, iParam  );\n            bresult = true;\n            break;\n\n        case COMMAND_WINDOW_HAS_FOCUS:\n            nativeUserActivityCallback(COMMAND_WINDOW_HAS_FOCUS, iHasFocus, \" \");\n            bresult = true;\n            break;\n\n        default:\n        }\n\n        return bresult;\n    }\n\n    //================================\n    // static vars\n    //================================\n    // AdMob\n    static final int COMMAND_ADMOB_REQUEST_VIDEO = 4;\n    static final int COMMAND_ADMOB_SHOW_VIDEO    = 5;\n    static final int COMMAND_ADMOB_HIDE_VIDEO    = 6;\n    static final int COMMAND_ADMOB_DELETE_VIDEO  = 7;\n\n    static final int COMMAND_ADMOB_REQUEST_BANNER = 8;\n    static final int COMMAND_ADMOB_SHOW_BANNER    = 9;\n    static final int COMMAND_ADMOB_HIDE_BANNER    = 10;\n    static final int COMMAND_ADMOB_DELETE_BANNER  = 11;\n\n    // Licensing\n    static final int COMMAND_LICENSE_QUERY  = 12;\n    static final int COMMAND_LICENSE_RETRY  = 13;\n    static final int COMMAND_LICENSE_FAILED = 14;\n\n    // GoogleApi\n    static final int COMMAND_GOOGLEAPI_CONNECT    = 15;\n    static final int COMMAND_GOOGLEAPI_ERROR      = 16;\n    static final int COMMAND_GOOGLEAPI_DISCONNECT = 17;\n\n    // achievement\n    static final int COMMAND_ACHIEVEMENT_QUERY  = 18;\n    static final int COMMAND_ACHIEVEMENT_SUBMIT = 19;\n\n    // leaderboard\n    static final int COMMAND_LEADERBOARD_QUERY  = 20;\n    static final int COMMAND_LEADERBOARD_SUBMIT = 21;\n\n    static final int COMMAND_LEADERBOARD_SETTIME_1 = 22;\n    static final int COMMAND_LEADERBOARD_SETTIME_2 = 23;\n    static final int COMMAND_LEADERBOARD_SETTIME_3 = 24;\n    static final int COMMAND_LEADERBOARD_SETTIME_4 = 25;\n    static final int COMMAND_LEADERBOARD_SETTIME_5 = 26;\n    static final int COMMAND_LEADERBOARD_SETTIME_6 = 27;\n\n    // misc\n    static final int COMMAND_WINDOW_HAS_FOCUS   = 28;\n\n    // states\n    static final int COMMAND_ADMOB_STATE_APP    = 1000;\n    static final int COMMAND_ADMOB_STATE_VIDEO  = 1001;\n    static final int  ADMOB_STATE_VIDEO_LOADED    = 0;\n    static final int  ADMOB_STATE_VIDEO_PLAYING   = 1;\n    static final int  ADMOB_STATE_VIDEO_CLOSED    = 2;\n    static final int  ADMOB_STATE_VIDEO_DESTROYED = 3;\n    static final int  ADMOB_STATE_VIDEO_ERROR     = 4;\n    static final int COMMAND_ADMOB_STATE_BANNER = 1002;\n    static final int  ADMOB_STATE_BANNER_LOADED    = 0;\n    static final int  ADMOB_STATE_BANNER_VISIBLE   = 1;\n    static final int  ADMOB_STATE_BANNER_HIDDEN    = 2;\n    static final int  ADMOB_STATE_BANNER_DESTROYED = 3;\n    static final int  ADMOB_STATE_BANNER_ERROR     = 4;\n    \n    // size declaration\n    static final int APP_SIZE_NUM_ACHIEVEMENTS  = 9;\n    static final int APP_SIZE_NUM_LEADERBOARD   = 6; // should match COMMAND_LEADERBOARD_SETTIME_1 to last leaderboard settime\n\n    //================================\n    // googleAPI\n    //================================\n    protected void CreateGoogleAPI() {\n        // instantiate\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\n                .addConnectionCallbacks( this )\n                .addOnConnectionFailedListener(this)\n                .addApi(Plus.API).addScope(Plus.SCOPE_PLUS_LOGIN)\n                .addApi(Games.API).addScope(Games.SCOPE_GAMES)\n                .build();\n    }\n\n    //================================\n    // license\n    //================================\n    private class MyLicenseCheckerCallback implements LicenseCheckerCallback {\n        // void allow()\n        public void allow(int reason) {\n            Log.v(\"SDL\", \"allow()\" + reason);\n            nativeUserActivityCallback(COMMAND_LICENSE_QUERY, 0, \"OK\");\n            if (isFinishing()) {\n                // Don't update UI if Activity is finishing.\n                return;\n            }\n        }\n\n        // void dontAllow\n        public void dontAllow(int reason) {\n            Log.v(\"SDL\", \"dontAllow()\" + reason);\n\n            if (isFinishing()) {\n                // Don't update UI if Activity is finishing.\n                return;\n            }\n\n            if (reason == Policy.RETRY) {\n                // If the reason received from the policy is RETRY, it was probably\n                // due to a loss of connection with the service, so we should give the\n                // user a chance to retry. So show a dialog to rety.\n                //showDialog(DIALOG_RETRY); COMMAND_LICENSE_RETRY\n                nativeUserActivityCallback(COMMAND_LICENSE_RETRY, 0, \"OK\");\n            } else {\n                // Otherwise, the user is not licensed to use this app.\n                // Your response should always inform the user that the application\n                // is not licensed, but your behavior at that point can vary. You might\n                // provide the user a limited access version of your app or you can\n                // take them to Google Play to purchase the app.\n                //showDialog(DIALOG_GOTOMARKET);\n                nativeUserActivityCallback(COMMAND_LICENSE_FAILED, reason, \"OK\");\n            }\n        }\n\n        // void applicationError()\n        public void applicationError(int errorCode){\n            Log.v(\"SDL\", \"MyLicenseCheckerCallback() app error\" + errorCode);\n            // error 3 - not published in google play, just mark it as 'ok' for testing\n            if ( errorCode == 3 ) {\n                nativeUserActivityCallback(COMMAND_LICENSE_QUERY, 0, \"OK\");\n            }\n        }\n\n    }\n\n    // licensing\n    protected void CreateLicenseCheck() {\n\n        // Construct the LicenseCheckerCallback. The library calls this when done.\n        mLicenseCheckerCallback = new MyLicenseCheckerCallback();\n\n        // Construct the LicenseChecker with a Policy.\n        mChecker = new LicenseChecker(\n                this, new ServerManagedPolicy(this,\n                new AESObfuscator(SALT, getPackageName(), getResources().getString(R.string.app_id) )),\n                getResources().getString(R.string.BASE64_PUBLIC_KEY)  // Your public licensing key.\n                );\n    }\n\n    //================================\n    // AdRequest\n    //================================\n    protected void CreateAdRequest() {\n\n        if ( mAdRequest != null )\n        {\n            return;\n        }\n\n        if ( !DBG_ADMOB_TESTMODE )\n        {\n            // live mode\n            mAdRequest = new AdRequest.Builder().build();\n\n        } else {\n            // test mode\n            mAdRequest = new AdRequest.Builder()\n                                      // the string below is not populated at the beginning and you should comment it out the \n                                      // first time you run it then grep for addTestDevice in logcat to get it\n                                      .addTestDevice( \"AF9C9F5B6C6595D55D1E9A9B07011546\" )  // add as many test devices as you want\n                                      .addTestDevice( AdRequest.DEVICE_ID_EMULATOR )\n                                      .build();\n        }\n    }\n\n    //================================\n    // AdView\n    //================================\n    protected void CreateAdView() {\n\n        if ( mAdView != null )\n        {\n            return;\n        }\n\n        mAdView = new AdView(this);\n        mAdView.setAdUnitId( getResources().getString(R.string.banner_ad_unit_id) );\n\n        mAdView.setAdSize(AdSize.SMART_BANNER);\n\n        // set the layer type as LAYER_TYPE_SOFTWARE to avoid getting the black screen of death (will avoid most of them, not all)\n        mAdView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n\n        // Add adView to the bottom of the screen.\n        RelativeLayout.LayoutParams adParams = new RelativeLayout.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        //adParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);\n        adParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);\n\n        // add it to the layout\n        mLayout.addView(mAdView, adParams);\n\n        mAdView.setAdListener( new AdListener() {\n            @Override\n            public void onAdLoaded() {\n                // Code to be executed when an ad finishes loading.\n                nativeUserActivityCallback( COMMAND_ADMOB_STATE_BANNER, ADMOB_STATE_BANNER_LOADED, \" \" );\n                //Log.i(\"SDL\", \"ADMOB_STATE_BANNER_LOADED\" );\n            }\n\n            @Override\n            public void onAdFailedToLoad(int errorCode) {\n                // Code to be executed when an ad request fails.\n                String strError = Integer.toString( errorCode );\n                nativeUserActivityCallback( COMMAND_ADMOB_STATE_BANNER, ADMOB_STATE_BANNER_ERROR, strError );\n            }\n\n            //@Override\n            public void onAdClosed() {\n                // Code to be executed when when the user is about to return\n                // to the application after tapping on an ad.\n                nativeUserActivityCallback(COMMAND_ADMOB_STATE_BANNER, ADMOB_STATE_BANNER_HIDDEN, \" \");\n                //Log.i(\"SDL\", \"-- mAdView -- onAdClosed() \" );\n            }\n        });\n    }\n\n    protected void PauseAdView() {\n        if ( mAdView != null ) {\n            mAdView.pause();\n        }\n    }\n\n    protected void ResumeAdView() {\n\n        if ( mAdView != null ) {\n            mAdView.resume();\n        }\n    }\n\n    protected void DestroyAdView() {\n\n        if ( mAdView != null ) {\n            mAdView.destroy();\n            mAdView = null;\n        }\n    }\n\n    //================================\n    // interstitial\n    //================================\n    protected void CreateInterstitialAd() {\n\n        if ( mInterstitialAd != null )\n        {\n            return;\n        }\n\n        mInterstitialAd = new InterstitialAd(this);\n        mInterstitialAd.setAdUnitId(getResources().getString(R.string.interstitial_ad_unit_id));\n\n        mInterstitialAd.setAdListener(new AdListener() {\n            @Override\n            public void onAdLoaded() {\n                // Code to be executed when an ad finishes loading.\n                nativeUserActivityCallback(COMMAND_ADMOB_STATE_VIDEO, ADMOB_STATE_VIDEO_LOADED, \" \");\n                Log.i(\"SDL\", \"ADMOB_STATE_VIDEO_LOADED\" );\n            }\n\n            @Override\n            public void onAdFailedToLoad(int errorCode) {\n                // Code to be executed when an ad request fails.\n                Log.v(TAG, \"Interstitial - onAdFailedToLoad() error=\" + errorCode);\n                String strError = Integer.toString(errorCode);\n                nativeUserActivityCallback(COMMAND_ADMOB_STATE_VIDEO, ADMOB_STATE_VIDEO_ERROR, strError);\n            }\n\n            @Override\n            public void onAdClosed() {\n                // Code to be executed when when the user is about to return\n                // to the application after tapping on an ad.\n                nativeUserActivityCallback(COMMAND_ADMOB_STATE_VIDEO, ADMOB_STATE_VIDEO_CLOSED, \" \");\n                Log.i(\"SDL\", \"ADMOB_STATE_VIDEO_CLOSED\" );\n            }\n        });\n\n    }\n\n    //================================\n    // google api - connect \n    //================================\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n\n        super.onActivityResult(requestCode, resultCode, intent);\n\n        if (requestCode == RC_SIGN_IN) {\n            if (resultCode == RESULT_OK) {\n                mGoogleApiClient.connect();\n            } else {\n                nativeUserActivityCallback( COMMAND_GOOGLEAPI_ERROR, resultCode, \"1\" );\n            }\n        }\n    }\n\n    @Override\n    public void onConnected(Bundle bundle) {\n        //Log.d(TAG, \"onConnected(): \");\n        \n        // uncomment below if you want to get the playa's name\n        //Player p = Games.Players.getCurrentPlayer(mGoogleApiClient);\n        String displayName = \"playa\";\n\n        //if (p == null) {\n        //    Log.w(TAG, \"mGamesClient.getCurrentPlayer() is NULL!\");\n        //    displayName = \"???\";\n        //} else {\n        //    displayName = p.getDisplayName();\n        //}\n\n        nativeUserActivityCallback(COMMAND_GOOGLEAPI_CONNECT, 1, displayName);\n    }\n\n    @Override\n    public void onConnectionSuspended(int var1) {\n        mGoogleApiClient.connect();\n        Log.d(TAG, \"onConnectionSuspended():\");\n    }\n\n    @Override\n    public void onConnectionFailed(ConnectionResult connectionResult) {\n        Log.d(TAG, \"onConnectionFailed(): attempting to resolve\");\n\n        if ( connectionResult.hasResolution() ) {\n            try {\n                connectionResult.startResolutionForResult(this, RC_SIGN_IN);\n            } catch (IntentSender.SendIntentException e) {\n                // The intent was canceled before it was sent.  Return to the default\n                // state and attempt to connect to get an updated ConnectionResult.\n                mGoogleApiClient.connect();\n            }\n        } else {\n            // not resolvable... so show an error message\n            int errorCode = connectionResult.getErrorCode();\n            nativeUserActivityCallback( COMMAND_GOOGLEAPI_ERROR, errorCode, \" \" );\n        }\n\n    }\n    private boolean isSignedIn() {\n        return (mGoogleApiClient != null &amp;&amp; mGoogleApiClient.isConnected());\n    }\n\n    //================================\n    // achievement and leaderboard\n    //================================\n    public void ShowAchievementsRequested() {\n        if ( isSignedIn() ) \n        {\n            startActivityForResult(Games.Achievements.getAchievementsIntent(mGoogleApiClient), RC_UNUSED );\n        }\n    }\n\n    public void UnlockAchievement(int _idx) {\n        if ( isSignedIn() &amp;&amp; _idx &gt;= 0 &amp;&amp; _idx &lt; APP_SIZE_NUM_ACHIEVEMENTS )\n        {\n            String[] astrAchievementNames = getResources().getStringArray(R.array.achievement_array);\n\n            //Log.v(\"SDL\", \"UnlockAchievement() idx=\" + _idx + \", str='\" + astrAchievementNames[_idx] + \"'\" );\n            Games.Achievements.unlock(mGoogleApiClient, astrAchievementNames[_idx]);\n        }\n    }\n\n    public void ShowLeaderboardsRequested() {\n        if ( isSignedIn() ) \n        {\n            startActivityForResult(Games.Leaderboards.getAllLeaderboardsIntent(mGoogleApiClient), RC_UNUSED);\n        }\n    }\n\n    public void SubmitLeaderboardScore(int _idx, int _iTime) {\n        if ( isSignedIn() &amp;&amp; _idx &gt;= 0 &amp;&amp; _idx &lt; APP_SIZE_NUM_LEADERBOARD )\n        {\n            long lTime = _iTime;\n            String[] astrLBNames = getResources().getStringArray(R.array.leaderboard_array);\n\n            //Log.v(\"SDL\", \"SubmitLeaderboardScore() idx=\" + _idx + \", str='\" + astrLBNames[_idx] + \"'\" );\n            Games.Leaderboards.submitScore(mGoogleApiClient, astrLBNames[_idx], lTime);\n        }\n    }\n\n}</code></pre>\n<p><span class=\"bbcode-b\">IDs, achievement, and leaderboard strings</span></p>\n<pre><code class=\"lang-auto\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n    &lt;string name=\"app_id\"&gt;10XXXXXX130&lt;/string&gt;\n    &lt;string name=\"banner_ad_unit_id\"&gt;ca-app-pub-4xxxxxxxx/1xxxxxxxx&lt;/string&gt;\n    &lt;string name=\"interstitial_ad_unit_id\"&gt;ca-app-pub-4xxxxxx/31xxxxxxx&lt;/string&gt;\n    &lt;string name=\"BASE64_PUBLIC_KEY\"&gt;MIIBIjAxxxxxxxxxxxxxxxxxxxxxBCgKCAQEAkF4wRG9st6jp0qqswPsk0UgzWg/hkj3yzGGxr2o+ogLYbCwrqZsk7x7mDAvC277Je+xmBiKFCXp/qnR3xyW02xp3aebIr8dOUeRovJdbNYhOaRar+5gGOkFABxzcpykftaEhalHV5XSwRJmSQIox220/P/1bRoOgCKnzo9Qm81SzvjaMmnz27joAdPkdP7MLinR7N4tuCgh4UqlrevoAx1XIYLdCziMPR2YQ5lCNOuLM5VtPMc4djAPw3RNfgpPJgD0xbRqlvpdk0DXzlVPuSo/tuqsCRtFK2GSb0cM1oU/pJzCASp66SC+VztgvLhxjcFvSXb7iQ/STRL3kP0r0gwIDAQAB&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>\n<p>You get the following tags from Google Play Developer Console when you create achievements and leaderboard for you game/app.</p>\n<pre><code class=\"lang-auto\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n    &lt;string name=\"app_name\"&gt;MyGame&lt;/string&gt;\n    &lt;string-array name=\"achievement_array\"&gt;\n        &lt;item&gt;CgkIyusYYYuIQAQ&lt;/item&gt; &lt;!-- novice    --&gt;\n        &lt;item&gt;CgkIyuYYYYeIQAg&lt;/item&gt; &lt;!-- skilled    --&gt;\n        &lt;item&gt;CgkIyuYYYYYIQAw&lt;/item&gt; &lt;!-- advanced    --&gt;\n        &lt;item&gt;CgkIyuYYseEAIQBA&lt;/item&gt; &lt;!-- expert    --&gt;\n        &lt;item&gt;CgkIsYYYYYEAIQBQ&lt;/item&gt; &lt;!-- master    --&gt;\n        &lt;item&gt;CgkIyufYYYYYeuBg&lt;/item&gt; &lt;!-- apprentice    --&gt;\n        &lt;item&gt;CgkIyufYYYYYeuw&lt;/item&gt; &lt;!-- journeyman    --&gt;\n        &lt;item&gt;CgkIyufYYYYYeuCA&lt;/item&gt; &lt;!-- master craftsman  --&gt;\n        &lt;item&gt;CgkIyufYYYYeYuCQ&lt;/item&gt; &lt;!-- gold    --&gt;\n    &lt;/string-array&gt;\n    &lt;string-array name=\"leaderboard_array\"&gt;\n        &lt;item&gt;CgkIyYYyyyYufeuCg&lt;/item&gt; &lt;!-- stage 1    --&gt;\n        &lt;item&gt;CgkIyYYYYufeuQCw&lt;/item&gt; &lt;!-- stage 2    --&gt;\n        &lt;item&gt;CgkIyufYYYYYuQDA&lt;/item&gt; &lt;!-- stage 3    --&gt;\n        &lt;item&gt;CgkIyuYYYYYeuQDQ&lt;/item&gt; &lt;!-- stage 4    --&gt;\n        &lt;item&gt;CgkIyufYYYYYeuQDg&lt;/item&gt; &lt;!-- stage 5    --&gt;\n        &lt;item&gt;CgkIyufYYYYYeuQDw&lt;/item&gt; &lt;!-- artists    --&gt;\n    &lt;/string-array&gt;\n\n&lt;/resources&gt;\n</code></pre>\n<p><span class=\"bbcode-b\">[size=150]4) JNI functions[/size]</span><br>\nJava function <span class=\"bbcode-b\">sendMessage(int, int)</span> already exists and is called from <span class=\"bbcode-b\">Android_JNI_SendMessage(int, int)</span>.<br>\nThis part covers the Java function <span class=\"bbcode-b\">public static native void nativeUserActivityCallback(int val, int istat, String file);</span> that we declared in SDLActiviy in section 2).  Along with a callback function that we need to hook into from game side.</p>\n<pre><code class=\"lang-auto\">typedef void (*pfnUserActivityCallback)(int id1, int istat, const char *str, void *param);\n\nstatic pfnUserActivityCallback gpUserActivityCallback = NULL;\nstatic void *gActivityCallbackParam = NULL;\n\nvoid RegisterUserActivityCallback(pfnUserActivityCallback callback, void *param)\n{\n    gpUserActivityCallback = callback;\n    gActivityCallbackParam = param;\n}\n\nvoid Java_org_libsdl_app_SDLActivity_nativeUserActivityCallback(JNIEnv* env, jclass cls, jint id1, jint istat, jstring jstrParam)\n{\n    const char *str = (*env)-&gt;GetStringUTFChars(env, jstrParam, 0);\n\n    if ( gpUserActivityCallback )\n    {\n        (*gpUserActivityCallback)( id1, istat, str, gActivityCallbackParam );\n    }\n\n    if ( str )\n    {\n        (*env)-&gt;ReleaseStringUTFChars(env, jstrParam, str);\n    }\n\n}\n</code></pre>\n<p><span class=\"bbcode-b\">[size=150]5) ServiceCmd singleton class[/size]</span><br>\nThis class handles messages to/from the Java class. It is designed as a singleton to allow access from main game class, classes to access achievement and leaderboard calls, and other classes.<br>\n<span class=\"bbcode-b\">Note:</span>This class is not thread safe, however, AdMob messages are state driven and the game side is also state driven to reduce the chance of over writing status during AdMob activities<br>\nServiceCmd.cpp</p>\n<pre><code class=\"lang-auto\">//=============================================================================\n// Copyright (c) 2015 LumakSoftware\n//=============================================================================\n#include &lt;Urho3D/Urho3D.h&gt;\n#include &lt;Urho3D/Core/CoreEvents.h&gt;\n#include &lt;Urho3D/Core/Context.h&gt;\n#include &lt;Urho3D/Engine/Engine.h&gt;\n#include &lt;Urho3D/Input/InputEvents.h&gt;\n#include &lt;Urho3D/Scene/Scene.h&gt;\n#include &lt;Urho3D/Core/Timer.h&gt;\n\n#include \"ServiceCmd.h\"\n\n#include &lt;Urho3D/DebugNew.h&gt;\n#include &lt;SDL/SDL_Log.h&gt;\n#include &lt;SDL/SDL_assert.h&gt;\n\n//=============================================================================\n//=============================================================================\n#ifdef WIN32\ntypedef void (*pfnUserActivityCallback)(int id1, int istat, const char *str, void *param);\n\nstatic pfnUserActivityCallback gpFnUserActivityCallback = NULL;\nstatic void *gpActivityCallbackParam = NULL;\n\nvoid RegisterUserActivityCallback(pfnUserActivityCallback callback, void *param)\n{\n}\n\nint Android_JNI_SendMessage(int command, int param)\n{\n    return 0;\n}\n#endif\n\n//#define DBG_DUMP_SVCLOG\n\n//=============================================================================\n//=============================================================================\nServiceCmd* ServiceCmd::s_pCAdMob = NULL;\n\n//=============================================================================\n//=============================================================================\nServiceCmd::ServiceCmd(Context *_pcontext)\n    : Object( _pcontext )\n{\n    // init\n    m_TimerWindowFocus.Reset();\n    m_TimerVideo.Reset();\n    m_TimerBanner.Reset();\n    m_TimerLicense.Reset();\n\n    // focus\n    m_bWindowHasFocus = true;\n\n    // connect\n    m_bGooglePlayConnected = false; \n    m_strGooglePlayUserName.Clear();    \n    m_iConnectErrorCode = INVALID_CONNECT_CODE;    \n\n    // admob\n    m_uAdInterval = 2 * 60 * 1000; // 2 mins\n    m_iCmdTimeout = 5;\n    m_bAdPlayedSinceStartup = false;\n\n    m_iVideoState = kAdMobVideo_Ready;\n    m_iBannerState = kAdMobBanner_NotLoaded;\n    m_HasVideoPlayedOnce = false;\n    m_bAppIsPaused = false;\n\n    // license\n    m_bContinueLicenseQuery = true;\n    m_bLicenseQueryMade = false;\n    m_bHasValidLicense = false;\n    m_bHasLicenseQueryResp = false;\n    m_iLicenseResp = -1;\n    \n    // register java callback\n    RegisterUserActivityCallback( &amp;ServiceCmd::JavaActivityCallback, this );\n}\n\n//=============================================================================\n//=============================================================================\nServiceCmd::~ServiceCmd()\n{\n    RegisterUserActivityCallback( NULL, NULL );\n}\n\n//=============================================================================\n//=============================================================================\nvoid ServiceCmd::JavaActivityCallback(int _ival, int _istat, const char *_pstr, void *param)\n{\n    if ( param )\n    {\n        ((ServiceCmd*)param)-&gt;ActivityCallback( _ival, _istat, _pstr );\n    }\n}\n\n//=============================================================================\n//=============================================================================\nvoid ServiceCmd::ActivityCallback(int _icmd, int _istat, const char *_pstr)\n{\n    #ifdef DBG_DUMP_SVCLOG\n    if ( _icmd != COMMAND_WINDOW_HAS_FOCUS )\n    {\n        SDL_Log(\"ServiceCmd::ActivityCallback() icmd=%d, istat=%d, pstr='%s'\\n\", _icmd, _istat, _pstr?_pstr:\" \");\n    }\n    #endif\n\n    switch ( _icmd )\n    {\n    case COMMAND_ADMOB_STATE_VIDEO:\n        switch ( _istat )\n        {\n        case kAdMobVideo_Stat_Loaded:    m_iVideoState = kAdMobVideo_Loaded; break;\n        case kAdMobVideo_Stat_Playing:   m_iVideoState = kAdMobVideo_Playing; break;\n        case kAdMobVideo_Stat_Closed:    m_iVideoState = kAdMobVideo_Ready; ResetVideoTimer(); break;\n        case kAdMobVideo_Stat_Destroyed: m_iVideoState = kAdMobVideo_Ready; break;\n        default: \n            // failed to load error - retry\n            ResetVideoTimer();\n            break;\n        }\n        break;\n\n    case COMMAND_ADMOB_STATE_BANNER:\n        switch ( _istat )\n        {\n        case kAdMobBanner_Stat_Loaded:    \n            if ( m_iBannerState == kAdMobBanner_NotLoaded || m_iBannerState == kAdMobBanner_Requested )\n            {\n                m_iBannerState = kAdMobBanner_Ready;\n            }\n            // AdMob banner continuously loads new banners in the background, and any subsequent calls will automatically show itself\n            // -- prevent it from being visible if not in the visible state\n            else if ( m_iBannerState != kAdMobBanner_Visible )\n            {\n                RequestServiceCmd( COMMAND_ADMOB_HIDE_BANNER );\n            }\n            break;\n        case kAdMobBanner_Stat_Visible:   m_iBannerState = kAdMobBanner_Visible; break;\n        case kAdMobBanner_Stat_Hidden:    m_iBannerState = kAdMobBanner_Hidden; break;\n        case kAdMobBanner_Stat_Destroyed: m_iBannerState = kAdMobBanner_NotLoaded; break;\n        default:\n            // failed to load error - retry\n            ResetBannerTimer();\n            break;\n        }\n        break;\n\n    case COMMAND_GOOGLEAPI_CONNECT:\n        if ( _istat == 1 )\n        {\n            m_bGooglePlayConnected = true;\n\n            if ( _pstr )\n            {\n                m_strGooglePlayUserName = String( _pstr );\n            }\n            #ifdef DBG_DUMP_SVCLOG\n            SDL_Log(\"COMMAND_GOOGLEAPI_CONNECT username='%s'\\n\", m_strGooglePlayUserName.CString() );\n            #endif\n        }\n        else\n        {\n            m_bGooglePlayConnected = false;\n        }\n        break;\n\n    case COMMAND_GOOGLEAPI_ERROR:\n        m_iConnectErrorCode = _istat;\n        break;\n\n    case COMMAND_LICENSE_QUERY:\n    case COMMAND_LICENSE_RETRY:\n    case COMMAND_LICENSE_FAILED:\n        m_bHasLicenseQueryResp = true;\n\n        if ( _icmd == COMMAND_LICENSE_QUERY )\n        {\n            m_bHasValidLicense = true;\n            m_iLicenseResp = 0;\n        }\n        else if ( _icmd == COMMAND_LICENSE_RETRY )\n        {\n            m_iLicenseResp = COMMAND_LICENSE_RETRY;\n        }\n        else\n        {\n            m_iLicenseResp = COMMAND_LICENSE_FAILED;\n        }\n        break;\n\n    case COMMAND_WINDOW_HAS_FOCUS:\n        m_bWindowHasFocus = _istat?true:false;\n        break;\n\n    }\n}\n\n//=============================================================================\n//=============================================================================\nvoid ServiceCmd::RequestServiceCmd(int _iCmdType, int _iSubCmd)\n{\n    if ( _iCmdType &gt;= COMMAND_ADMOB_REQUEST_VIDEO &amp;&amp; _iCmdType &lt; COMMAND_END )\n    {\n        #ifdef DBG_DUMP_SVCLOG\n        if ( _iCmdType != COMMAND_WINDOW_HAS_FOCUS )\n        {\n            SDL_Log( \"ServiceCmd::RequestServiceCmd() _iCmdType=%d, sub=%d\\n\", _iCmdType, _iSubCmd );\n        }\n        #endif\n\n        Android_JNI_SendMessage( _iCmdType, _iSubCmd );\n\n        switch ( _iCmdType )\n        {\n        case COMMAND_WINDOW_HAS_FOCUS:   \n            ResetWindowFocusTimer(); \n            break;\n\n        case COMMAND_GOOGLEAPI_CONNECT:\n            m_iConnectErrorCode = INVALID_CONNECT_CODE;\n            break;\n\n        //========================\n        // admob video\n        case COMMAND_ADMOB_REQUEST_VIDEO:   \n            m_TimerVideo.Reset();\n            m_iVideoState = kAdMobVideo_Requested;\n            break;\n\n        case COMMAND_ADMOB_SHOW_VIDEO:  \n            m_HasVideoPlayedOnce = true;\n            m_TimerVideo.Reset();\n            m_TimerBanner.Reset();\n            break;\n\n        case COMMAND_ADMOB_HIDE_VIDEO:    \n            // can't really send a request to hide video  \n            break;\n\n        case COMMAND_ADMOB_DELETE_VIDEO:    \n            m_iVideoState = kAdMobVideo_Ready;\n            break;\n\n        //========================\n        // admob banner\n        case COMMAND_ADMOB_REQUEST_BANNER:  \n            m_iBannerState = kAdMobBanner_Requested;\n            m_TimerBanner.Reset();\n            break;\n\n        case COMMAND_ADMOB_SHOW_BANNER:\n            m_TimerBanner.Reset();\n            break;\n\n        case COMMAND_ADMOB_HIDE_BANNER:\n            break;\n\n        case COMMAND_ADMOB_DELETE_BANNER:     \n            break;\n\n        case COMMAND_LICENSE_QUERY:\n            m_bLicenseQueryMade = true;\n            m_bHasLicenseQueryResp = false;\n            m_iLicenseResp = -1;\n\n            m_TimerLicense.Reset();\n            break;\n        }\n    }\n    else \n    {\n        #ifdef DBG_DUMP_SVCLOG\n        SDL_Log( \"ServiceCmd::StartAd() unknown add type=%d\\n\", _iCmdType );\n        #endif\n    }\n}\n\n//=============================================================================\n//=============================================================================\nvoid ServiceCmd::SendUnlockAchievement(unsigned _idx)\n{\n    if ( _idx &lt; APP_SIZE_NUM_ACHIEVEMENTS )\n    {\n        RequestServiceCmd( COMMAND_ACHIEVEMENT_SUBMIT, _idx );\n    }\n}\n\n//=============================================================================\n//=============================================================================\nvoid ServiceCmd::SendLeaderboardUpdate(unsigned _idx, unsigned _uNumUnits)\n{\n    if ( _idx &lt; APP_SIZE_NUM_LEADERBOARD )\n    {\n        RequestServiceCmd( COMMAND_LEADERBOARD_SETTIME_BEG + _idx, (int)_uNumUnits );\n    }\n}</code></pre>\n<p>ServiceCmd.h</p>\n<pre><code class=\"lang-auto\">//=============================================================================\n// Copyright (c) 2015 LumakSoftware\n//=============================================================================\n#pragma once\n\n\n\nusing namespace Urho3D;\n\n//=============================================================================\n//=============================================================================\n#define INVALID_CONNECT_CODE    51123333 // arbitrary value\n\nenum APPJAVASERVICECOMMANDS\n{\n    // admob\n    COMMAND_ADMOB_REQUEST_VIDEO  = 4,\n    COMMAND_ADMOB_SHOW_VIDEO     = 5,\n    COMMAND_ADMOB_HIDE_VIDEO     = 6,\n    COMMAND_ADMOB_DELETE_VIDEO   = 7,\n\n    COMMAND_ADMOB_REQUEST_BANNER = 8,\n    COMMAND_ADMOB_SHOW_BANNER    = 9,\n    COMMAND_ADMOB_HIDE_BANNER    = 10,\n    COMMAND_ADMOB_DELETE_BANNER  = 11,\n\n    // Licensing\n    COMMAND_LICENSE_QUERY    = 12,\n    COMMAND_LICENSE_RETRY    = 13,\n    COMMAND_LICENSE_FAILED   = 14,\n\n    // GoogleApi\n    COMMAND_GOOGLEAPI_CONNECT     = 15,\n    COMMAND_GOOGLEAPI_ERROR       = 16,\n    COMMAND_GOOGLEAPI_DISCONNECT  = 17,\n\n    // achievement\n    COMMAND_ACHIEVEMENT_QUERY   = 18,\n    COMMAND_ACHIEVEMENT_SUBMIT  = 19,\n\n    // leaderboard\n    COMMAND_LEADERBOARD_QUERY      = 20,\n    COMMAND_LEADERBOARD_SUBMIT     = 21,\n\n    COMMAND_LEADERBOARD_SETTIME_BEG = COMMAND_LEADERBOARD_SUBMIT + 1,\n    COMMAND_LEADERBOARD_SETTIME_END = COMMAND_LEADERBOARD_SETTIME_BEG + 5,\n\n    // misc\n    COMMAND_WINDOW_HAS_FOCUS = 28,\n\n    // end of valid commands\n    COMMAND_END, \n\n    // response only, not a valid command to send\n    COMMAND_ADMOB_STATE_APP    = 1000,\n    COMMAND_ADMOB_STATE_VIDEO  = 1001,\n    COMMAND_ADMOB_STATE_BANNER = 1002,\n};\n\nenum APPSIZES\n{\n    APP_SIZE_NUM_ACHIEVEMENTS  = 9,\n    APP_SIZE_NUM_LEADERBOARD   = 6,\n};\n\nenum VIDEOSTATE\n{\n    kAdMobVideo_Stat_Loaded    = 0,\n    kAdMobVideo_Stat_Playing   = 1,\n    kAdMobVideo_Stat_Closed    = 2,\n    kAdMobVideo_Stat_Destroyed = 3,\n    kAdMobVideo_Stat_Error     = 4,\n\n    kAdMobVideo_Requested,\n    kAdMobVideo_Loaded,\n    kAdMobVideo_Ready,\n    kAdMobVideo_Playing,\n    kAdMobVideo_Done,\n};\n\nenum BANNERSTATE\n{\n    kAdMobBanner_Stat_Loaded    = 0,\n    kAdMobBanner_Stat_Visible   = 1,\n    kAdMobBanner_Stat_Hidden    = 2,\n    kAdMobBanner_Stat_Destroyed = 3,\n    kAdMobBanner_Stat_Error     = 4,\n\n    kAdMobBanner_NotLoaded,\n    kAdMobBanner_Requested,\n    kAdMobBanner_Ready,\n    kAdMobBanner_Visible,\n    kAdMobBanner_Hidden,\n    kAdMobBanner_Done,\n};\n\n//=============================================================================\n//=============================================================================\nclass ServiceCmd : public Object\n{\n    OBJECT(ServiceCmd);\npublic:\n\n    enum RESPTYPE{ kRespType_Invalid = -9999 };\n\n    static void Create(Context *_pContext)\n    {\n        if ( s_pCAdMob == NULL )\n        {\n            s_pCAdMob = new ServiceCmd( _pContext );\n        }\n    }\n\n    static void Destroy()\n    {\n        if ( s_pCAdMob )\n        {\n            delete s_pCAdMob;\n            s_pCAdMob = NULL;\n        }\n    }\n\n    static ServiceCmd&amp; Instance()\n    { \n        return *s_pCAdMob; \n    }\n\n    static void JavaActivityCallback(int _ival, int _istat, const char *_pstr, void *param);\n    void RequestServiceCmd(int _iAdType, int _iSubCmd=0);\n\n    // window focus\n    bool WindowHasFocus() const             { return m_bWindowHasFocus; }\n    void ResetWindowFocusTimer()            { m_TimerWindowFocus.Reset();  }\n    unsigned GetWindowFocusTimer()          { return m_TimerWindowFocus.GetMSec( false ); }\n\n    // connection\n    bool IsConnectedToGameServices() const      { return m_bGooglePlayConnected; }\n    const String&amp; GetGooglePlayUserName() const { return m_strGooglePlayUserName; }\n    const int GetConnectErrorCode() const       { return m_iConnectErrorCode; }\n    \n    // achievement and leaderboard\n    void SendUnlockAchievement(unsigned _idx);\n    void SendLeaderboardUpdate(unsigned _idx, unsigned _uNumUnits);\n\n    // admob\n    void SetAdInterval(Uint32 _uInterval)   { m_uAdInterval = _uInterval; }\n    void SetCmdTimeout(int _iMins)          { m_iCmdTimeout = _iMins; }\n    void ResetVideoTimer()                  { m_TimerVideo.Reset();  }\n    void ResetBannerTimer()                 { m_TimerBanner.Reset(); }\n    unsigned GetVideoElapsedTime()          { return m_TimerVideo.GetMSec( false ); }\n    unsigned GetBannerElapsedTime()         { return m_TimerBanner.GetMSec( false ); }\n\n    int  GetVideoState() const              { return m_iVideoState; }\n    int  GetBannerState() const             { return m_iBannerState; }\n    bool HasVideoPlayedOnce() const         { return m_HasVideoPlayedOnce; }\n    bool IsVideoHidden() const              { return m_bVideoHidden; }\n    bool IsBannerVisible() const            { return m_bBannerVisible; }\n    bool IsAppPaused() const                { return m_bAppIsPaused; }\n\n    // license\n    bool LicenseQueryMade() const           { return m_bLicenseQueryMade; }\n    void SetContinueLicenseQuery(bool _bset){ m_bContinueLicenseQuery = _bset; }\n    bool GetContinueLicenseQuery() const    { return m_bContinueLicenseQuery; }\n    bool IsLicenseValid() const             { return m_bHasValidLicense; }\n    bool IsLicenseRespReady() const         { return m_bHasLicenseQueryResp; }\n    int GetLicenseResp() const              { return m_iLicenseResp; }\n    int GetLicenseReason() const            { return m_iLicenseReason; }\n    void ResetLicenseTimer()                { m_TimerLicense.Reset(); }\n    unsigned GetLicenseQueryElapsedTime()   { return m_TimerLicense.GetMSec( false ); }\n\nprotected:\n    ServiceCmd(Context *_pContext);\n    ~ServiceCmd();\n\n    void ActivityCallback(int _ival, int _istat, const char *_pstr);\n    //void HandleUpdate(StringHash eventType, VariantMap&amp; eventData);\n\nprotected:\n    static ServiceCmd               *s_pCAdMob;\n\n    Timer                           m_TimerWindowFocus;\n    Timer                           m_TimerVideo;\n    Timer                           m_TimerBanner;\n    Timer                           m_TimerLicense;\n\n    // focus\n    bool                            m_bWindowHasFocus;\n\n    // googleplay connection\n    bool                            m_bGooglePlayConnected;\n    String                          m_strGooglePlayUserName;\n    int                             m_iConnectErrorCode;\n\n    // AdMob \n    bool                            m_bAdPlayedSinceStartup;\n\n    int                             m_iVideoState;\n    int                             m_iBannerState;\n    bool                            m_HasVideoPlayedOnce;\n    bool                            m_bVideoHidden;\n    bool                            m_bBannerVisible;\n\n    // licensing\n    bool                            m_bContinueLicenseQuery;\n    bool                            m_bLicenseQueryMade;\n    bool                            m_bHasValidLicense;\n    bool                            m_bHasLicenseQueryResp;\n    int                             m_iLicenseResp;\n    int                             m_iLicenseReason;\n\n    // misc\n    bool                            m_bAppIsPaused;\n    Uint32                          m_uAdInterval;\n    int                             m_iCmdTimeout;\n};\n\n//=============================================================================\n//=============================================================================\nextern \"C\"\n{\n//#ifndef pfnUserActivityCallback\ntypedef void (*pfnUserActivityCallback)(int _id, int _istat, const char *_str, void *param);\n//#endif\nvoid RegisterUserActivityCallback(pfnUserActivityCallback callback, void *param);\n\nint Android_JNI_SendMessage(int command, int param);\n\n}\n</code></pre>\n<p><span class=\"bbcode-b\">[size=150]6) Game side sample code[/size]</span><br>\nSample code</p>\n<pre><code class=\"lang-auto\">// somewhere in your startup\n     ServiceCmd::Create( GetContext() );\n\n// some where in your shutdown process\n    ServiceCmd::Destroy();\n\n// in your handleUpdate() func\nvoid GameMain::ProcessAdMob()\n{\n    // only play AdMob when game is not playing\n    if ( m_pGamePlayFeature == NULL )\n    {\n        // video state\n        switch ( ServiceCmd::Instance().GetVideoState() )\n        {\n        case kAdMobVideo_Ready:\n            if ( ServiceCmd::Instance().GetVideoElapsedTime() &gt; 12 * 60 * 1000 ) // 12 min wait\n            {\n                ServiceCmd::Instance().RequestServiceCmd( COMMAND_ADMOB_REQUEST_VIDEO );\n            }\n           break;\n\n        case kAdMobVideo_Requested:\n            if ( ServiceCmd::Instance().GetVideoElapsedTime() &gt; 20 * 1000 ) // 20 sec wait\n            {\n                ServiceCmd::Instance().RequestServiceCmd( COMMAND_ADMOB_REQUEST_VIDEO );\n            }\n            break;\n\n        case kAdMobVideo_Loaded:\n            ServiceCmd::Instance().RequestServiceCmd( COMMAND_ADMOB_SHOW_VIDEO );\n            break;\n\n        case kAdMobVideo_Playing:\n            // wait for it to go back to 'Ready'\n            break;\n        }\n    }\n}</code></pre>\n<p>And I\u2019ve run out of room for anything else.</p>", "post_number": 1, "post_type": 1, "updated_at": "2017-01-02T01:06:18.897Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 423, "reads": 69, "readers_count": 68, "score": 2194.8, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "https://github.com/okamstudio/godot/tree/master/platform/android/libs/play_licensing", "internal": false, "reflection": false, "clicks": 22}, {"url": "http://MyGame.so", "internal": false, "reflection": false, "clicks": 0}, {"url": "http://discourse.urho3d.io/t/game-dev-post-mortem-a-praise/1232/7", "internal": true, "reflection": true, "title": "Game dev post mortem (a praise)", "clicks": 0}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "count": 2}], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7073, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-08-05T21:33:15.000Z", "cooked": "<p>It might help if you had the correct permissions in your AndroidManifest.xml.</p>\n<pre><code class=\"lang-auto\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.mycompany.mygame\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\"&gt;\n\n    &lt;!-- Include required permissions for Google Mobile Ads to run--&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n    &lt;uses-permission android:name=\"com.android.vending.CHECK_LICENSE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;\n\n    &lt;application android:label=\"@string/app_name\"\n        android:icon=\"@drawable/icon\"\n        android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n        android:hardwareAccelerated=\"true\" &gt;\n        &lt;!--This meta-data tag is required to use Google Play Services.--&gt;\n        &lt;meta-data android:name=\"com.google.android.gms.games.APP_ID\" android:value=\"@string/app_id\"/&gt;\n        &lt;meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\"/&gt;\n        &lt;activity android:name=\".MyGame\"\n                  android:label=\"@string/app_name\"\n                  android:configChanges=\"keyboardHidden|orientation\"\n                  android:screenOrientation=\"landscape\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;!--Include the AdActivity configChanges and theme. --&gt;\n        &lt;activity android:name=\"com.google.android.gms.ads.AdActivity\"\n            android:configChanges=\"keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\"\n            android:theme=\"@android:style/Theme.Translucent\"/&gt;\n    &lt;/application&gt;\n\n    &lt;uses-sdk android:minSdkVersion=\"10\" android:targetSdkVersion=\"19\" /&gt;\n    &lt;uses-feature android:glEsVersion=\"0x00020000\" /&gt;\n\n&lt;/manifest&gt;</code></pre>", "post_number": 2, "post_type": 1, "updated_at": "2017-01-02T01:06:19.242Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 3, "reads": 51, "readers_count": 50, "score": 25.2, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7077, "name": "Yao Wei Tjong", "username": "weitjong", "avatar_template": "/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png", "created_at": "2015-08-06T01:22:30.000Z", "cooked": "<p>Thanks for sharing this. It would be great if you can also sight any references that you use. The provided shared lib loader logic is required when your app depends on other 3rd party libs in *.so format. You can build Urho3D lib as shared lib and depend on it in this way for example.</p>", "post_number": 3, "post_type": 1, "updated_at": "2017-01-02T01:06:19.509Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 44, "readers_count": 43, "score": 8.8, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "Yao Wei Tjong", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Admin", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": true, "staff": true, "user_id": 4, "hidden": false, "trust_level": 4, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7078, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-08-06T01:37:36.000Z", "cooked": "<p><span class=\"bbcode-b\">[size=150]Resources[/size]</span><br>\nSDL-2.0.3/android-project/src/org/libsdl/app/SDLActivity.java</p>\n<p>This is what they have:</p>\n<pre><code class=\"lang-auto\">    // Load the .so\n    static {\n        System.loadLibrary(\"SDL2\");\n        //System.loadLibrary(\"SDL2_image\");\n        //System.loadLibrary(\"SDL2_mixer\");\n        //System.loadLibrary(\"SDL2_net\");\n        //System.loadLibrary(\"SDL2_ttf\");\n        System.loadLibrary(\"main\");\n    }</code></pre>\n<p>Below links were the only ones that I had saved.  All others were searched on Google.</p>\n<p>GooglePlay:<br>\n<a href=\"https://developers.google.com/games/services/android/quickstart\" data-bbcode=\"true\">https://developers.google.com/games/services/android/quickstart</a><br>\n<a href=\"http://code.tutsplus.com/tutorials/google-play-game-services-leaderboards--cms-20700\" data-bbcode=\"true\">http://code.tutsplus.com/tutorials/google-play-game-services-leaderboards\u2013cms-20700</a><br>\n<a href=\"https://github.com/playgameservices/android-basic-samples\" data-bbcode=\"true\">https://github.com/playgameservices/android-basic-samples</a></p>\n<p>AdMob:<br>\n<a href=\"https://developers.google.com/ads/#apps\" data-bbcode=\"true\">https://developers.google.com/ads/#apps</a><br>\n<a href=\"https://developers.google.com/admob/android/quick-start\" data-bbcode=\"true\">https://developers.google.com/admob/android/quick-start</a><br>\n<a href=\"https://developers.google.com/admob/android/interstitial?hl=en\" data-bbcode=\"true\">https://developers.google.com/admob/android/interstitial?hl=en</a><br>\n<a href=\"https://github.com/googleads/googleads-mobile-android-examples\" data-bbcode=\"true\">https://github.com/googleads/googleads-mobile-android-examples</a></p>\n<p>AppLicensing:<br>\n<a href=\"http://developer.android.com/intl/ko/google/play/licensing/index.html\" data-bbcode=\"true\">http://developer.android.com/intl/ko/google/play/licensing/index.html</a><br>\n<a href=\"https://developer.android.com/intl/ko/google/play/licensing/setting-up.html\" data-bbcode=\"true\">https://developer.android.com/intl/ko/google/play/licensing/setting-up.html</a><br>\n<a href=\"https://github.com/okamstudio/godot/tree/master/platform/android/libs/play_licensing\" data-bbcode=\"true\">https://github.com/okamstudio/godot/tree/master/platform/android/libs/play_licensing</a></p>\n<p>and Google <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"> which will lead you to Stack Overflow.</p>\n<p>Edit: added a few more links.</p>", "post_number": 4, "post_type": 1, "updated_at": "2017-01-02T01:06:19.575Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 5, "reads": 45, "readers_count": 44, "score": 49.0, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "https://developers.google.com/games/services/android/quickstart", "internal": false, "reflection": false, "title": "Get Started with Play Games Services for Android \u00a0|\u00a0 Play Games Services for Android \u00a0|\u00a0 Google Developers", "clicks": 6}, {"url": "https://developers.google.com/ads/#apps", "internal": false, "reflection": false, "title": "Ads \u00a0|\u00a0 Google Developers", "clicks": 4}, {"url": "http://code.tutsplus.com/tutorials/google-play-game-services-leaderboards--cms-20700", "internal": false, "reflection": false, "clicks": 1}, {"url": "http://developer.android.com/intl/ko/google/play/licensing/index.html", "internal": false, "reflection": false, "title": "App Licensing | Android Developers", "clicks": 1}, {"url": "https://github.com/googleads/googleads-mobile-android-examples", "internal": false, "reflection": false, "title": "GitHub - googleads/googleads-mobile-android-examples: googleads-mobile-android", "clicks": 1}, {"url": "https://developers.google.com/admob/android/quick-start", "internal": false, "reflection": false, "title": "Get Started in Android Studio \u00a0|\u00a0 AdMob by Google \u00a0|\u00a0 Firebase", "clicks": 1}, {"url": "https://developers.google.com/admob/android/interstitial?hl=en", "internal": false, "reflection": false, "title": "Interstitial Ads \u00a0|\u00a0 AdMob by Google \u00a0|\u00a0 Firebase", "clicks": 1}, {"url": "https://github.com/playgameservices/android-basic-samples", "internal": false, "reflection": false, "title": "GitHub - playgameservices/android-basic-samples: Google Play game services - Android samples", "clicks": 0}, {"url": "https://developer.android.com/intl/ko/google/play/licensing/setting-up.html", "internal": false, "reflection": false, "title": "Setting Up for Licensing | Android Developers", "clicks": 0}, {"url": "https://github.com/okamstudio/godot/tree/master/platform/android/libs/play_licensing", "internal": false, "reflection": false, "clicks": 0}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "count": 1}], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7079, "name": "Yao Wei Tjong", "username": "weitjong", "avatar_template": "/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png", "created_at": "2015-08-06T01:50:48.000Z", "cooked": "<p>It\u2019s not important but I meant to say references for Google Play and the ads stuff if any.</p>\n<p>If we do the *.so loading explicitly then it needs to be rewritten for every app. The one being provided by Urho3D will auto detect all the *.so list and load them in an orderly fashion automatically. It may be overkill though for a single main *.so app. I am just supplementing the rationale of the provided shared lib logic. It is perfectly fine to replace it as you have done.</p>", "post_number": 5, "post_type": 1, "updated_at": "2017-01-02T01:06:19.694Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 37, "readers_count": 36, "score": 12.4, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "Yao Wei Tjong", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Admin", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": true, "staff": true, "user_id": 4, "hidden": false, "trust_level": 4, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7080, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-08-06T01:54:47.000Z", "cooked": "<p>They are there now.</p>", "post_number": 6, "post_type": 1, "updated_at": "2017-01-02T01:06:19.751Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 36, "readers_count": 35, "score": 7.2, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7081, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-08-06T02:03:43.000Z", "cooked": "<p>I\u2019m fully aware of how the shared object loader works and why it\u2019s there.  That\u2019s where I started learning about SDLAcitivity, and yes, it makes sense for that to be there if you\u2019re loading/testing multiple .so files.  But as you already noticed, I didn\u2019t need anything that intricate to load a single .so file.  <img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=5\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"></p>\n<p>Perhaps, one can declare their <a href=\"http://gamelib.so\">gamelib.so</a> in a string then do something like:</p>\n<pre><code class=\"lang-auto\">System.loadLibrary( getResources().getString( R.string.gameapp_lib ) );</code></pre>", "post_number": 7, "post_type": 1, "updated_at": "2017-01-02T01:06:19.810Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 36, "readers_count": 35, "score": 7.2, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "http://gamelib.so", "internal": false, "reflection": false, "clicks": 0}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7083, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-08-06T03:31:14.000Z", "cooked": "<p>weitjong,</p>\n<p>I\u2019m getting the impression that you think Urho3D.java code should be reused w/o any modifications in everyone\u2019s project.</p>\n<p>I don\u2019t know if you are aware of the importance of the <span class=\"bbcode-b\">package name</span>, i.e. com.mycompany.mygame, that you declare in the AndroidManifest.xml, build.gradle, and in your primary game Java code, but it must be unique for one reason:<br>\nwhen you release your game from Google Play Developer Console, the name has to be unique.  You can never load the same package name twice.  If you try, you\u2019ll get an error saying it\u2019s already in use.</p>\n<p>So, you can\u2019t expect everyone to have <span class=\"bbcode-b\">com.github.urho3d</span> in their Android game.  Nor can you create a single project folder and release multiple games from that same folder many times over.  Every project would have to have a unique package name in their Java code, in build.gradle (if using Android SDK), and in AndroidManifest.xml.</p>\n<p>If you already knew about this, then just ignore it.</p>", "post_number": 8, "post_type": 1, "updated_at": "2017-01-02T01:06:19.936Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 12, "reads": 35, "readers_count": 34, "score": 67.0, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7085, "name": "", "username": "rasteron", "avatar_template": "/user_avatar/discourse.urho3d.io/rasteron/{size}/55_2.png", "created_at": "2015-08-06T04:45:08.000Z", "cooked": "<p>Thanks for sharing this Lumak  <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"> cheers.</p>", "post_number": 9, "post_type": 1, "updated_at": "2017-01-02T01:06:20.065Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 36, "readers_count": 35, "score": 7.2, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 54, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7086, "name": "Yao Wei Tjong", "username": "weitjong", "avatar_template": "/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png", "created_at": "2015-08-06T05:24:12.000Z", "cooked": "<p>[quote=\u201cLumak\u201d]weitjong,</p>\n<p>I\u2019m getting the impression that you think Urho3D.java code should be reused w/o any modifications in everyone\u2019s project.</p>\n<p>I don\u2019t know if you are aware of the importance of the <span class=\"bbcode-b\">package name</span>, i.e. com.mycompany.mygame, that you declare in the AndroidManifest.xml, build.gradle, and in your primary game Java code, but it must be unique for one reason:<br>\nwhen you release your game from Google Play Developer Console, the name has to be unique.  You can never load the same package name twice.  If you try, you\u2019ll get an error saying it\u2019s already in use.</p>\n<p>So, you can\u2019t expect everyone to have <span class=\"bbcode-b\">com.github.urho3d</span> in their Android game.  Nor can you create a single project folder and release multiple games from that same folder many times over.  Every project would have to have a unique package name in their Java code, in build.gradle (if using Android SDK), and in AndroidManifest.xml.</p>\n<p>If you already knew about this, then just ignore it.[/quote]<br>\nYes, I am aware of that. The logic I mentioned in my previous posts come from the Urho3D modified version of SDLActivity Java class in org.libsdl.app package, which can be reused by other external projects. The Urho3D Java class which extends from the modified SDLActivity class is of course not reusable.</p>", "post_number": 10, "post_type": 1, "updated_at": "2017-01-02T01:06:20.136Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 1, "incoming_link_count": 2, "reads": 40, "readers_count": 39, "score": 18.0, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "Yao Wei Tjong", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Admin", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": true, "staff": true, "user_id": 4, "hidden": false, "trust_level": 4, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7087, "name": "", "username": "Mike", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png", "created_at": "2015-08-06T05:42:36.000Z", "cooked": "<p>Thanks for detailed instructions Lumak <img src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=5\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\"></p>", "post_number": 11, "post_type": 1, "updated_at": "2017-01-02T01:06:20.215Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 2, "reads": 40, "readers_count": 39, "score": 18.0, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Contributor", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": true, "admin": false, "staff": true, "user_id": 9, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7113, "name": "", "username": "sabotage3d", "avatar_template": "/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png", "created_at": "2015-08-08T12:22:01.000Z", "cooked": "<p>Thanks for the in depth instructions <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"><br>\nAny chance for IOS one ?</p>", "post_number": 12, "post_type": 1, "updated_at": "2017-01-02T01:06:22.137Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 41, "readers_count": 40, "score": 8.2, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 151, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7141, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-08-10T23:20:33.000Z", "cooked": "<p>[quote]posted by sabotage3d ? 08 Aug 2015, 04:22<br>\nThanks for the in depth instructions <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"><br>\nAny chance for IOS one ?[/quote]</p>\n<p>I haven\u2019t started working on iOS yet.  I\u2019ll post it if I do it.</p>", "post_number": 13, "post_type": 1, "updated_at": "2017-01-02T01:06:24.200Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 41, "readers_count": 40, "score": 13.2, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7789, "name": "", "username": "Deveiss", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/ecc23a/{size}.png", "created_at": "2015-09-13T23:28:28.000Z", "cooked": "<p>Do you have a complete example implementation? That would be really helpful to study, as right now I\u2019m a bit confused on how to make this all come together. I\u2019m unclear on where to define the JNI callbacks, and what else I\u2019d have to include or link against to compile them. Additionally, how would I add Godot\u2019s Play Services library as a dependency for the ant build process?</p>", "post_number": 14, "post_type": 1, "updated_at": "2017-01-02T01:07:11.107Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 40, "readers_count": 39, "score": 8.0, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 312, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7816, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-09-14T15:43:53.000Z", "cooked": "<p>Hi Deveiss,</p>\n<p>I sent you a reply to your email but I\u2019ll also post it here.</p>\n<p>//=================================================================================================<br>\nWhat I did was added the functions to \\ThirdParty\\SDL\\src\\main\\android\\SDL_android_main.c file<br>\nright below  void Java_org_libsdl_app_SDLActivity_nativeInit(JNIEnv* env, jclass cls, jstring filesDir)  function, and I can\u2019t remember why I chose that file instead of SDL_android.c.<br>\nBelow is everything I have in that file below the Java_org_libsdl_app_SDLActivity_nativeInit() function.  Copy that into the file and you should be good to go.</p>\n<p>There is no additional library that you need to get Google Play, i.e. Leaderboard and Achievement,or AdMob working. CMake files that I used was Urho\u2019s cmake_android w/o any modification.  I think I mentioned linking a library Android Studio in my thread. I can\u2019t remember the library name but you also don\u2019t need that. Only time you would need it is for licensing (or testing licensing feature), and is not part of Google Play, leaderboard, achievement, or AdMob. Remove that library if you have it linked in and also remove the line<br>\n<br>\nfrom AndroidManisfest.xml, along with section of Java code related to licensing - just comment of sections that give you error.</p>\n<p>I hope this helps.</p>\n<p>// code to copy</p>\n<pre><code class=\"lang-auto\">int Android_JNI_SendMessageStr(int command, const char *param)\n{\n    JNIEnv *mEnv = Android_JNI_GetEnv();\n    if (!mEnv) {\n        return -1;\n    }\n    jclass cActivity = Android_JNI_GetActivityClass();\n\n    jmethodID mid = (*mEnv)-&gt;GetStaticMethodID(mEnv, cActivity, \"sendMessageStr\", \"(ILjava/lang/String;)Z\");\n    if (!mid) {\n        return -1;\n    }\n\n    jstring jparam = (jstring)((*mEnv)-&gt;NewStringUTF(mEnv, param));\n    jboolean success = (*mEnv)-&gt;CallStaticBooleanMethod(mEnv, cActivity, mid, command, jparam);\n    (*mEnv)-&gt;DeleteLocalRef(mEnv, jparam);\n\n    return success ? 0 : -1;\n}\n\n//#include &lt;SDL/SDL_events.h&gt;\n\ntypedef void (*pfnUserActivityCallback)(int id1, int istat, const char *str, void *param);\n\nstatic pfnUserActivityCallback gpUserActivityCallback = NULL;\nstatic void *gActivityCallbackParam = NULL;\n\nvoid RegisterUserActivityCallback(pfnUserActivityCallback callback, void *param)\n{\n    gpUserActivityCallback = callback;\n    gActivityCallbackParam = param;\n}\n\nvoid Java_org_libsdl_app_SDLActivity_nativeUserActivityCallback(JNIEnv* env, jclass cls, jint id1, jint istat, jstring jstrParam)\n{\n    const char *str = (*env)-&gt;GetStringUTFChars(env, jstrParam, 0);\n\n    if ( gpUserActivityCallback )\n    {\n        (*gpUserActivityCallback)( id1, istat, str, gActivityCallbackParam );\n    }\n\n    if ( str )\n    {\n        (*env)-&gt;ReleaseStringUTFChars(env, jstrParam, str);\n    }\n}</code></pre>", "post_number": 15, "post_type": 1, "updated_at": "2017-01-02T01:07:12.954Z", "reply_count": 1, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 6, "reads": 42, "readers_count": 41, "score": 43.4, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 15913, "name": "tobias alarcon", "username": "extobias", "avatar_template": "/user_avatar/discourse.urho3d.io/extobias/{size}/2836_2.png", "created_at": "2017-01-31T17:56:52.739Z", "cooked": "<p>Hi there!<br>\nFirst, sorry about my english. isn\u2019t my native language<br>\nI\u2019ve found that COMMAND_ADMOB_SHOW_VIDEO = 5  in ServiceCmd.h<br>\ntakes the same value that COMMAND_SET_KEEP_SCREEN_ON = 5 in SDLActivity.java<br>\nSo SDLCommandHandler go in the wrong case when show video is requested.<br>\nI\u2019ve change the enum in ServiceCmd.h, but i don\u2019t know if that is correct.<br>\nThanks anyway for sharing this!<br>\ncheers!</p>", "post_number": 16, "post_type": 1, "updated_at": "2017-01-31T17:56:52.739Z", "reply_count": 1, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 2, "reads": 40, "readers_count": 39, "score": 23.0, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "tobias alarcon", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 653, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 15920, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2017-02-01T22:46:36.457Z", "cooked": "<p>At the time this was written, Urho3D was on 1.4 and the messages were declared as:</p>\n<blockquote>\n<pre><code>// Messages from the SDLMain thread\nstatic final int COMMAND_CHANGE_TITLE = 1;\nstatic final int COMMAND_UNUSED = 2;\nstatic final int COMMAND_TEXTEDIT_HIDE = 3;\n</code></pre>\n</blockquote>\n<p>and now in 1.6:</p>\n<blockquote>\n<pre><code>// Messages from the SDLMain thread\nstatic final int COMMAND_CHANGE_TITLE = 1;\nstatic final int COMMAND_UNUSED = 2;\nstatic final int COMMAND_TEXTEDIT_HIDE = 3;\nstatic final int COMMAND_SET_KEEP_SCREEN_ON = 5;\n</code></pre>\n</blockquote>\n<p>So you are correct to change the values is in ServiceCmd.h.</p>", "post_number": 17, "post_type": 1, "updated_at": "2017-02-01T22:46:36.457Z", "reply_count": 1, "reply_to_post_number": 16, "quote_count": 0, "incoming_link_count": 2, "reads": 42, "readers_count": 41, "score": 23.4, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "extobias", "name": "tobias alarcon", "avatar_template": "/user_avatar/discourse.urho3d.io/extobias/{size}/2836_2.png"}, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 17887, "name": "", "username": "vivienneanthony", "avatar_template": "/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png", "created_at": "2017-05-16T19:38:24.537Z", "cooked": "<p>Hey</p>\n<p>I\u2019m trying to get some code to work. I\u2019m at a lost. It does the OnProcessCommand() but the actual message sent to the Java side is not sent. Maybe someone has a idea???</p>\n<p>Vivienne</p>\n<pre><code>#include &lt;jni.h&gt;\n\n\n#include &lt;Urho3D/Urho3D.h&gt;\n#include &lt;Urho3D/Core/CoreEvents.h&gt;\n#include &lt;Urho3D/Core/Context.h&gt;\n#include &lt;Urho3D/Engine/Engine.h&gt;\n#include &lt;Urho3D/Input/InputEvents.h&gt;\n#include &lt;Urho3D/Scene/Scene.h&gt;\n#include &lt;Urho3D/Core/Timer.h&gt;\n\n#include \"ServicesInterface_Admob.h\"\n\n#include &lt;Urho3D/DebugNew.h&gt;\n\n#include &lt;CornersStd.h&gt;\n#include &lt;Urho3D/ThirdParty/SDL/SDL_system.h&gt;\n\n//=============================================================================\n//=============================================================================\n\ntypedef void (*pfnUserActivityCallback)(int id1, int istat, const char *str, void *param);\n\nstatic pfnUserActivityCallback gpUserActivityCallback = NULL;\nstatic void *gActivityCallbackParam = NULL;\n\nstatic JavaVM *java_vm;\nstatic jclass activityClass = NULL;\nstatic JNIEnv *jenv = NULL;\n\nvoid RegisterUserActivityCallback(pfnUserActivityCallback callback, void *param) {\n    gpUserActivityCallback = callback;\n    gActivityCallbackParam = param;\n}\n\n\n// This is here but can only be set once so need to update\n// Maybe make this generic where command can be either both services\n// Hmmm\n\n\nint Android_JNI_SendMessage(int command, int param) {\n\n    ALPHAENGINE_LOGINFO(\"Android_JNI_SENDMESSAGE\");\n\n\n    return 0;\n\n}\n\n//=============================================================================\n//=============================================================================\nServicesInterface_Admob *ServicesInterface_Admob::s_pCAdMob = NULL;\n\n//=============================================================================\n//=============================================================================\nServicesInterface_Admob::ServicesInterface_Admob(Context *_pcontext)\n        : Object(_pcontext) {\n    // init\n    m_TimerWindowFocus.Reset();\n    m_TimerVideo.Reset();\n    m_TimerBanner.Reset();\n    m_TimerLicense.Reset();\n\n    // focus\n    m_bWindowHasFocus = true;\n\n    // admob\n    m_uAdInterval = 2 * 60 * 1000; // 2 mins\n    m_iCmdTimeout = 5;\n    m_bAdPlayedSinceStartup = false;\n\n    m_iVideoState = kAdMobVideo_Ready;\n    m_iBannerState = kAdMobBanner_NotLoaded;\n    m_HasVideoPlayedOnce = false;\n    m_bAppIsPaused = false;\n\n\n    // register java callback\n    RegisterUserActivityCallback(&amp;ServicesInterface_Admob::JavaActivityCallback, this);\n}\n\n//=============================================================================\n//=============================================================================\nServicesInterface_Admob::~ServicesInterface_Admob() {\n    RegisterUserActivityCallback(NULL, NULL);\n}\n\n//=============================================================================\n//=============================================================================\nvoid ServicesInterface_Admob::JavaActivityCallback(int _ival, int _istat, const char *_pstr,\n                                                   void *param) {\n    if (param) {\n        ((ServicesInterface_Admob *) param)-&gt;ActivityCallback(_ival, _istat, _pstr);\n    }\n}\n\n//=============================================================================\n//=============================================================================\nvoid ServicesInterface_Admob::ActivityCallback(int _icmd, int _istat, const char *_pstr) {\n#ifdef DBG_DUMP_SVCLOG\n    if ( _icmd != COMMAND_WINDOW_HAS_FOCUS )\n    {\n        SDL_Log(\"ServicesInterface_Admob::ActivityCallback() icmd=%d, istat=%d, pstr='%s'\\n\", _icmd, _istat, _pstr?_pstr:\" \");\n    }\n#endif\n\n    switch (_icmd) {\n        case COMMAND_ADMOB_STATE_VIDEO:\n            switch (_istat) {\n                case kAdMobVideo_Stat_Loaded:\n                    m_iVideoState = kAdMobVideo_Loaded;\n                    break;\n                case kAdMobVideo_Stat_Playing:\n                    m_iVideoState = kAdMobVideo_Playing;\n                    break;\n                case kAdMobVideo_Stat_Closed:\n                    m_iVideoState = kAdMobVideo_Ready;\n                    ResetVideoTimer();\n                    break;\n                case kAdMobVideo_Stat_Destroyed:\n                    m_iVideoState = kAdMobVideo_Ready;\n                    break;\n                default:\n                    // failed to load error - retry\n                    ResetVideoTimer();\n                    break;\n            }\n            break;\n\n        case COMMAND_ADMOB_STATE_BANNER:\n            switch (_istat) {\n                case kAdMobBanner_Stat_Loaded:\n                    if (m_iBannerState == kAdMobBanner_NotLoaded ||\n                        m_iBannerState == kAdMobBanner_Requested) {\n                        m_iBannerState = kAdMobBanner_Ready;\n                    }\n                        // AdMob banner continuously loads new banners in the background, and any subsequent calls will automatically show itself\n                        // -- prevent it from being visible if not in the visible state\n                    else if (m_iBannerState != kAdMobBanner_Visible) {\n                        RequestServiceCmd(COMMAND_ADMOB_HIDE_BANNER);\n                    }\n                    break;\n                case kAdMobBanner_Stat_Visible:\n                    m_iBannerState = kAdMobBanner_Visible;\n                    break;\n                case kAdMobBanner_Stat_Hidden:\n                    m_iBannerState = kAdMobBanner_Hidden;\n                    break;\n                case kAdMobBanner_Stat_Destroyed:\n                    m_iBannerState = kAdMobBanner_NotLoaded;\n                    break;\n                default:\n                    // failed to load error - retry\n                    ResetBannerTimer();\n                    break;\n            }\n            break;\n\n\n        case COMMAND_WINDOW_HAS_FOCUS:\n            m_bWindowHasFocus = _istat ? true : false;\n            break;\n\n    }\n}\n\n\n//=============================================================================\n//=============================================================================\nvoid ServicesInterface_Admob::RequestServiceCmd(int _iCmdType, int _iSubCmd) {\n    if (_iCmdType &gt;= COMMAND_ADMOB_REQUEST_VIDEO &amp;&amp; _iCmdType &lt; COMMAND_END) {\n#ifdef DBG_DUMP_SVCLOG\n        if ( _iCmdType != COMMAND_WINDOW_HAS_FOCUS )\n        {\n            SDL_Log( \"ServicesInterface_Admob::RequestServiceCmd() _iCmdType=%d, sub=%d\\n\", _iCmdType, _iSubCmd );\n        }\n#endif\n\n        Android_JNI_SendMessage(_iCmdType, _iSubCmd);\n\n        switch (_iCmdType) {\n            case COMMAND_WINDOW_HAS_FOCUS:\n                ResetWindowFocusTimer();\n                break;\n\n\n                //========================\n                // admob video\n            case COMMAND_ADMOB_REQUEST_VIDEO:\n                m_TimerVideo.Reset();\n                m_iVideoState = kAdMobVideo_Requested;\n                break;\n\n            case COMMAND_ADMOB_SHOW_VIDEO:\n                m_HasVideoPlayedOnce = true;\n                m_TimerVideo.Reset();\n                m_TimerBanner.Reset();\n                break;\n\n            case COMMAND_ADMOB_HIDE_VIDEO:\n                // can't really send a request to hide video\n                break;\n\n            case COMMAND_ADMOB_DELETE_VIDEO:\n                m_iVideoState = kAdMobVideo_Ready;\n                break;\n\n                //========================\n                // admob banner\n            case COMMAND_ADMOB_REQUEST_BANNER:\n                m_iBannerState = kAdMobBanner_Requested;\n                m_TimerBanner.Reset();\n                break;\n\n            case COMMAND_ADMOB_SHOW_BANNER:\n                m_TimerBanner.Reset();\n                break;\n\n            case COMMAND_ADMOB_HIDE_BANNER:\n                break;\n\n            case COMMAND_ADMOB_DELETE_BANNER:\n                break;\n        }\n    } else {\n#ifdef DBG_DUMP_SVCLOG\n        SDL_Log( \"ServicesInterface_Admob::StartAd() unknown add type=%d\\n\", _iCmdType );\n#endif\n    }\n}\n\n// JNI EXPORT BRIDGE\n\nextern \"C\" {\n\nJNIEXPORT void JNICALL\nJava_org_libsdl_app_SDLActivity_nativeUserActivityCallback(JNIEnv *env, jclass cls,\n                                                           jint id1,\n                                                           jint istat, jstring jstrParam) {\n    const char *str = env-&gt;GetStringUTFChars(jstrParam, 0);\n    if (gpUserActivityCallback) {\n        (*gpUserActivityCallback)(id1, istat, str, gActivityCallbackParam);\n    }\n\n    if (str != NULL) {\n        // If used show output string\n        String s = String(str);\n        ALPHAENGINE_LOGINFO(\"Java_org_libsdl_app_SDLActivity_nativeUserActivityCallback():\" + s);\n\n        env-&gt;ReleaseStringUTFChars(jstrParam, str);\n    }\n}\n\n}}</code></pre>", "post_number": 18, "post_type": 1, "updated_at": "2017-05-16T20:36:10.502Z", "reply_count": 0, "reply_to_post_number": 17, "quote_count": 0, "incoming_link_count": 0, "reads": 37, "readers_count": 36, "score": 7.4, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 2, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "Lumak", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png"}, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 88, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 17888, "name": "", "username": "vivienneanthony", "avatar_template": "/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png", "created_at": "2017-05-16T19:41:48.507Z", "cooked": "<p>This is the androidmanifest.xml</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"protocolseven\"\n          android:versionCode=\"1\"\n          android:versionName=\"1.0\"\n          android:installLocation=\"auto\"&gt;\n\n    &lt;!-- Android 2.3.3 --&gt;\n    &lt;uses-sdk\n        android:minSdkVersion=\"14\"\n        android:targetSdkVersion=\"21\"/&gt;\n\n    &lt;!-- OpenGL ES 2.0 --&gt;\n    &lt;uses-feature android:glEsVersion=\"0x00020000\"/&gt;\n\n    &lt;!-- Allow writing to external storage --&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n\n\n    &lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;\n\n    &lt;!-- Google Play filtering --&gt;\n    &lt;uses-feature android:name=\"android.hardware.wifi.direct\" android:required=\"true\"/&gt;\n\n    &lt;application\n        android:label=\"@string/app_name\"\n        android:icon=\"@drawable/icon\"\n        android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n\n        android:allowBackup=\"false\"&gt;\n        &lt;activity android:name=\".Corners\"\n            android:screenOrientation=\"portrait\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n\n\n\n&lt;/manifest&gt;</code></pre>", "post_number": 19, "post_type": 1, "updated_at": "2017-05-16T19:41:48.507Z", "reply_count": 1, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 7, "reads": 36, "readers_count": 35, "score": 47.2, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 88, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 17901, "name": "tobias alarcon", "username": "extobias", "avatar_template": "/user_avatar/discourse.urho3d.io/extobias/{size}/2836_2.png", "created_at": "2017-05-17T16:05:47.813Z", "cooked": "<p>Hi there, have you added the code on SDL side as Lumak has posted?</p>\n<aside class=\"quote no-group\" data-username=\"Lumak\" data-post=\"15\" data-topic=\"1238\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"20\" height=\"20\" src=\"https://avatars.discourse-cdn.com/v4/letter/l/8491ac/40.png\" class=\"avatar\"> Lumak:</div>\n<blockquote>\n<p>\\ThirdParty\\SDL\\src\\main\\android\\SDL_android_main.c</p>\n</blockquote>\n</aside>", "post_number": 20, "post_type": 1, "updated_at": "2017-05-17T16:05:47.813Z", "reply_count": 1, "reply_to_post_number": 19, "quote_count": 1, "incoming_link_count": 4, "reads": 32, "readers_count": 31, "score": 31.4, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "tobias alarcon", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "vivienneanthony", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png"}, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 653, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 17902, "name": "", "username": "vivienneanthony", "avatar_template": "/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png", "created_at": "2017-05-17T16:47:46.193Z", "cooked": "<p>I did. Its working. The issue i have the first ad with the adview load and show doesnt work off the bat. Subsequent test ads show. So i have to debug and two peculiar errors with that.</p>\n<p>Also it seems order was important in the code itself.</p>", "post_number": 21, "post_type": 1, "updated_at": "2017-05-17T16:47:46.193Z", "reply_count": 0, "reply_to_post_number": 20, "quote_count": 0, "incoming_link_count": 1, "reads": 32, "readers_count": 31, "score": 11.4, "yours": false, "topic_id": 1238, "topic_slug": "android-googleplay-admob-and-licensing-code", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "extobias", "name": "tobias alarcon", "avatar_template": "/user_avatar/discourse.urho3d.io/extobias/{size}/2836_2.png"}, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 88, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}], "stream": [7070, 7073, 7077, 7078, 7079, 7080, 7081, 7083, 7085, 7086, 7087, 7113, 7141, 7789, 7816, 15913, 15920, 17887, 17888, 17901, 17902]}, "timeline_lookup": [[1, 2666], [12, 2664], [13, 2661], [14, 2627], [16, 2121], [17, 2120], [18, 2016]], "tags_descriptions": {}, "id": 1238, "title": "Android GooglePlay, AdMob, and Licensing code", "fancy_title": "Android GooglePlay, AdMob, and Licensing code", "posts_count": 21, "created_at": "2015-08-05T20:51:56.000Z", "views": 3001, "reply_count": 4, "like_count": 3, "last_posted_at": "2017-05-17T16:47:46.193Z", "visible": true, "closed": false, "archived": false, "has_summary": false, "archetype": "regular", "slug": "android-googleplay-admob-and-licensing-code", "category_id": 13, "word_count": 6645, "deleted_at": null, "user_id": 256, "featured_link": null, "pinned_globally": false, "pinned_at": null, "pinned_until": null, "image_url": null, "slow_mode_seconds": 0, "draft": null, "draft_key": "topic_1238", "draft_sequence": null, "unpinned": null, "pinned": false, "current_post_number": 1, "highest_post_number": 21, "deleted_by": null, "actions_summary": [{"id": 4, "count": 0, "hidden": false, "can_act": false}, {"id": 8, "count": 0, "hidden": false, "can_act": false}, {"id": 7, "count": 0, "hidden": false, "can_act": false}], "chunk_size": 20, "bookmarked": false, "bookmarks": [], "topic_timer": null, "message_bus_last_id": 0, "participant_count": 8, "show_read_indicator": false, "thumbnails": null, "slow_mode_enabled_until": null, "tags_disable_ads": false, "details": {"can_edit": false, "notification_level": 1, "participants": [{"id": 256, "username": "Lumak", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "post_count": 9, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 88, "username": "vivienneanthony", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png", "post_count": 3, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 4, "username": "weitjong", "name": "Yao Wei Tjong", "avatar_template": "/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png", "post_count": 3, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "admin": true, "trust_level": 4}, {"id": 653, "username": "extobias", "name": "tobias alarcon", "avatar_template": "/user_avatar/discourse.urho3d.io/extobias/{size}/2836_2.png", "post_count": 2, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 151, "username": "sabotage3d", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 54, "username": "rasteron", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/rasteron/{size}/55_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 312, "username": "Deveiss", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/d/ecc23a/{size}.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 1}, {"id": 9, "username": "Mike", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "moderator": true, "trust_level": 2}], "created_by": {"id": 256, "username": "Lumak", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png"}, "last_poster": {"id": 88, "username": "vivienneanthony", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png"}, "links": [{"url": "https://github.com/okamstudio/godot/tree/master/platform/android/libs/play_licensing", "title": null, "internal": false, "attachment": false, "reflection": false, "clicks": 22, "user_id": 256, "domain": "github.com", "root_domain": "github.com"}, {"url": "https://developers.google.com/games/services/android/quickstart", "title": "Get Started with Play Games Services for Android \u00a0|\u00a0 Play Games Services for Android \u00a0|\u00a0 Google Developers", "internal": false, "attachment": false, "reflection": false, "clicks": 6, "user_id": 256, "domain": "developers.google.com", "root_domain": "google.com"}, {"url": "https://developers.google.com/ads/#apps", "title": "Ads \u00a0|\u00a0 Google Developers", "internal": false, "attachment": false, "reflection": false, "clicks": 4, "user_id": 256, "domain": "developers.google.com", "root_domain": "google.com"}, {"url": "https://developers.google.com/admob/android/quick-start", "title": "Get Started in Android Studio \u00a0|\u00a0 AdMob by Google \u00a0|\u00a0 Firebase", "internal": false, "attachment": false, "reflection": false, "clicks": 1, "user_id": 256, "domain": "developers.google.com", "root_domain": "google.com"}, {"url": "http://code.tutsplus.com/tutorials/google-play-game-services-leaderboards--cms-20700", "title": null, "internal": false, "attachment": false, "reflection": false, "clicks": 1, "user_id": 256, "domain": "code.tutsplus.com", "root_domain": "tutsplus.com"}, {"url": "https://developers.google.com/admob/android/interstitial?hl=en", "title": "Interstitial Ads \u00a0|\u00a0 AdMob by Google \u00a0|\u00a0 Firebase", "internal": false, "attachment": false, "reflection": false, "clicks": 1, "user_id": 256, "domain": "developers.google.com", "root_domain": "google.com"}, {"url": "https://github.com/googleads/googleads-mobile-android-examples", "title": "GitHub - googleads/googleads-mobile-android-examples: googleads-mobile-android", "internal": false, "attachment": false, "reflection": false, "clicks": 1, "user_id": 256, "domain": "github.com", "root_domain": "github.com"}, {"url": "http://developer.android.com/intl/ko/google/play/licensing/index.html", "title": "App Licensing | Android Developers", "internal": false, "attachment": false, "reflection": false, "clicks": 1, "user_id": 256, "domain": "developer.android.com", "root_domain": "android.com"}]}, "suggested_topics": [{"id": 7099, "title": ":fallen_leaf: Polynomials & Harmonics", "fancy_title": ":fallen_leaf: Polynomials &amp; Harmonics", "slug": "polynomials-harmonics", "posts_count": 6, "reply_count": 0, "highest_post_number": 7, "image_url": null, "created_at": "2021-12-13T05:06:04.641Z", "last_posted_at": "2021-12-27T23:27:39.489Z", "bumped": true, "bumped_at": "2021-12-27T23:27:39.489Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "unicode_title": "\ud83c\udf42 Polynomials & Harmonics", "tags_descriptions": {}, "like_count": 6, "views": 392, "category_id": 13, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": "latest single", "description": "Original Poster, Most Recent Poster", "user": {"id": 192, "username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]}, {"id": 7103, "title": ":test_tube: DebugRenderer as GUI", "fancy_title": ":test_tube: DebugRenderer as GUI", "slug": "debugrenderer-as-gui", "posts_count": 4, "reply_count": 1, "highest_post_number": 4, "image_url": null, "created_at": "2021-12-17T02:25:06.606Z", "last_posted_at": "2021-12-18T01:09:27.738Z", "bumped": true, "bumped_at": "2021-12-18T01:09:27.738Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "unicode_title": "\ud83e\uddea DebugRenderer as GUI", "tags_descriptions": {}, "like_count": 4, "views": 267, "category_id": 13, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": "latest", "description": "Original Poster, Most Recent Poster", "user": {"id": 192, "username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}, {"extras": null, "description": "Frequent Poster", "user": {"id": 861, "username": "GodMan", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]}, {"id": 7110, "title": "Resource fetch define", "fancy_title": "Resource fetch define", "slug": "resource-fetch-define", "posts_count": 2, "reply_count": 0, "highest_post_number": 2, "image_url": null, "created_at": "2021-12-27T12:28:55.126Z", "last_posted_at": "2021-12-27T17:00:37.699Z", "bumped": true, "bumped_at": "2021-12-27T17:00:37.699Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "tags_descriptions": {}, "like_count": 7, "views": 184, "category_id": 13, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": null, "description": "Original Poster", "user": {"id": 192, "username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}, {"extras": "latest", "description": "Most Recent Poster", "user": {"id": 1304, "username": "lebrewer", "name": "lebrewer", "avatar_template": "/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]}, {"id": 7120, "title": "Log Error Once Macro", "fancy_title": "Log Error Once Macro", "slug": "log-error-once-macro", "posts_count": 1, "reply_count": 0, "highest_post_number": 1, "image_url": null, "created_at": "2022-01-04T02:24:37.857Z", "last_posted_at": "2022-01-04T02:24:37.925Z", "bumped": true, "bumped_at": "2022-01-04T02:24:37.925Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "tags_descriptions": {}, "like_count": 3, "views": 143, "category_id": 13, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": "latest single", "description": "Original Poster, Most Recent Poster", "user": {"id": 628, "username": "SirNate0", "name": "SirNate0", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]}, {"id": 7297, "title": "GetDrawables() can only return 1 result", "fancy_title": "GetDrawables() can only return 1 result", "slug": "getdrawables-can-only-return-1-result", "posts_count": 9, "reply_count": 6, "highest_post_number": 9, "image_url": null, "created_at": "2022-07-18T19:01:06.052Z", "last_posted_at": "2022-07-20T05:17:38.044Z", "bumped": true, "bumped_at": "2022-07-20T05:17:38.044Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "tags_descriptions": {}, "like_count": 0, "views": 143, "category_id": 10, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": null, "description": "Original Poster", "user": {"id": 1528, "username": "cqrtxwd", "name": "QR C", "avatar_template": "/user_avatar/discourse.urho3d.io/cqrtxwd/{size}/3814_2.png"}}, {"extras": null, "description": "Frequent Poster", "user": {"id": 484, "username": "Eugene", "name": "Eugene Kozlov", "avatar_template": "/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}}, {"extras": null, "description": "Frequent Poster", "user": {"id": 628, "username": "SirNate0", "name": "SirNate0", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}, {"extras": "latest", "description": "Most Recent Poster", "user": {"id": 1358, "username": "JSandusky", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/jsandusky/{size}/3220_2.png"}}]}]}