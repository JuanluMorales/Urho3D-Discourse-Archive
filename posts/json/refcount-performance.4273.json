{"post_stream":{"posts":[{"id":24680,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2018-05-31T10:46:05.478Z","cooked":"\u003cp\u003eI have some thoughts on how reference counting is implemented.\u003c/p\u003e\n\u003cp\u003eAs of now, for every object in Urho3D that inherits from \u003ccode\u003eRefCounted\u003c/code\u003e (so nearly everything in the engine and most of the stuff in a user’s application) there will be two calls to malloc. One to allocate the object and another for allocating the \u003ccode\u003eRefCount\u003c/code\u003e object: \u003ca href=\"https://github.com/urho3d/Urho3D/blob/master/Source/Urho3D/Container/RefCounted.cpp#L33\" rel=\"nofollow noopener\"\u003ehttps://github.com/urho3d/Urho3D/blob/master/Source/Urho3D/Container/RefCounted.cpp#L33\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe question here is: Is calling malloc twice having any impact on performance? Or are there other things that outweigh the cost of allocating?\u003c/p\u003e\n\u003cp\u003eIf this is a concern, then I have two ideas. The first is to inline \u003ccode\u003erefs_\u003c/code\u003e and \u003ccode\u003eweakRefs_\u003c/code\u003e into RefCounted and get rid of \u003ccode\u003eRefCount\u003c/code\u003e entirely. In order for weakrefs to still work, the conditions for when the object is destructed and freed would have to be modified: Call the destructor when \u003ccode\u003erefs_\u003c/code\u003e reaches zero, free the memory when \u003ccode\u003eweakRefs_\u003c/code\u003e reaches zero. This has the advantage of only having a single malloc call and the refcounts are located close to the object itself which makes the cache more coherent. The disadvantage is the additional delete logic, having to overload operator new, and the object remains allocated as long as there are weak references pointing to it.\u003c/p\u003e\n\u003cp\u003eAnother idea might be to have a memory pool for \u003ccode\u003eRefCount\u003c/code\u003e objects. This would improve allocation speed but the refcount would be located far away from the object in memory, which is bad news for the cache whenever you modify the refcounts.\u003c/p\u003e\n\u003cp\u003eI’d like to hear your thoughts. Maybe this whole thing is also not an issue.\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2018-05-31T10:46:05.478Z","reply_count":2,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":19,"reads":54,"readers_count":53,"score":115.8,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/urho3d/Urho3D/blob/master/Source/Urho3D/Container/RefCounted.cpp#L33","internal":false,"reflection":false,"title":"Urho3D/RefCounted.cpp at master · urho3d/Urho3D · GitHub","clicks":6}],"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":24697,"name":"Eugene Kozlov","username":"Eugene","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png","created_at":"2018-05-31T16:43:07.698Z","cooked":"\u003caside class=\"quote no-group\" data-post=\"1\" data-topic=\"4273\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/thecomet/40/142_1.png\" class=\"avatar\"\u003e TheComet:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe first is to inline \u003ccode\u003erefs_\u003c/code\u003e and \u003ccode\u003eweakRefs_\u003c/code\u003e into RefCounted and get rid of \u003ccode\u003eRefCount\u003c/code\u003e entirely. In order for weakrefs to still work, the conditions for when the object is destructed and freed would have to be modified: Call the destructor when \u003ccode\u003erefs_\u003c/code\u003e reaches zero, free the memory when \u003ccode\u003eweakRefs_\u003c/code\u003e reaches zero.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eOnce you called dtor, you are not allowed to read or modify any part of the object.\u003cbr\u003e\n/\u0026gt;\u003c/p\u003e\n\u003caside class=\"quote no-group\" data-post=\"1\" data-topic=\"4273\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/thecomet/40/142_1.png\" class=\"avatar\"\u003e TheComet:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAnother idea might be to have a memory pool for \u003ccode\u003eRefCount\u003c/code\u003e objects.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eOnce you have global pool for something, you must care about threading. So it should be thread-local pool. Not so easy, questionable performance.\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2018-05-31T16:43:20.811Z","reply_count":1,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":49,"readers_count":48,"score":14.8,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"Eugene Kozlov","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Core developer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":484,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":24698,"name":"","username":"S.L.C","avatar_template":"/user_avatar/discourse.urho3d.io/s.l.c/{size}/1016_2.png","created_at":"2018-05-31T17:39:26.482Z","cooked":"\u003cp\u003eEither way you go there’s something to be lost. Threading issues with memory pools, memory issues with moving it into the same class.\u003c/p\u003e\n\u003cp\u003eAnd if you try to do it like a shared pointer thing where you store the counter and instance in the same structure to be near each-other, you end up “leaking” memory because if there’s still a weak reference you can’t release the counter and thus you can’t release the memory for the actual instance. Not to mention that you get a few inconveniences.\u003c/p\u003e\n\u003cp\u003eEither way it gets nasty. That’s why \u003ccode\u003eshared_ptr\u003c/code\u003e and similar smart pointers use a similar counter that is allocated separately. And \u003ccode\u003eReferenceCounted\u003c/code\u003e is no different than that.\u003c/p\u003e\n\u003cp\u003eIf you do have a memory allocator that can allocate the counter  near the instance, you could just overwrite the \u003ccode\u003enew\u003c/code\u003e operator to replace the default behavior. Should reduce the number of changes to be made to existing code.\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2018-05-31T17:41:17.204Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":49,"readers_count":48,"score":14.8,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":180,"hidden":false,"trust_level":0,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"user_suspended":true,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":24708,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2018-05-31T23:27:29.764Z","cooked":"\u003caside class=\"quote no-group\" data-username=\"Eugene\" data-post=\"2\" data-topic=\"4273\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/eugene/40/902_2.png\" class=\"avatar\"\u003e Eugene:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eOnce you called dtor, you are not allowed to read or modify any part of the object.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eGood point. Maybe it’s possible to do as \u003ca class=\"mention\" href=\"/u/s.l.c\"\u003e@S.L.C\u003c/a\u003e said, somehow allocate RefCount near the object being refcounted. Or perhaps even allocating a larger block of memory to fit both and constructing them next to each other?\u003c/p\u003e\n\u003caside class=\"quote no-group\" data-username=\"S.L.C\" data-post=\"3\" data-topic=\"4273\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/s.l.c/40/1016_2.png\" class=\"avatar\"\u003e S.L.C:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAnd if you try to do it like a shared pointer thing where you store the counter and instance in the same structure to be near each-other, you end up “leaking” memory because if there’s still a weak reference you can’t release the counter and thus you can’t release the memory for the actual instance.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eIn the grand scheme of things, this probably won’t matter too much for two reasons: 1) weak references aren’t \u003cem\u003ethat\u003c/em\u003e common and 2) the refcounted objects all have a relatively small memory footprint. I can’t think of any single Urho class that requires over, say, 1kB of memory when allocated.\u003c/p\u003e\n\u003cp\u003eI’m just thinking out loud here. I’ll have to actually do some measurements.\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2018-05-31T23:27:57.186Z","reply_count":0,"reply_to_post_number":2,"quote_count":2,"incoming_link_count":0,"reads":46,"readers_count":45,"score":9.2,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":24709,"name":"Eugene Kozlov","username":"Eugene","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png","created_at":"2018-06-01T00:28:07.458Z","cooked":"\u003caside class=\"quote no-group\" data-post=\"1\" data-topic=\"4273\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/thecomet/40/142_1.png\" class=\"avatar\"\u003e TheComet:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eOr are there other things that outweigh the cost of allocating?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eYou know, we have 50% single-threaded rendering with constant memory reallocation for per-batch instancing buffers…\u003c/p\u003e\n\u003cp\u003eEvery time I see yet another thread about optimizing refcnt, or optimizing string copies, or complains about probably slow new attributes, I want to say “Sweet summer child…”\u003c/p\u003e","post_number":5,"post_type":1,"updated_at":"2018-06-01T00:28:07.458Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":44,"readers_count":43,"score":8.8,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"Eugene Kozlov","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Core developer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":484,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":24713,"name":"","username":"orefkov","avatar_template":"/user_avatar/discourse.urho3d.io/orefkov/{size}/1164_2.png","created_at":"2018-06-01T06:28:08.904Z","cooked":"\u003cp\u003eImho, by optimizing refcount allocation in 100 times, common programm performance increased by 0.01%\u003cbr\u003e\nDo you have profiled tests telling that It is bottleneck for engine?\u003c/p\u003e","post_number":6,"post_type":1,"updated_at":"2018-06-01T06:29:34.539Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":43,"readers_count":42,"score":13.6,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":584,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":26819,"name":"","username":"1vanK","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png","created_at":"2018-12-10T14:51:49.734Z","cooked":"\u003caside class=\"quote no-group\" data-post=\"6\" data-topic=\"4273\" data-full=\"true\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/orefkov/40/1164_1.png\" class=\"avatar\"\u003e orefkov:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eImho, by optimizing refcount allocation in 100 times, common programm performance increased by 0.01%\u003cbr\u003e\nDo you have profiled tests telling that It is bottleneck for engine?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003ememory fragmentation is problem also\u003c/p\u003e","post_number":8,"post_type":1,"updated_at":"2018-12-10T14:51:49.734Z","reply_count":1,"reply_to_post_number":6,"quote_count":1,"incoming_link_count":0,"reads":30,"readers_count":29,"score":11.0,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":263,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":26825,"name":"","username":"cosar","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/c/94ad74/{size}.png","created_at":"2018-12-10T18:41:00.822Z","cooked":"\u003cp\u003eI think cache misses and memory fragmentation can lead to performance issues and should not be neglected. On top of that, proper profiling on core mechanics is hard to achieve, so it’s very difficult to asses the impact.\u003cbr\u003e\nThere might be another way that will avoid double allocation and non-contiguous memory, and without detaching the destructor from the deallocation.\u003cbr\u003e\nInstead of a weak reference counter, we can have a weak reference double linked list (weak_ptr containing node information), with the head kept in RefCounted. The penalty is a tail insert at weak reference creation, a node removal at breaking the weak reference, and a list traversal at object destruction (when strong refs go to zero) to invalidate existing weak refs.\u003cbr\u003e\nThe assumption is that weak references are used just occasionally to break circular dependencies and that most objects don’t have weak refs to them.\u003c/p\u003e","post_number":9,"post_type":1,"updated_at":"2018-12-10T18:41:00.822Z","reply_count":0,"reply_to_post_number":8,"quote_count":0,"incoming_link_count":0,"reads":29,"readers_count":28,"score":5.8,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":97,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":26831,"name":"","username":"1vanK","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png","created_at":"2018-12-10T22:04:41.186Z","cooked":"\u003cp\u003eActually after using std::make_shared() memory is freed only after all weak_refs is deleted, so we can do the same and just move refcounters into objects\u003c/p\u003e","post_number":10,"post_type":1,"updated_at":"2018-12-10T22:08:36.419Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":28,"readers_count":27,"score":10.6,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":263,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":26832,"name":"","username":"cosar","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/c/94ad74/{size}.png","created_at":"2018-12-10T23:06:40.544Z","cooked":"\u003cp\u003eThat’s what TheComet’s first proposal was (and the easiest to implement). If delayed memory freeing is not an issue, then this looks like the best approach.\u003c/p\u003e","post_number":11,"post_type":1,"updated_at":"2018-12-10T23:06:40.544Z","reply_count":0,"reply_to_post_number":10,"quote_count":0,"incoming_link_count":1,"reads":28,"readers_count":27,"score":10.6,"yours":false,"topic_id":4273,"topic_slug":"refcount-performance","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":97,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[24680,24697,24698,24708,24709,24713,26819,26825,26831,26832]},"timeline_lookup":[[1,1637],[3,1636],[7,1444],[8,1443]],"suggested_topics":[{"id":7213,"title":"Urho3D reads data wrong","fancy_title":"Urho3D reads data wrong","slug":"urho3d-reads-data-wrong","posts_count":5,"reply_count":3,"highest_post_number":5,"image_url":null,"created_at":"2022-03-08T21:13:42.180Z","last_posted_at":"2022-05-13T01:26:46.126Z","bumped":true,"bumped_at":"2022-05-13T01:26:46.126Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":228,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1507,"username":"Kest","name":"Kest","avatar_template":"/user_avatar/discourse.urho3d.io/kest/{size}/3734_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1358,"username":"JSandusky","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/jsandusky/{size}/3220_2.png"}}]},{"id":7158,"title":"Xamarin android urhosharp has no octree.getdrawables","fancy_title":"Xamarin android urhosharp has no octree.getdrawables","slug":"xamarin-android-urhosharp-has-no-octree-getdrawables","posts_count":11,"reply_count":9,"highest_post_number":11,"image_url":null,"created_at":"2022-01-27T15:03:52.636Z","last_posted_at":"2022-02-02T07:17:04.722Z","bumped":true,"bumped_at":"2022-02-02T07:17:04.722Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":256,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1503,"username":"tianlv777","name":"zerrrrr","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/a4c791/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":627,"username":"George1","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/9e8a1a/{size}.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":809,"username":"elix22","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png"}}]},{"id":7122,"title":"Faster allocations with PMR","fancy_title":"Faster allocations with PMR","slug":"faster-allocations-with-pmr","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2022-01-10T16:23:15.053Z","last_posted_at":"2022-01-10T16:42:29.752Z","bumped":true,"bumped_at":"2022-01-10T17:55:02.117Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":209,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":1363,"username":"vmost","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/v/5f9b8f/{size}.png"}}]},{"id":7073,"title":"A plan to support static batching","fancy_title":"A plan to support static batching","slug":"a-plan-to-support-static-batching","posts_count":5,"reply_count":2,"highest_post_number":5,"image_url":null,"created_at":"2021-12-01T03:43:48.579Z","last_posted_at":"2021-12-02T23:30:07.199Z","bumped":true,"bumped_at":"2021-12-02T23:30:07.199Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":180,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1490,"username":"Sunc","name":"DoubleSuper","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/df788c/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}}]},{"id":7223,"title":"navMesh.FindPath(jack1.Position, pathPos); crash in android","fancy_title":"navMesh.FindPath(jack1.Position, pathPos); crash in android","slug":"navmesh-findpath-jack1-position-pathpos-crash-in-android","posts_count":15,"reply_count":13,"highest_post_number":17,"image_url":null,"created_at":"2022-03-22T06:21:34.927Z","last_posted_at":"2022-03-30T17:48:22.028Z","bumped":true,"bumped_at":"2022-03-30T17:48:22.028Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":242,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1503,"username":"tianlv777","name":"zerrrrr","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/a4c791/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":230,"username":"Nerrik","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/n/958977/{size}.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":809,"username":"elix22","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png"}}]}],"tags_descriptions":{},"id":4273,"title":"RefCount performance","fancy_title":"RefCount performance","posts_count":10,"created_at":"2018-05-31T10:46:05.386Z","views":725,"reply_count":4,"like_count":0,"last_posted_at":"2018-12-10T23:06:40.544Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"refcount-performance","category_id":16,"word_count":1154,"deleted_at":null,"user_id":37,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_4273","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":11,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":6,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":37,"username":"TheComet","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":97,"username":"cosar","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/c/94ad74/{size}.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"moderator":true,"trust_level":4},{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":180,"username":"S.L.C","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/s.l.c/{size}/1016_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":0},{"id":584,"username":"orefkov","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/orefkov/{size}/1164_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2}],"created_by":{"id":37,"username":"TheComet","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png"},"last_poster":{"id":97,"username":"cosar","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/c/94ad74/{size}.png"},"links":[{"url":"https://github.com/urho3d/Urho3D/blob/master/Source/Urho3D/Container/RefCounted.cpp#L33","title":"Urho3D/RefCounted.cpp at master · urho3d/Urho3D · GitHub","internal":false,"attachment":false,"reflection":false,"clicks":6,"user_id":37,"domain":"github.com","root_domain":"github.com"}]}}