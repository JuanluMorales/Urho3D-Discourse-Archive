{"post_stream":{"posts":[{"id":11604,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2016-04-08T14:45:16.000Z","cooked":"\u003cp\u003eI ran into a problem that caused some annoying segfaults.\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"bbcode-b\"\u003e[size=150]The Problem[/size]\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eConsider the following factory pattern (reduced for simplicity):\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eclass Item\n{\npublic:\n    static SharedPtr\u0026lt;Item\u0026gt; Item::create(Item_e item)\n    {\n        switch(item) {\n            case ITEM_FLOWER: return new FlowerItem;\n            /* etc */\n        }\n        return SharedPtr\u0026lt;Item\u0026gt;();\n    }\n};\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eNow consider the following call to this factory method:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eItem* item = Item::create(ITEM_FLOWER);\n// Oh oh, the FlowerItem object was destroyed here\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIt shouldn’t be possible to convert SharedPtr to a raw pointer like this. This basically makes \u003cspan class=\"bbcode-b\"\u003eSharedPtr::Get()\u003c/span\u003e a useless method.\u003c/p\u003e\n\u003cp\u003eFurthermore, although not as bad as above, these implicit conversions allow for somewhat confusing code. For example:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSharedPtr\u0026lt;Foo\u0026gt; foo;\ndoAThing(foo);\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eDoes \u003cspan class=\"bbcode-b\"\u003edoAThing()\u003c/span\u003e; take a raw pointer Foo* or a SharedPtr? We cannot know without looking up the function signature.\u003c/p\u003e\n\u003cp\u003eOr this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIs \u003cspan class=\"bbcode-b\"\u003efoo_\u003c/span\u003e a SharedPtr or a raw pointer? Again, we cannot know without looking at the definition of foo_.\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"bbcode-b\"\u003e[size=150]Proposed solution[/size]\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eI propose to make the following change to SharedPtr and WeakPtr. Change this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eto this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis change will fix all of the problems explained above and at the same time it will still allow for code such as this:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSharedPtr\u0026lt;Item\u0026gt; item = Item::create(ITEM_FLOWER);\nif(!item) // This is still valid!\n    return;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis change will force us to change these examples:\u003c/p\u003e\n\u003cp\u003e[code]// 1\u003cbr\u003e\nSharedPtr foo;\u003cbr\u003e\ndoAThing(foo);\u003c/p\u003e\n\u003cp\u003e// 2\u003cbr\u003e\nFoo* MyClass::SomeMethod() { return foo_; }[/code]\u003c/p\u003e\n\u003cp\u003eInto this:\u003c/p\u003e\n\u003cp\u003e[code]// 1\u003cbr\u003e\nSharedPtr foo;\u003cbr\u003e\ndoAThing(foo.Get());\u003c/p\u003e\n\u003cp\u003e// 2\u003cbr\u003e\nFoo* MyClass::SomeMethod() { return foo_.Get(); }[/code]\u003c/p\u003e\n\u003cp\u003eWhich allows us to instantly see that if SharedPtr is being used or not.\u003c/p\u003e\n\u003cp\u003eIf the dev team agrees, I shall go ahead and make this change.\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T01:11:46.878Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":207,"reads":38,"readers_count":37,"score":1042.6,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11607,"name":"Lasse Öörni","username":"cadaver","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","created_at":"2016-04-08T22:16:48.000Z","cooked":"\u003cp\u003eI would agree this is good, however I will reserve final judgement until I see the PR (and exact amount of engine changes.) WeakPtr should be safe to keep as is, as getting a raw ptr from a weak ptr should have no unintended consequences.\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-01-02T01:11:47.191Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":33,"readers_count":32,"score":6.6,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"Lasse Öörni","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Urho3D Author","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":3,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11610,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-04-09T10:39:43.000Z","cooked":"\u003cp\u003eGood idea.\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis change will fix all of the problems explained above and at the same time it will still allow for code such as this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e    SharedPtr\u0026lt;Item\u0026gt; item = Item::create(ITEM_FLOWER);\n    if(!item) // This is still valid!\n        return;\u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eOne could also use “operator bool() const” which is usually done for such checks. The obvious archetype std::shared_ptr does that too: \u003ca href=\"http://www.cplusplus.com/reference/memory/shared_ptr/\" rel=\"nofollow noopener\"\u003ecplusplus.com/reference/memory/shared_ptr/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eT* and SharedPtr feel weirdly mixed in Urho. What is the guideline behind that? Is there a consistent style?\u003cbr\u003e\nIs there a case of getting a T* from a function and being responsible for that object (having to delete it)? Would be weird. Should be a unique or shared pointer.\u003cbr\u003e\nIs there a case of passing a T* to a function, returning from it and not being able to safely delete the T? Should be a shared or weak pointer then.\u003cbr\u003e\nThere could be more pitfalls which can be avoided with types and not having error prone implicit conversions like SharedPtr::operator T*().\u003c/p\u003e\n\u003cp\u003eAlso functions like Terrain::SetHeightmap(Image*) could act differently depending on whether they got a naked pointer or a shared pointer. In the first case the ressource would be copied and managed internally (if it is actually needed after returning from the function of course). In the second case the same ressource could be shared across objects to save memory. Maybe that is already done internally, having that more explicit would be better though.\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2017-01-02T01:11:47.423Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":3,"reads":33,"readers_count":32,"score":21.6,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://www.cplusplus.com/reference/memory/shared_ptr/","internal":false,"reflection":false,"title":"shared_ptr - C++ Reference","clicks":1}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11612,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2016-04-09T12:36:10.000Z","cooked":"\u003cp\u003e\u003cspan class=\"bbcode-b\"\u003e\u003ca class=\"mention\" href=\"/u/cadaver\"\u003e@cadaver\u003c/a\u003e\u003c/span\u003e - I will begin work on creating the PR in that case.\u003c/p\u003e\n\u003cp\u003eAs a side note, I’m interested in where you first learned about intrusive reference counts? I’ve never seen anything quite like it before Urho3D.\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/gawag/40/68_1.png\" class=\"avatar\"\u003e gawag:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eOne could also use “operator bool() const” which is usually done for such checks. The obvious archetype std::shared_ptr does that too: \u003ca href=\"http://www.cplusplus.com/reference/memory/shared_ptr/\" rel=\"nofollow noopener\"\u003ecplusplus.com/reference/memory/shared_ptr/\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eThis is a good idea. That means we can get rid of \u003cspan class=\"bbcode-b\"\u003eoperator T*() const\u003c/span\u003e completely.\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/gawag/40/68_1.png\" class=\"avatar\"\u003e gawag:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eT* and SharedPtr feel weirdly mixed in Urho. What is the guideline behind that? Is there a consistent style?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eIt’s dangerous to think of Urho’s SharedPtr as being analogous to std::shared_ptr because they don’t have the same semantic meaning. As I’ve come to understand, in Urho3D, everything inheriting from \u003cspan class=\"bbcode-b\"\u003eRefCounted\u003c/span\u003e is considered a shared resource, regardless of whether a function takes T* or SharedPtr as an argument. For instance, I could easily write a function that manually increments the refcount:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evoid foo(Bar* bar) {\n    bar-\u0026gt;AddRef();\n}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eYou simply cannot make the assertion that just because a function takes a raw T* pointer it does not increment the refcount later on. You have to assume that every object is a shared object by default (since virtually everything in Urho3D inherits from RefCounted).\u003c/p\u003e\n\u003cp\u003eSo with that in mind, Urho3D’s guideline is to pass around raw pointers whenever possible (for speed), and if it so happens that an object wishes to store the pointer for later use, it will wrap it in a SharedPtr in order to increment the refcount and stop it from potentially being deleted elsewhere.\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2017-01-02T01:11:47.560Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":1,"reads":29,"readers_count":28,"score":10.8,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11613,"name":"Lasse Öörni","username":"cadaver","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","created_at":"2016-04-09T13:24:14.000Z","cooked":"\u003cp\u003eI no longer remember where I first saw intrusive pointers, possibly in kNet library.\u003c/p\u003e\n\u003cp\u003eThe primary reasons Urho uses intrusive shared pointers is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePrevent situations where shared -\u0026gt; raw -\u0026gt; shared conversions could result in two separate refcounts being created, which later leads to double-delete and crash. Std::shared_ptr has make_shared mechanism to prevent this, but the classes must remember to inherit shared_from_this, and you must remember to use make_shared.\u003c/li\u003e\n\u003cli\u003eEasiest interoperability with AngelScript handles, as the API can just hand out raw ptrs in all cases where it still owns the objects somewhere (like in the scene graph.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn C++ application code IMO you should never do manual AddRef() or ReleaseRef(), but use shared ptrs. Script bindings would sometimes need to use these when “transferring” ownership from a shared ptr.\u003c/p\u003e","post_number":5,"post_type":1,"updated_at":"2017-01-02T01:11:47.634Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":2,"reads":24,"readers_count":23,"score":14.8,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"Lasse Öörni","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Urho3D Author","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":3,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11614,"name":"","username":"sabotage3d","avatar_template":"/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png","created_at":"2016-04-09T14:11:33.000Z","cooked":"\u003cp\u003eJust as a side note. Are going for the for something similar to the behaviour of Boost intrusive_ptr?\u003cbr\u003e\n\u003cspan class=\"bbcode-b\"\u003eBoost intrusive_ptr:\u003c/span\u003e \u003ca href=\"http://www.boost.org/doc/libs/1_57_0/libs/smart_ptr/intrusive_ptr.html\" data-bbcode=\"true\" rel=\"nofollow noopener\"\u003ehttp://www.boost.org/doc/libs/1_57_0/libs/smart_ptr/intrusive_ptr.html\u003c/a\u003e\u003c/p\u003e","post_number":6,"post_type":1,"updated_at":"2017-01-02T01:11:47.698Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":24,"readers_count":23,"score":4.8,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://www.boost.org/doc/libs/1_57_0/libs/smart_ptr/intrusive_ptr.html","internal":false,"reflection":false,"title":"intrusive_ptr - 1.57.0","clicks":1}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":151,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11620,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-04-09T19:57:14.000Z","cooked":"\u003cp\u003eHa!  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/laughing.png?v=5\" title=\":laughing:\" class=\"emoji\" alt=\":laughing:\"\u003e That’s funny. This situation is kinda hilarious:\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is a good idea. That means we can get rid of operator T*() const completely.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eI actually wrote a whole and long paragraph about it, thought about it for quite a while and removed it again. The “problem” I saw is that functions who take a specific object (like an Image or a Texture) may not really care how it is managed. From a user perspective you want to give them the resource independent if it’s a T* or a SharedPtr or a UniquePtr or whatever. This can be either done by having a huge amount of overloads for every common T* or T* wrapper but one doesn’t really want to do and maintain that.\u003cbr\u003e\nThe other option is the current existing one with the implicit conversion to T* in some way so that every function taking a T* does also directly accept SharedPtr without having to use the .Get() (code bloat). I actually thought you thought about the same thing already and intentionally suggesting making it an implicit conversion to T* const as this could still allow giving functions taking an T* (or T* const) a SharedPtr.\u003c/p\u003e\n\u003cp\u003eActually just another option came to my mind but I would need to test that and it would be kinda odd… I’ll test that…\u003c/p\u003e\n\u003cp\u003eWas the reason for the implicit SharedPtr to T* conversion the passing to functions taking a T*? Am I missing something else?\u003cbr\u003e\nThe conversion is quite a big and dangerous pitfall but I see this one big reason for it and no perfect solution.\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003e[all that SharedPtr and intrusive pointer stuff]\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eEww. \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/confused.png?v=5\" title=\":confused:\" class=\"emoji\" alt=\":confused:\"\u003e Really? That’s totally unexpected. I thought it was similar to std::shared_ptr like the name suggested. I kinda assumed something like that happening in Urho but I didn’t know exactly until now.\u003cbr\u003e\nI see the reason for that but at least the naming is terrible. What about IntrusivePtr? Is SharedPtr also used like a normal shared pointer (like std::shared_ptr) and not like an intrinsic pointer? Smells like two different use cases that suggest two different types.\u003c/p\u003e","post_number":7,"post_type":1,"updated_at":"2017-01-02T01:11:48.136Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":25,"readers_count":24,"score":5.0,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11622,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-04-10T00:20:37.000Z","cooked":"\u003cp\u003eI’ve researched the idea I mentioned: \u003ca href=\"https://github.com/damu/wiki/blob/master/converter_classes.md\" rel=\"nofollow noopener\"\u003egithub.com/damu/wiki/blob/maste … classes.md\u003c/a\u003e\u003cbr\u003e\nIf one wants to avoid having many overloads like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003eTerrain::SetHeightmap(Image*)\nTerrain::SetHeightmap(SharedPtr\u0026lt;Image\u0026gt;)\nTerrain::SetHeightmap(WeakPtr\u0026lt;Image\u0026gt;)\n...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOne could use the described technique of using a converter class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003eTerrain::SetHeightmap(AnyPtr\u0026lt;Image\u0026gt;)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith that the SetHeightmap function (and any other function taking a “AnyPtr”) accepts all pointer types it is configured for like T*, SharedPtr and WeakPtr. Without having to have the wrapper implicitly be convertible to T*, that implicit conversion is type safe offloaded to AnyPtr.\u003cbr\u003e\nI’ve included a screenshot of the assembler output. It’s practically cost free, depending on the case it can even be cheaper.\u003c/p\u003e\n\u003cp\u003eComments?\u003c/p\u003e","post_number":8,"post_type":1,"updated_at":"2017-01-02T01:11:48.266Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":23,"readers_count":22,"score":4.6,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/damu/wiki/blob/master/converter_classes.md","internal":false,"reflection":false,"title":"wiki/converter_classes.md at master · damu/wiki · GitHub","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11624,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2016-04-10T12:44:45.000Z","cooked":"\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/cadaver/40/3_1.png\" class=\"avatar\"\u003e cadaver:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn C++ application code IMO you should never do manual AddRef() or ReleaseRef(), but use shared ptrs. Script bindings would sometimes need to use these when “transferring” ownership from a shared ptr.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eObviously, yeah. I just wanted to be as clear as possible in that example.\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/gawag/40/68_1.png\" class=\"avatar\"\u003e gawag:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI’ve researched the idea I mentioned: \u003ca href=\"https://github.com/damu/wiki/blob/master/converter_classes.md\" rel=\"nofollow noopener\"\u003egithub.com/damu/wiki/blob/maste … classes.md\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eThere are many problems with your proposed solution using \u003cspan class=\"bbcode-b\"\u003eany_pointer\u003c/span\u003e. The TL;DR version is you’re breaking semantic meaning and you’re re-introducing the issue I explained in the first post:\u003c/p\u003e\n\u003cp\u003e[code]class Item\u003cbr\u003e\n{\u003cbr\u003e\npublic:\u003cbr\u003e\nstatic SharedPtr Item::create(Item_e item)\u003cbr\u003e\n{\u003cbr\u003e\nswitch(item) {\u003cbr\u003e\ncase ITEM_FLOWER: return new FlowerItem;\u003cbr\u003e\n/* etc */\u003cbr\u003e\n}\u003cbr\u003e\nreturn SharedPtr();\u003cbr\u003e\n}\u003cbr\u003e\n};\u003c/p\u003e\n\u003cp\u003eclass Player\u003cbr\u003e\n{\u003cbr\u003e\nItem* item_;\u003cbr\u003e\npublic:\u003cbr\u003e\nvoid HoldItem(AnyPtr item)\u003cbr\u003e\n{\u003cbr\u003e\nitem_ = item;\u003cbr\u003e\n}\u003cbr\u003e\n}[/code]\u003c/p\u003e\n\u003cp\u003eHere’s the problem again:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePlayer player;\nplayer.HoldItem(Item::create(ITEM_FLOWER));\n// Oh oh, player.item_ is now pointing to a destroyed object\n// This is exactly what I'm trying to fix, AnyPtr re-introduces the issue\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e[quote=“gawag”]One could use the described technique of using a converter class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003eTerrain::SetHeightmap(AnyPtr\u0026lt;Image\u0026gt;)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith that the SetHeightmap function (and any other function taking a “AnyPtr”) accepts all pointer types it is configured for like T*, SharedPtr and WeakPtr. Without having to have the wrapper implicitly be convertible to T*, that implicit conversion is type safe offloaded to AnyPtr.\u003cbr\u003e\nI’ve included a screenshot of the assembler output. It’s practically cost free, depending on the case it can even be cheaper.[/quote]\u003c/p\u003e\n\u003cp\u003eAgain, it re-introduces the issue from my original post. As far as semantics go, what does Terrain::SetHeitmap(AnyPtr) \u003cspan class=\"bbcode-i\"\u003emean\u003c/span\u003e semantically? Does Terrain own that resource afterwards? Or does Terrain hold a weak reference to it? Or does Terrain rely on the parent object’s lifetime and simply hold a raw pointer?\u003c/p\u003e\n\u003cp\u003eThe fact that Image \u003cspan class=\"bbcode-i\"\u003eis\u003c/span\u003e a \u003cspan class=\"bbcode-b\"\u003eRefCounted\u003c/span\u003e object makes it a shared object, end of story. It doesn’t matter how many wrapper classes you create, you won’t be able to change the semantic meaning. Like I tried to explained in my previous post, you are confusing SharedPtr with std::shared_ptr.\u003c/p\u003e\n\u003cp\u003eWhat’s wrong with just calling\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhere \u003cspan class=\"bbcode-b\"\u003eSetHeigtMap()\u003c/span\u003e accepts a raw pointer \u003cspan class=\"bbcode-b\"\u003eImage*\u003c/span\u003e? It’s clear that we’re passing a raw pointer, and it’s clear that since Image inherits RefCounted, it is a shared resource, meaning that Terrain could potentially gain ownership of the image passed. There is no confusion in this call.\u003c/p\u003e","post_number":9,"post_type":1,"updated_at":"2017-01-02T01:11:48.401Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":2,"reads":23,"readers_count":22,"score":14.6,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11625,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-04-10T13:54:21.000Z","cooked":"\u003cp\u003eAh, you got got me wrong there.\u003cbr\u003e\nThe idea of my AnyPtr is just to avoid overloads if one wants to not have a semantic meaning. Just as in “do stuff with X”. For example blurring a given Image.\u003cbr\u003e\nIf one should pass a std::shared_ptr, the function should take a std::shared_ptr.\u003cbr\u003e\nIf the function should take a weak pointer, it should take a weak pointer.\u003cbr\u003e\nThe “dirty hack” that Urho is doing with it’s T* when T is a child of RefCounted is pretty misleading as a naked pointer has no semantic meaning but the RefCounted naked pointer actually has a semantic meaning. Ideally there should be a type for this slightly different smart pointer.\u003cbr\u003e\nThe AnyPtr should be only used as a replacement for T* (with no semantic meaning) so that also a SharedPtr (and maybe others as well) can be passed without requiring .Get().\u003c/p\u003e\n\u003cp\u003eTo the player with the item example:\u003cbr\u003e\nYou are using an Item* but want to manage that resource. There’s nothing hinting towards any kind of resource management as it is just a naked pointer. It would be clear if it would be a SharedPtr and the Item would be passed as a SharedPtr. We are in the age of smart pointers and having a naked pointer but wanting any kind of smart behavior from it can be considered a bug.\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAgain, it re-introduces the issue from my original post. As far as semantics go, what does Terrain::SetHeitmap(AnyPtr) mean semantically? Does Terrain own that resource afterwards? Or does Terrain hold a weak reference to it? Or does Terrain rely on the parent object’s lifetime and simply hold a raw pointer?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eIn the ideal case: It doesn’t do anything with that Image afterwards. It may have modified it or copied it but it is safe to delete that Image directly after SetHeightmap.\u003cbr\u003e\nI just looked at the code and the SetHeightMapInternal sets a SharedPtr with that given image. So it is using the Image shared but that was not hinted in any way as it only got an Image* originally.This hidden smart pointer stuff is really dirty.\u003c/p\u003e\n\u003cp\u003eSo it kinda boils down to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ewanting shared ownership without costs at every argument pass\u003c/li\u003e\n\u003cli\u003eideally: wanting to indicate that the thing the pointer is passed to will use it shared (like the SetHeightmap) or not care at all after leaving the function\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e[quote]\u003cbr\u003e\nWhat’s wrong with just calling\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e    terrain-\u0026gt;SetHeightMap(myImage.Get())\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhere SetHeigtMap() accepts a raw pointer Image*? It’s clear that we’re passing a raw pointer, and it’s clear that since Image inherits RefCounted, it is a shared resource, meaning that Terrain could potentially gain ownership of the image passed. There is no confusion in this call.[/quote]\u003cbr\u003e\nTwo problems: Currently .Get() is not required and removing the implicit cast in SharedPtr to T* would break code. Secondly requiring .Get() everywhere adds a lot of code bloat. Both could be avoided by for example my approach with a converter class.\u003cbr\u003e\nAlso having to distinguish between naked pointers in general and naked pointers with the base RefCounted is pretty misleading. As already said having a zero cost type (like no ref count changes when copied and similar) would be better as it would be also fast (the speed reason you mentioned) but less misleading and add type safety.\u003c/p\u003e\n\u003cp\u003eI’m currently not seeing a perfect way to solve the issues with functions like SetHeightmap that ideally should take a shared pointer but without the cost.\u003cbr\u003e\nSeems to be a common issue:\u003cbr\u003e\n\u003ca href=\"http://stackoverflow.com/questions/8385457/should-i-pass-a-shared-ptr-by-reference\" rel=\"nofollow noopener\"\u003estackoverflow.com/questions/8385 … -reference\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://stackoverflow.com/questions/327573/c-passing-references-to-stdshared-ptr-or-boostshared-ptr\" rel=\"nofollow noopener\"\u003estackoverflow.com/questions/3275 … shared-ptr\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://stackoverflow.com/questions/10826541/passing-shared-pointers-as-arguments\" rel=\"nofollow noopener\"\u003estackoverflow.com/questions/1082 … -arguments\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/\" rel=\"nofollow noopener\"\u003eherbsutter.com/2013/06/05/gotw- … arameters/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThough in the case of SetHeightmap the cost for passing a shared pointer by value can be neglected as that function isn’t called that often. But there may be similar cases that are actually performance critical.\u003cbr\u003e\nBesides the neglectable cost there’s nothing speaking against Terrain::SetHeighmap(SharedPtr) am I right?\u003c/p\u003e\n\u003cp\u003eHm one option would be Terrain::SetHeighmap(SharedPtr\u0026amp;). Zero cost at first but also “shareable” due to not being const. Still kinda dirty.\u003c/p\u003e","post_number":10,"post_type":1,"updated_at":"2017-01-02T01:11:48.483Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":22,"readers_count":21,"score":4.4,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://stackoverflow.com/questions/8385457/should-i-pass-a-shared-ptr-by-reference","internal":false,"reflection":false,"title":"c++ - Should I pass a shared_ptr by reference? - Stack Overflow","clicks":0},{"url":"https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/","internal":false,"reflection":false,"clicks":0},{"url":"http://stackoverflow.com/questions/327573/c-passing-references-to-stdshared-ptr-or-boostshared-ptr","internal":false,"reflection":false,"title":"C++ - passing references to std::shared_ptr or boost::shared_ptr - Stack Overflow","clicks":0},{"url":"http://stackoverflow.com/questions/10826541/passing-shared-pointers-as-arguments","internal":false,"reflection":false,"title":"c++ - Passing shared pointers as arguments - Stack Overflow","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11626,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2016-04-10T14:05:26.000Z","cooked":"\u003cp\u003eMaybe I’m missing something here, but how does your solution solve the problem in the first post?\u003c/p\u003e\n\u003cp\u003eBecause from what I understand, you basically disagree with everything I proposed. I want to make these changes to fix a problem I encountered.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eForce explicit use of \u003cspan class=\"bbcode-b\"\u003eSharedPtr::Get()\u003c/span\u003e instead of relying on implicit conversions\u003c/li\u003e\n\u003cli\u003eAdd \u003cspan class=\"bbcode-b\"\u003ebool operator() const { return ptr_ != NULL; }\u003c/span\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou appear to disagree with 1) because of “code bloat”. However, your solution doesn’t fix any of the issues in my first post, so I don’t know where that leaves us.\u003c/p\u003e","post_number":11,"post_type":1,"updated_at":"2017-01-02T01:11:48.572Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":19,"readers_count":18,"score":3.8,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11627,"name":"","username":"Dave82","avatar_template":"/user_avatar/discourse.urho3d.io/dave82/{size}/2369_2.png","created_at":"2016-04-10T15:28:13.000Z","cooked":"\u003caside class=\"quote\"\u003e\n\u003cblockquote\u003e\n\u003cp\u003egawag : You are using an Item* but want to manage that resource. There’s nothing hinting towards any kind of resource management as it is just a naked pointer. It would be clear if it would be a SharedPtr and the Item would be passed as a SharedPtr. We are in the age of smart pointers and having a naked pointer but wanting any kind of smart behavior from it can be considered a bug.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eThat’s exacly what i thought too.\u003c/p\u003e\n\u003cp\u003eif a function returns a smart pointer you are responsible to pass it as a smart pointer.\u003cbr\u003e\nThis :\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003elooks like you intentionally try to make a mistake.If the return type is SharedPtr the use a SharedPtr\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e","post_number":12,"post_type":1,"updated_at":"2017-01-02T01:11:48.640Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":21,"readers_count":20,"score":4.2,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":247,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11629,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-04-10T15:46:01.000Z","cooked":"\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/thecomet/40/142_1.png\" class=\"avatar\"\u003e TheComet:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMaybe I’m missing something here, but how does your solution solve the problem in the first post?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eI’m getting confused as well.\u003c/p\u003e\n\u003cp\u003e[quote=“TheComet”]\u003cbr\u003e\nBecause from what I understand, you basically disagree with everything I proposed. I want to make these changes to fix a problem I encountered.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eForce explicit use of \u003cspan class=\"bbcode-b\"\u003eSharedPtr::Get()\u003c/span\u003e instead of relying on implicit conversions[/quote]\u003cbr\u003e\nYes we agree on the implicit conversion being bad. But I saw problems resulting in removing that and tried fixing those.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e[quote=“TheComet”]\u003cbr\u003e\n2) Add \u003cspan class=\"bbcode-b\"\u003ebool operator() const { return ptr_ != NULL; }\u003c/span\u003e[/quote]\u003cbr\u003e\nThat’s also good, std::shared_ptr does that too.\u003c/p\u003e\n\u003cp\u003e[quote=“TheComet”]\u003cbr\u003e\nYou appear to disagree with 1) because of “code bloat”. However, your solution doesn’t fix any of the issues in my first post, so I don’t know where that leaves us.[/quote]\u003cbr\u003e\nI don’t disagree but it would force to add .Get() to every place where the implicit conversion was used (breaking old code). My solution fixes this at the places where a naked pointer was used “properly” (without any semantic meaning or sharing) without having the issues you mentioned (as it is not used shared).\u003cbr\u003e\nIn Terrain::SetHeightmap the Image* is actually used shared (if I got that right) but that is confusing as a naked pointer doesn’t hint to that. So I suggested passing the SharedPtr either per value (extra cost) or per reference in such cases where the object is actually used in a shared way.\u003c/p\u003e\n\u003cp\u003eOh I just notized this: Texture2D::SetData(SharedPtr). That function is actually getting passed a SharedPtr… And that function isn’t using the Image shared at all. It’s copying the data.\u003cbr\u003e\nWhy is Texture2D::SetData getting passed a SharedPtr but not using the Image in any way shared but Terrain::SetHeightmap is receiving the Image as a naked pointer but using the reference counting feature (using it shared)? Smells fishy. \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/unamused.png?v=5\" title=\":unamused:\" class=\"emoji\" alt=\":unamused:\"\u003e\u003c/p\u003e\n\u003cp\u003eBasically I’m suggesting to use a converter class in functions that don’t use the ressource shared like Texture2D::SetData as it would allow to pass SharedPtr in there as well as Image* and that without having an implicit T* conversion in SharedPtr (as we want to get rid of that unsafe implicitness). And to use SharedPtr (potentially as a reference or somehow “disguised” for speed) in functions like Terrain::SetHeightmap that actually use the resource shared.\u003cbr\u003e\nAnyPtr is also kinda clumsy especially when passing a naked pointer but I don’t see a better solution if one doesn’t want the implicit cast SharedPptr::T* or function overloads everywhere for every “pointer type”.\u003c/p\u003e\n\u003cp\u003eOh Dave82 posted while I was writing this. I completely agree with that post. \u003cem\u003enonexisting thumbs up smiley\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eEdit: Oh isn’t a SharedPtr of a RefCounted object not kinda weird and doubled shared? Oh they work in conjunction, that’s still odd.\u003c/p\u003e\n\u003cp\u003eEdit2: Also SharedPtr can’t be used with any class: “error: ‘class person’ has no member named ‘AddRef’” \"error: ‘class person’ has no member named ‘ReleaseRef’\"\u003cbr\u003e\nSomeone not knowing that Urho specialty \"But I thought it would be like std::shared_ptr or QSharedPointer or boost::shared_ptr or …  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/frowning.png?v=5\" title=\":frowning:\" class=\"emoji\" alt=\":frowning:\"\u003e \"\u003c/p\u003e","post_number":13,"post_type":1,"updated_at":"2017-01-02T01:11:48.811Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":22,"readers_count":21,"score":4.4,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11630,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2016-04-10T16:40:27.000Z","cooked":"\u003cp\u003e[quote=“Dave82”]This :\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003elooks like you intentionally try to make a mistake.If the return type is SharedPtr the use a SharedPtr\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou’re missing the point. I’m saying it shouldn’t be possible for this to compile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOf course you have to use a SharedPtr if the return type is a SharedPtr, but the fact of the matter is, if you happen to forget it is returning a SharedPtr and you use a raw pointer accidentally, the code compiles and runs anyway (and will later crash). This is what I’m trying to fix. Does that make sense?\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/gawag/40/68_1.png\" class=\"avatar\"\u003e gawag:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMy solution fixes this at the places where a naked pointer was used “properly” (without any semantic meaning or sharing) without having the issues you mentioned (as it is not used shared).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eNo, it still has the issues I mentioned. This code I posted earlier - which uses your \u003cspan class=\"bbcode-b\"\u003eAnyPtr\u003c/span\u003e - shows exactly how the issue still exists.\u003c/p\u003e\n\u003cp\u003e[code]class Item {\u003cbr\u003e\npublic:\u003cbr\u003e\nstatic SharedPtr Item::create(Item_e item) {\u003cbr\u003e\nswitch(item) {\u003cbr\u003e\ncase ITEM_FLOWER: return new FlowerItem;\u003cbr\u003e\n/* etc */\u003cbr\u003e\n}\u003cbr\u003e\nreturn SharedPtr();\u003cbr\u003e\n}\u003cbr\u003e\n};\u003c/p\u003e\n\u003cp\u003eclass Player {\u003cbr\u003e\nItem* item_;\u003cbr\u003e\npublic:\u003cbr\u003e\nvoid HoldItem(AnyPtr item) {\u003cbr\u003e\nitem_ = item;\u003cbr\u003e\n}\u003cbr\u003e\n}[/code]\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePlayer player;\nplayer.HoldItem(Item::create(ITEM_FLOWER));\n// Oh oh, player.item_ is now pointing to a destroyed object\n// This is exactly what I'm trying to fix, AnyPtr re-introduces the issue\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eI still fail to see how offloading the implicit conversion to a new wrapper class is any different than just leaving the implicit conversion as-is?\u003c/p\u003e","post_number":14,"post_type":1,"updated_at":"2017-01-02T01:11:48.891Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":20,"readers_count":19,"score":4.0,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11631,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-04-10T17:11:49.000Z","cooked":"\u003cp\u003e[quote=“TheComet”]\u003cbr\u003e\nNo, it still has the issues I mentioned. This code I posted earlier - which uses your \u003cspan class=\"bbcode-b\"\u003eAnyPtr\u003c/span\u003e - shows exactly how the issue still exists.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e...\nclass Player {\n    Item* item_;\npublic:\n    void HoldItem(AnyPtr\u0026lt;Item\u0026gt; item) {\n        item_ = item;\n    }\n}\n...\n\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eI still fail to see how offloading the implicit conversion to a new wrapper class is any different than just leaving the implicit conversion as-is?[/quote]\u003cbr\u003e\nYou are taking the AnyPtr and storing a shared resource in a naked pointer. Yes that can be done, but that is not what AnyPtr is supposed to be used for.\u003cbr\u003e\nYour HoldItem could also receive a SharedPtr and still save it incorrectly as an Item* by using the .Get() function. As I already said, in that case you should use a SharedPtr.\u003c/p\u003e\n\u003cp\u003eI think misusing AnyPtr in that way can’t be prevented. …\u003cbr\u003e\nOh wait I think it can: If the AnyPtr does also not have an implicit cast to T*. Instead it can be compared like a pointer and does also have operator*. It would still be constructable via T* and any SharedPtr and whatever, so that functions taking an AnyPtr would accept any pointer as intended.\u003cbr\u003e\nIs that the solution?\u003c/p\u003e","post_number":15,"post_type":1,"updated_at":"2017-01-02T01:11:48.970Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":18,"readers_count":17,"score":3.6,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11633,"name":"","username":"rku","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png","created_at":"2016-04-11T06:02:17.000Z","cooked":"\u003cp\u003e[quote=“TheComet”]I’m saying it shouldn’t be possible for this to compile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e[/quote]\u003c/p\u003e\n\u003cp\u003eI stepped on this rake once too. Not doing that again though. Is it not too much fuss over non-issue really? I prefer cleaner and more convenient code to write. Having to .Get() all over the place will be less clean and convenient. Besides in modern IDEs return type is mouse-over-method away in modern IDEs. While forcing .Get() in various contexts is indeed correct way to do it in theory - in reality it is not that practical. It would be annoyance. Minor one but annoyance. And for what? To avoid a bug that is immediately visible? Not worth it imho.\u003c/p\u003e","post_number":16,"post_type":1,"updated_at":"2017-01-02T01:11:49.091Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":18,"readers_count":17,"score":3.6,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":246,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11645,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-04-11T19:29:38.000Z","cooked":"\u003cp\u003eThe bug is not that immediately visible. Also I’ve made a suggestion how .Get() could be avoided and still be typesafe.\u003c/p\u003e","post_number":17,"post_type":1,"updated_at":"2017-01-02T01:11:49.965Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":20,"readers_count":19,"score":4.0,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11649,"name":"Lasse Öörni","username":"cadaver","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","created_at":"2016-04-12T08:50:12.000Z","cooked":"\u003cp\u003eTexture2D::SetData does image = image-\u0026gt;GetNextLevel(), which is runtime MIP calculation that returns a new image inside a new SharedPtr. In this case, forcing the user to pass a SharedPtr ensures the original image doesn’t get destroyed within the function. It could be refactored to not manipulate the original image pointer, at the cost of slightly more complex code. In fact this would be preferable for more straightforward script bindings.\u003c/p\u003e\n\u003cp\u003eTerrain::SetHeightMap does nothing unusual, it just takes ownership of the passed image, in which case a raw ptr is sufficient. The Urho documentation states this of ownership in general:\u003c/p\u003e\n\u003cp\u003e“When an object’s public API allows assigning a reference counted object to it through a Set…() function, this implies ownership through a SharedPtr. For example assigning a Material to a StaticModel, or a Viewport to Renderer. To end the assignment and free the reference counted object, call the Set…() function again with a null argument.”\u003c/p\u003e\n\u003cp\u003e(\u003ca href=\"http://urho3d.github.io/documentation/HEAD/_conventions.html\"\u003eurho3d.github.io/documentation/H … tions.html\u003c/a\u003e)\u003c/p\u003e","post_number":18,"post_type":1,"updated_at":"2017-01-02T01:11:50.216Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":20,"readers_count":19,"score":4.0,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"Lasse Öörni","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://urho3d.github.io/documentation/HEAD/_conventions.html","internal":false,"reflection":false,"title":"Urho3D - Documentation - Conventions","clicks":2},{"url":"http://discourse.urho3d.io/t/solved-texture2d-setdata-has-changed-in-1-5/2065/3","internal":true,"reflection":true,"title":"[SOLVED]Texture2D::SetData(...) has changed in 1.5?","clicks":0}],"read":true,"user_title":"Urho3D Author","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":3,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11673,"name":"Lasse Öörni","username":"cadaver","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","created_at":"2016-04-13T10:59:51.000Z","cooked":"\u003cp\u003eTexturexxx::SetData() has been changed in master branch to use just a raw pointer. It will now rather manage the created MIP images internally by a different shared pointer.\u003c/p\u003e","post_number":19,"post_type":1,"updated_at":"2017-01-02T01:11:51.743Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":20,"readers_count":19,"score":4.0,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"Lasse Öörni","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Urho3D Author","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":3,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11785,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2016-04-20T09:48:50.000Z","cooked":"\u003cp\u003eI’ve decided to not go forth with this change. I didn’t understand SharedPtr when I made this thread and now I do. It makes a lot of sense to allow implicit casting from and to raw pointers.\u003c/p\u003e","post_number":20,"post_type":1,"updated_at":"2017-01-02T01:11:59.705Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":19,"readers_count":18,"score":3.8,"yours":false,"topic_id":1954,"topic_slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[11604,11607,11610,11612,11613,11614,11620,11622,11624,11625,11626,11627,11629,11630,11631,11633,11645,11649,11673,11785]},"timeline_lookup":[[1,2420],[2,2419],[7,2418],[15,2417],[17,2416],[19,2415],[20,2408]],"suggested_topics":[{"id":7227,"title":"How to use -s MAX_WEBGL_VERSION=2","fancy_title":"How to use -s MAX_WEBGL_VERSION=2","slug":"how-to-use-s-max-webgl-version-2","posts_count":3,"reply_count":1,"highest_post_number":3,"image_url":null,"created_at":"2022-03-30T13:12:17.248Z","last_posted_at":"2022-03-30T14:09:14.646Z","bumped":true,"bumped_at":"2022-03-30T14:09:14.646Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":103,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":997,"username":"huminzheng","name":"huminzheng","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/h/9de0a6/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7158,"title":"Xamarin android urhosharp has no octree.getdrawables","fancy_title":"Xamarin android urhosharp has no octree.getdrawables","slug":"xamarin-android-urhosharp-has-no-octree-getdrawables","posts_count":11,"reply_count":9,"highest_post_number":11,"image_url":null,"created_at":"2022-01-27T15:03:52.636Z","last_posted_at":"2022-02-02T07:17:04.722Z","bumped":true,"bumped_at":"2022-02-02T07:17:04.722Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":256,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1503,"username":"tianlv777","name":"zerrrrr","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/a4c791/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":627,"username":"George1","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/9e8a1a/{size}.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":809,"username":"elix22","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png"}}]},{"id":7136,"title":"Open-source ocean shader system","fancy_title":"Open-source ocean shader system","slug":"open-source-ocean-shader-system","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-01-19T23:11:15.784Z","last_posted_at":"2022-01-19T23:11:15.858Z","bumped":true,"bumped_at":"2022-01-19T23:11:15.858Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":177,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":1304,"username":"lebrewer","name":"lebrewer","avatar_template":"/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]},{"id":7095,"title":"Texture2D from imported GPU memory (interop)","fancy_title":"Texture2D from imported GPU memory (interop)","slug":"texture2d-from-imported-gpu-memory-interop","posts_count":6,"reply_count":2,"highest_post_number":6,"image_url":null,"created_at":"2021-12-09T10:52:31.426Z","last_posted_at":"2021-12-13T15:40:35.300Z","bumped":true,"bumped_at":"2021-12-13T15:40:35.300Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":316,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1496,"username":"ange","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/a/76d3ee/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7291,"title":"Using IK to deal with mesh collision: how to detect and rotate?","fancy_title":"Using IK to deal with mesh collision: how to detect and rotate?","slug":"using-ik-to-deal-with-mesh-collision-how-to-detect-and-rotate","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2022-07-01T22:18:42.620Z","last_posted_at":"2022-07-02T01:45:17.023Z","bumped":true,"bumped_at":"2022-07-02T01:45:17.023Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":98,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1529,"username":"hunkalloc","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/hunkalloc/{size}/3817_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":1358,"username":"JSandusky","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/jsandusky/{size}/3220_2.png"}}]}],"tags_descriptions":{},"id":1954,"title":"SharedPtr - potential pitfall that can be easily fixed","fancy_title":"SharedPtr - potential pitfall that can be easily fixed","posts_count":20,"created_at":"2016-04-08T14:45:16.000Z","views":1418,"reply_count":0,"like_count":0,"last_posted_at":"2016-04-20T09:48:50.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"sharedptr-potential-pitfall-that-can-be-easily-fixed","category_id":16,"word_count":4434,"deleted_at":null,"user_id":37,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_1954","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":20,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":6,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":206,"username":"gawag","name":"gawag AKA damu","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","post_count":7,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1},{"id":37,"username":"TheComet","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","post_count":6,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":3,"username":"cadaver","name":"Lasse Öörni","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","post_count":4,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"admin":true,"trust_level":2},{"id":151,"username":"sabotage3d","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":246,"username":"rku","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/rku/{size}/3200_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":247,"username":"Dave82","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/dave82/{size}/2369_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2}],"created_by":{"id":37,"username":"TheComet","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png"},"last_poster":{"id":37,"username":"TheComet","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png"},"links":[{"url":"http://urho3d.github.io/documentation/HEAD/_conventions.html","title":"Urho3D - Documentation - Conventions","internal":false,"attachment":false,"reflection":false,"clicks":2,"user_id":3,"domain":"urho3d.github.io","root_domain":"urho3d.github.io"},{"url":"http://www.boost.org/doc/libs/1_57_0/libs/smart_ptr/intrusive_ptr.html","title":"intrusive_ptr - 1.57.0","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":151,"domain":"www.boost.org","root_domain":"boost.org"},{"url":"http://www.cplusplus.com/reference/memory/shared_ptr/","title":"shared_ptr - C++ Reference","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":206,"domain":"www.cplusplus.com","root_domain":"cplusplus.com"}]}}