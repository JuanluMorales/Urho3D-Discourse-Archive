{"post_stream":{"posts":[{"id":39376,"name":"","username":"Athos","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/a/f1d935/{size}.png","created_at":"2020-10-26T05:06:43.639Z","cooked":"\u003cp\u003eI’ve finished changing the way events work in Urho3D, implemented a custom RTTI and wanted to share some details of it.\u003cbr\u003e\nFirst, the regular Urho3D code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Custom sample event\nURHO3D_EVENT(E_SAMPLEEVENT, SampleEvent)\n{\n\tURHO3D_PARAM(P_OBJ, Obj);\t\t// (void*) RefCounted*\n\tURHO3D_PARAM(P_INDEX, Index);\t// (long long) size_t\n}\n\n// =================================================\n// A class which will listen to the new event:\nclass NodeListener : public Node\n{\npublic:\n\tNodeListener(Context* context) :\n\t\tNode(context)\n\t{\n\t\tSubscribeToEvent(E_SAMPLEEVENT, URHO3D_HANDLER(NodeListener, OnSampleEvent));\n\t}\n\n\t~NodeListener() override = default;\n\n\tURHO3D_OBJECT(NodeListener, Node);\n\n\tvoid SetId(size_t id)\n\t{\n\t\tid_ = id;\n\t}\n\n\tsize_t GetId() const\n\t{\n\t\treturn id_;\n\t}\n\nprivate:\n\tvoid OnSampleEvent(StringHash type, VariantMap\u0026amp; data)\n\t{\n\t\tVariant\u0026amp; node = data[SampleEvent::P_OBJ];\n\t\tVariant\u0026amp; index = data[SampleEvent::P_INDEX];\n\n\t\tNodeListener* listener = dynamic_cast\u0026lt;NodeListener*\u0026gt;((RefCounted*)node.GetVoidPtr());\n\t\tif (listener == this)\n\t\t{\n\t\t\tSetId((size_t)index.GetInt64());\n\t\t}\n\t}\n\nprivate:\n\tsize_t id_ {};\n};\n\n// =================================================\n// Assuming you have a basic class for creating the Urho3D loop, scene, etc:\n// Create 1000 node listeners\n{\n\t// listeners_ is of type Vector\u0026lt;SharedPtr\u0026lt;NodeListener\u0026gt;\u0026gt;\n\tconst size_t count = 100 * 10;\n\tlisteners_.Reserve(count);\n\n\tfor (size_t i = 0; i \u0026lt; count; ++i)\n\t{\n\t\tSharedPtr\u0026lt;NodeListener\u0026gt; node {new NodeListener(context_)};\n\t\tscene_-\u0026gt;AddChild(node);\n\n\t\tlisteners_.Push(node);\n\t}\n}\n\n// =================================================\n// Now, somewhere in the main loop, when you press a key:\nif (input_-\u0026gt;GetKeyPress(Key::KEY_SPACE))\n{\n\tconst size_t listenerCount = listeners_.Size();\n\n\tVariantMap\u0026amp; data = GetEventDataMap();\n\n\tauto start = std::chrono::high_resolution_clock::now();\n\t{\n\t\tfor (size_t i = 0; i \u0026lt; listenerCount; ++i)\n\t\t{\n\t\t\tdata[SampleEvent::P_OBJ] = (void*)listeners_[i].Get();\n\t\t\tdata[SampleEvent::P_INDEX] = (long long)i;\n\n\t\t\tSendEvent(E_SAMPLEEVENT, data);\n\t\t}\n\t}\n\tauto end = std::chrono::high_resolution_clock::now();\n\tauto duration = std::chrono::duration_cast\u0026lt;std::chrono::milliseconds\u0026gt;(end - start).count();\n\n\tURHO3D_LOGINFOF(\"Sending %d events to %d node listeners took %d ms\", listenerCount, listenerCount, duration);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn my hardware, the above scenario consistently produces:\u003cbr\u003e\n“INFO: Sending 1000 events to 1000 node listeners took 36 ms”\u003c/p\u003e\n\u003cp\u003eNow, after some major changes, here’s the same sample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Custom sample event\nstruct SampleEvent\n{\n\tRefCounted* obj;\n\tsize_t index;\n};\n\n// =================================================\n// The class which will listen to the event:\nclass NodeListener : public Node\n{\npublic:\n\tNodeListener(Context* context) :\n\t\tNode(context)\n\t{\n\t\tListenEvent\u0026lt;SampleEvent\u0026gt;([this](const SampleEvent\u0026amp; data)\n\t\t{\n\t\t\tNodeListener* listener = RTTI::DynamicCast\u0026lt;NodeListener*\u0026gt;(data.obj);\n\t\t\tif (listener == this)\n\t\t\t{\n\t\t\t\tSetId(data.index);\n\t\t\t}\n\t\t});\n\t}\n\t~NodeListener() override = default;\n\n\tRTTI_IMPL();\n\n\tvoid SetId(size_t id)\n\t{\n\t\tid_ = id;\n\t}\n\n\tsize_t GetId() const\n\t{\n\t\treturn id_;\n\t}\n\nprivate:\n\tsize_t id_ {};\n};\n\n// =================================================\n// Creating the 1000 node listeners is exactly the same as before (except it's using the std::vector);\n// Then, somewhere in the main loop:\n\nif (input_-\u0026gt;GetKeyPress(KeyCode::Space))\n{\n\tsize_t listenerCount = listeners_.size();\n\n\tauto start = std::chrono::high_resolution_clock::now();\n\t{\n\t\tfor (size_t i = 0; i \u0026lt; listenerCount; ++i)\n\t\t{\n\t\t\tSendEvent(SampleEvent {\n\t\t\t\tlisteners_[i].Get(),\n\t\t\t\ti\n\t\t\t});\n\t\t}\n\t}\n\tauto end = std::chrono::high_resolution_clock::now();\n\tauto duration = std::chrono::duration_cast\u0026lt;std::chrono::milliseconds\u0026gt;(end - start).count();\n\n\tURHO3D_LOGINFO(fmt::format(\"Sending {0:d} events to {0:d} node listeners took {1:d}ms\", listenerCount, duration).c_str());\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn my hardware, the changes above consistently produces:\u003cbr\u003e\n“INFO: Sending 1000 events to 1000 node listeners took 8ms”\u003c/p\u003e\n\u003cp\u003eBoth of the tests were compiled on windows using MSVC 2019: x64 Static Release, C++17;\u003cbr\u003e\nC++ exceptions disabled;\u003cbr\u003e\nThe regular Urho3D uses the default c++ RTTI, and thus it was enabled;\u003c/p\u003e\n\u003cp\u003eThe custom RTTI was coded by Samuel Kahn, he explains how the magic works here:\u003cbr\u003e\n\u003ca href=\"http://kahncode.com/2019/09/24/c-tricks-fast-rtti-and-dynamic-cast/\" rel=\"noopener nofollow ugc\"\u003ehttp://kahncode.com/2019/09/24/c-tricks-fast-rtti-and-dynamic-cast/\u003c/a\u003e\u003cbr\u003e\nI’ve only made minor changes to it. Instead of generating a random id at runtime, it is generated at compile time.\u003c/p\u003e\n\u003cp\u003eThe event handler was replaced by EventBus (2.6):\u003cbr\u003e\n\u003ca href=\"https://github.com/gelldur/EventBus\" rel=\"noopener nofollow ugc\"\u003ehttps://github.com/gelldur/EventBus\u003c/a\u003e\u003cbr\u003e\nOne thing to consider is you can’t listen an event from a specific sender.\u003c/p\u003e\n\u003cp\u003eSome other notes:\u003cbr\u003e\nAll containers (except String) were replaced by the ::std ones;\u003cbr\u003e\nUrho2D/UI and scripting languages were ditched (I’ll be using a third party lib for UI);\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2020-10-26T05:06:43.639Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":59,"reads":37,"readers_count":36,"score":347.4,"yours":false,"topic_id":6458,"topic_slug":"custom-rtti-and-eventbus","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://kahncode.com/2019/09/24/c-tricks-fast-rtti-and-dynamic-cast/","internal":false,"reflection":false,"title":"C++ Tricks: Fast RTTI and Dynamic Cast - Kahncode","clicks":6},{"url":"https://github.com/gelldur/EventBus","internal":false,"reflection":false,"title":"GitHub - gelldur/EventBus: A lightweight and very fast event bus / event framework for C++17","clicks":6},{"url":"https://discourse.urho3d.io/t/return-of-the-nag/6459/12","internal":true,"reflection":true,"title":"Return of the nag","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":3}],"moderator":false,"admin":false,"staff":false,"user_id":1179,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":39381,"name":"Eugene Kozlov","username":"Eugene","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png","created_at":"2020-10-26T08:30:12.995Z","cooked":"\u003cp\u003eI wonder how much of this performance difference is from doing some work more optimally, and how much is from not doing some work you personally don’t need. E.g. your event doesn’t use VariantMap for paramters, which makes it incompatible with Urho scripting API.\u003c/p\u003e\n\u003cp\u003eAlso, how much of performance difference comes from new RTTI and how much from different event logic?\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2020-10-26T08:30:12.995Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":32,"readers_count":31,"score":36.4,"yours":false,"topic_id":6458,"topic_slug":"custom-rtti-and-eventbus","display_username":"Eugene Kozlov","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Core developer","title_is_group":false,"bookmarked":false,"actions_summary":[{"id":2,"count":2}],"moderator":false,"admin":false,"staff":false,"user_id":484,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":39389,"name":"","username":"Athos","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/a/f1d935/{size}.png","created_at":"2020-10-26T16:02:52.104Z","cooked":"\u003cp\u003eSending an event without any parameters (using same sample as before, but simplified):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Event sender\nVariantMap\u0026amp; data = GetEventDataMap();\nauto start = std::chrono::high_resolution_clock::now();\n{\n\tfor (size_t i = 0; i \u0026lt; listenersCount; ++i)\n\t{\n\t\tSendEvent(E_SAMPLEEVENT, data);\n\t}\n}\nauto end = std::chrono::high_resolution_clock::now();\nauto duration = std::chrono::duration_cast\u0026lt;std::chrono::milliseconds\u0026gt;(end - start).count();\n\n// And the event handler:\nvoid NodeListener::OnSampleEvent(Urho3D::StringHash type, Urho3D::VariantMap\u0026amp; data)\n{\n\tSetId(GetId() + 1);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003etakes 11ms\u003c/p\u003e\n\u003cp\u003eIf I change the event a little bit (no dynamic casting):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Sender\nVariantMap\u0026amp; data = GetEventDataMap();\nauto start = std::chrono::high_resolution_clock::now();\n{\n\tfor (size_t i = 0; i \u0026lt; listenersCount; ++i)\n\t{\n\t\tdata[SampleEvent::P_OBJ] = (void*)listeners[i].Get();\n\t\tdata[SampleEvent::P_INDEX] = (long long)i;\n\t\tSendEvent(E_SAMPLEEVENT, data);\n\t}\n}\nauto end = std::chrono::high_resolution_clock::now();\nauto duration = std::chrono::duration_cast\u0026lt;std::chrono::milliseconds\u0026gt;(end - start).count();\n\n// Event handler\nvoid NodeListener::OnSampleEvent(Urho3D::StringHash type, Urho3D::VariantMap\u0026amp; data)\n{\n\tNodeListener* listener = (NodeListener*)data[SampleEvent::P_OBJ].GetVoidPtr();\n\tsize_t index = (size_t)data[SampleEvent::P_INDEX].GetUInt64();\n\n\tif (listener == this)\n\t{\n\t\tSetId(index);\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003etakes 20ms\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSwitching to EventBus\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Sender\nauto start = std::chrono::high_resolution_clock::now();\n{\n\tfor (size_t i = 0; i \u0026lt; listenersCount; ++i)\n\t{\n\t\tSendEvent(SampleEvent {});\n\t}\n}\nauto end = std::chrono::high_resolution_clock::now();\nauto duration = std::chrono::duration_cast\u0026lt;std::chrono::milliseconds\u0026gt;(end - start).count();\n\n// Same simple handler\nNodeListener::NodeListener(Context* context) :\n\tNode(context)\n{\n\tListenEvent\u0026lt;SampleEvent\u0026gt;([this](const SampleEvent\u0026amp; data)\n\t{\n\t\tSetId(GetId() + 1);\n\t});\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003etakes 2ms\u003c/p\u003e\n\u003cp\u003eAlso, I tested using a VariantMap:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// The event\nstruct SampleEvent\n{\n\tmutable Urho3D::VariantMap map;\n};\n\n// The event handler\nNodeListener::NodeListener(Context* context) :\n\tNode(context)\n{\n\tListenEvent\u0026lt;SampleEvent\u0026gt;([this](const SampleEvent\u0026amp; data)\n\t{\n\t\tstatic StringHash obj_h {\"obj\"};\n\t\tstatic StringHash index_h {\"index\"};\n\n\t\tNodeListener* listener = (NodeListener*)data.map[obj_h].GetVoidPtr();\n\t\tsize_t index = (size_t)data.map[index_h].GetUInt64();\n\n\t\tif (listener == this)\n\t\t{\n\t\t\tSetId(index);\n\t\t}\n\t});\n}\n\n// The event sender\nauto start = std::chrono::high_resolution_clock::now();\n{\n\tstatic StringHash obj_h {\"obj\"};\n\tstatic StringHash index_h {\"index\"};\n\n\tfor (size_t i = 0; i \u0026lt; listenersCount; ++i)\n\t{\n\t\tSampleEvent data {};\n\t\tdata.map[obj_h] = (void*)listeners[i].Get();\n\t\tdata.map[index_h] = (long long)i;\n\n\t\tSendEvent(data);\n\t}\n}\nauto end = std::chrono::high_resolution_clock::now();\nauto duration = std::chrono::duration_cast\u0026lt;std::chrono::milliseconds\u0026gt;(end - start).count();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTakes 11ms\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRTTI and dynamic casts\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI noticed the custom RTTI is actually slower than default dynamic_cast\u0026lt;\u0026gt;;\u003cbr\u003e\nI think I messed up somewhere, need to test more.\u003cbr\u003e\nBut here some numbers (1 000 000 dynamic cast from RefCounted* to NodeListener*):\u003c/p\u003e\n\u003cp\u003edynamic_cast\u0026lt;\u0026gt; takes 34ms\u003cbr\u003e\nRTTI::DynamicCast\u0026lt;\u0026gt; takes 45ms\u003c/p\u003e\n\u003cp\u003eThe code used:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elong long duration {};\nfor (size_t c = 0; c \u0026lt; 1000; ++c)\n{\n\tfor (size_t i = 0; i \u0026lt; listeners.Size(); ++i)\n\t{\n\t\tNodeListener* node {};\n\t\tRefCounted* src = listeners[i].Get();\n\n\t\tauto start = std::chrono::high_resolution_clock::now();\n\t\t{\n\t\t\t// Select which RTTI to use\n\t\t\t//node = dynamic_cast\u0026lt;NodeListener*\u0026gt;(src);\n\t\t\t//node = RTTI::DynamicCast\u0026lt;NodeListener*\u0026gt;(src);\n\t\t}\n\t\tauto end = std::chrono::high_resolution_clock::now();\n\t\tduration += std::chrono::duration_cast\u0026lt;std::chrono::nanoseconds\u0026gt;(end - start).count();\n\n\t\tif (node)\n\t\t{\n\t\t\tnode-\u0026gt;SetId(node-\u0026gt;GetId());\n\t\t}\n\t}\n}\u003c/code\u003e\u003c/pre\u003e","post_number":3,"post_type":1,"updated_at":"2020-10-26T16:02:52.104Z","reply_count":2,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":32,"readers_count":31,"score":36.4,"yours":false,"topic_id":6458,"topic_slug":"custom-rtti-and-eventbus","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":1179,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":39393,"name":null,"username":"vmost","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/v/5f9b8f/{size}.png","created_at":"2020-10-26T17:08:01.687Z","cooked":"\u003cp\u003ePretty sure VariantMap uses dynamic allocation, while your \u003ccode\u003eSampleEvent\u003c/code\u003e struct is being statically allocated. Could explain a lot of the performance gap.\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2020-10-26T17:08:01.687Z","reply_count":0,"reply_to_post_number":3,"quote_count":0,"incoming_link_count":0,"reads":28,"readers_count":27,"score":20.6,"yours":false,"topic_id":6458,"topic_slug":"custom-rtti-and-eventbus","display_username":null,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"Athos","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/a/f1d935/{size}.png"},"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":1363,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":39447,"name":null,"username":"vmost","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/v/5f9b8f/{size}.png","created_at":"2020-10-27T17:45:50.117Z","cooked":"\u003cp\u003eThought about this some more, and had an idea that may work pretty well without redoing much of Urho3D’s current event handling system. I have not tested it or anything, and it’s surely incomplete.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e//hypothetical event system for Urho3D\n\n//event base\nclass EventBase\n{\npublic:\n//constructors\n\t/// default constructor: disabled\n\tEventBase() = delete;\n\n\t/// normal constructor\n\tEventBase(StringHash eventType) : m_event_type{eventType}\n\t{}\n\n//member functions\n\t/// get the event type\n\tStringHash GetEventType() {return m_event_type;}\n\n\t/// get string hash representing type of derived object\n\tvirtual StringHash GetType() const = 0;\n\t/// silence expectations of URHO3D_OBJECT() macro\n    virtual const String\u0026amp; GetTypeName() const = 0;\n    virtual const TypeInfo* GetTypeInfo() const = 0;\n    static const TypeInfo* GetTypeInfoStatic() { return nullptr; }\n\n//member variables\n\tStringHash m_event_type;\n};\n\n//example event\nstatic const Urho3D::StringHash E_KEYDOWN(Urho3D::GetEventNameRegister().RegisterString(#KeyDown));\nclass KeyDown final : public EventBase\n{\n\tURHO3D_OBJECT(KeyDown, EventBase);\n\npublic:\n//constructors\n\t/// default constructor\n\tKeyDown() : EventBase{E_KEYDOWN}\n\t{}\n\n//member variables\n\tint P_KEY;\n    int P_SCANCODE;\n    int P_BUTTONS;\n    int P_QUALIFIERS;\n    bool P_REPEAT;\n};\n\ntemplate \u0026lt;typename T\u0026gt;\nT* GetEventInfo(EventBase* event_base)\n{\n\tif (!event_base)\n\t\treturn nullptr;\n\n\t// poor man's dynamic cast\n\tif (event_base-\u0026gt;GetType() == T::GetTypeStatic())\n\t\treturn static_cast\u0026lt;T*\u0026gt;(event_base);\n\telse\n\t\treturn nullptr;\n}\n\n//creating and sending an event\nvoid SomeObj::SomeFunct()\n{\n\tKeyDown keydown_event{};\n\n\tkeydown_event.P_KEY = KEY_L;\n\tkeydown_event.P_QUALIFIERS = QUAL_SHIFT | QUAL_ALT;\n\n\tSendEvent(\u0026amp;keydown_event);\n}\n\n//signature of SendEvent()\nvoid Urho3D::Object::SendEvent(EventBase* event);\n\u003c/code\u003e\u003c/pre\u003e","post_number":5,"post_type":1,"updated_at":"2020-10-27T17:45:50.117Z","reply_count":1,"reply_to_post_number":3,"quote_count":0,"incoming_link_count":0,"reads":27,"readers_count":26,"score":70.4,"yours":false,"topic_id":6458,"topic_slug":"custom-rtti-and-eventbus","display_username":null,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"Athos","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/a/f1d935/{size}.png"},"bookmarked":false,"actions_summary":[{"id":2,"count":2}],"moderator":false,"admin":false,"staff":false,"user_id":1363,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":39453,"name":"Eugene Kozlov","username":"Eugene","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png","created_at":"2020-10-27T18:37:56.815Z","cooked":"\u003col\u003e\n\u003cli\u003eI like it.\u003c/li\u003e\n\u003cli\u003eIt will never work as PR, due to the same issues as before.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou can either have nice strict type or easy interop with scripts. Urho goes the second way. VariantMap is the only way to send event into script without reflection or manual bindings (we have enough of those)\u003c/p\u003e","post_number":6,"post_type":1,"updated_at":"2020-10-27T18:38:14.464Z","reply_count":1,"reply_to_post_number":5,"quote_count":0,"incoming_link_count":0,"reads":27,"readers_count":26,"score":10.4,"yours":false,"topic_id":6458,"topic_slug":"custom-rtti-and-eventbus","display_username":"Eugene Kozlov","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Core developer","title_is_group":false,"reply_to_user":{"username":"vmost","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/v/5f9b8f/{size}.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":484,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":39454,"name":null,"username":"vmost","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/v/5f9b8f/{size}.png","created_at":"2020-10-27T18:46:12.407Z","cooked":"\u003cp\u003eActually I don’t know anything about Urho3D scripting! Maybe that’s why I came up with this lol\u003c/p\u003e","post_number":7,"post_type":1,"updated_at":"2020-10-27T18:46:12.407Z","reply_count":0,"reply_to_post_number":6,"quote_count":0,"incoming_link_count":1,"reads":27,"readers_count":26,"score":10.4,"yours":false,"topic_id":6458,"topic_slug":"custom-rtti-and-eventbus","display_username":null,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":1363,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[39376,39381,39389,39393,39447,39453,39454]},"timeline_lookup":[[1,758],[4,757],[5,756]],"suggested_topics":[{"id":7332,"title":"Action RPG Game with Urho3D and Entt","fancy_title":"Action RPG Game with Urho3D and Entt","slug":"action-rpg-game-with-urho3d-and-entt","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-09-25T04:07:40.447Z","last_posted_at":"2022-09-25T04:07:40.526Z","bumped":true,"bumped_at":"2022-09-25T04:07:40.526Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":220,"category_id":12,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":789,"username":"codewalkerdan","name":"Codewalkerdan","avatar_template":"/user_avatar/discourse.urho3d.io/codewalkerdan/{size}/675_2.png"}}]},{"id":7108,"title":":soccer: Open Saucer","fancy_title":":soccer: Open Saucer","slug":"open-saucer","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2021-12-22T04:04:27.024Z","last_posted_at":"2021-12-22T04:04:27.091Z","bumped":true,"bumped_at":"2021-12-22T04:04:27.091Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"⚽ Open Saucer","tags_descriptions":{},"like_count":1,"views":284,"category_id":12,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]},{"id":7114,"title":":fireworks: Multi-Mower","fancy_title":":fireworks: Multi-Mower","slug":"multi-mower","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/optimized/2X/2/21e99fb677795abba6665611690df6db44a4f724_2_1024x336.png","created_at":"2022-01-01T00:59:53.176Z","last_posted_at":"2022-01-01T10:18:14.930Z","bumped":true,"bumped_at":"2022-01-01T22:11:41.028Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🎆 Multi-Mower","tags_descriptions":{},"like_count":1,"views":258,"category_id":12,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]},{"id":7317,"title":"New little puzzle game","fancy_title":"New little puzzle game","slug":"new-little-puzzle-game","posts_count":5,"reply_count":2,"highest_post_number":5,"image_url":null,"created_at":"2022-08-23T06:38:39.245Z","last_posted_at":"2022-09-05T19:26:29.102Z","bumped":true,"bumped_at":"2022-09-05T19:26:29.102Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":5,"views":232,"category_id":12,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":809,"username":"elix22","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}}]},{"id":7357,"title":"My multi-platform game development editor","fancy_title":"My multi-platform game development editor","slug":"my-multi-platform-game-development-editor","posts_count":4,"reply_count":1,"highest_post_number":4,"image_url":null,"created_at":"2022-11-17T11:59:16.052Z","last_posted_at":"2022-11-18T02:03:35.533Z","bumped":true,"bumped_at":"2022-11-18T02:03:35.533Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":7,"views":140,"category_id":12,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":809,"username":"elix22","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":627,"username":"George1","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/9e8a1a/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1038,"username":"dertom","name":"Thomas Trocha","avatar_template":"/user_avatar/discourse.urho3d.io/dertom/{size}/1815_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"}}]}],"tags_descriptions":{},"id":6458,"title":"Custom RTTI and EventBus","fancy_title":"Custom RTTI and EventBus","posts_count":7,"created_at":"2020-10-26T05:06:43.558Z","views":536,"reply_count":4,"like_count":9,"last_posted_at":"2020-10-27T18:46:12.407Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"custom-rtti-and-eventbus","category_id":12,"word_count":1424,"deleted_at":null,"user_id":1179,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_6458","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":7,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":3,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":1363,"username":"vmost","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/v/5f9b8f/{size}.png","post_count":3,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":1179,"username":"Athos","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/a/f1d935/{size}.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1}],"created_by":{"id":1179,"username":"Athos","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/a/f1d935/{size}.png"},"last_poster":{"id":1363,"username":"vmost","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/v/5f9b8f/{size}.png"},"links":[{"url":"http://kahncode.com/2019/09/24/c-tricks-fast-rtti-and-dynamic-cast/","title":"C++ Tricks: Fast RTTI and Dynamic Cast - Kahncode","internal":false,"attachment":false,"reflection":false,"clicks":6,"user_id":1179,"domain":"kahncode.com","root_domain":"kahncode.com"},{"url":"https://github.com/gelldur/EventBus","title":"GitHub - gelldur/EventBus: A lightweight and very fast event bus / event framework for C++17","internal":false,"attachment":false,"reflection":false,"clicks":6,"user_id":1179,"domain":"github.com","root_domain":"github.com"}]}}