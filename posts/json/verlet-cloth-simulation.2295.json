{"post_stream":{"posts":[{"id":13896,"name":"","username":"artgolf1000","avatar_template":"/user_avatar/discourse.urho3d.io/artgolf1000/{size}/73_2.png","created_at":"2016-10-05T08:04:21.000Z","cooked":"\u003cp\u003eHi,\u003c/p\u003e\n\u003cp\u003eIn my project, I need a soft stage curtain, so I ported \u003ca href=\"https://github.com/nnkgw/verlet_cloth\" rel=\"nofollow noopener\"\u003egithub.com/nnkgw/verlet_cloth\u003c/a\u003e to Urho3D today.\u003c/p\u003e\n\u003cp\u003eI have optimized the performance for mobile device, on my iPad Mini Retina , CPU occupation statistics:\u003c/p\u003e\n\u003cp\u003eWhen disabled verlet cloth simulation:\u003cbr\u003e\nDebug mode: 16%\u003cbr\u003e\nRelease mode: 16%\u003c/p\u003e\n\u003cp\u003eWhen enabled verlet cloth simulation:\u003cbr\u003e\nDebug mode: 19%\u003cbr\u003e\nRelease mode: 17%\u003c/p\u003e\n\u003cp\u003eI use a ball to push the curtain to simulate wind, the curtain looks amazing.\u003c/p\u003e\n\u003cp\u003eNote that width = 11, height = 11, iteration = 2 are good for mobile device, the default values are good for desktop applications.\u003c/p\u003e\n\u003cp\u003eC++\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eNode* planeNode = scene_-\u0026gt;CreateChild(\"VerletCloth\");\nplaneNode-\u0026gt;SetPosition(Vector3(0.0f, 2.6f, 20.0f));\nplaneNode-\u0026gt;SetScale(Vector3(20.0f, 10.0f, 20.0f));\nStaticModel* planeObject = planeNode-\u0026gt;CreateComponent\u0026lt;StaticModel\u0026gt;();\nplaneObject-\u0026gt;SetModel(new VerletCloth(context_, 11, 11, 2, false));\nplaneObject-\u0026gt;SetMaterial(cache-\u0026gt;GetResource\u0026lt;Material\u0026gt;(\"Materials/Curtain.xml\"));\n\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eMaterial\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;?xml version=\"1.0\"?\u0026gt;\n\u0026lt;material\u0026gt;\n    \u0026lt;technique name=\"Techniques/DiffUnlit.xml\" quality=\"0\" loddistance=\"0\" /\u0026gt;\n    \u0026lt;texture unit=\"diffuse\" name=\"Textures/Background.jpg\" /\u0026gt;\n\u0026lt;/material\u0026gt;\n\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eVerletCloth.h\u003c/p\u003e\n\u003cp\u003e[code]\u003cspan class=\"hashtag\"\u003e#pragma\u003c/span\u003e once\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;Urho3D/Urho3DAll.h\u0026gt;\u003c/p\u003e\n\u003cp\u003e/*\u003cbr\u003e\nPort of \u003ca href=\"https://github.com/nnkgw/verlet_cloth\" rel=\"nofollow noopener\"\u003ehttps://github.com/nnkgw/verlet_cloth\u003c/a\u003e\u003cbr\u003e\nto Urho3D\u003cbr\u003e\n*/\u003c/p\u003e\n\u003cp\u003eclass CParticle{\u003cbr\u003e\nprivate:\u003cbr\u003e\nbool      m_IsMovable;\u003cbr\u003e\nVector3 m_Position;\u003cbr\u003e\nVector3 m_OldPosition;\u003cbr\u003e\nVector3 m_Acceleration;\u003c/p\u003e\n\u003cp\u003epublic:\u003cbr\u003e\nCParticle(bool is_movable, Vector3\u0026amp; position, Vector3\u0026amp; acceleration) :\u003cbr\u003e\nm_IsMovable(is_movable),\u003cbr\u003e\nm_Position(position),\u003cbr\u003e\nm_OldPosition(position),\u003cbr\u003e\nm_Acceleration(acceleration){}\u003cbr\u003e\nCParticle(){};\u003cbr\u003e\n~CParticle(){}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einline void       Update(float t){\n    if (m_IsMovable){\n        Vector3 tmp = m_Position;\n        m_Position += (m_Position - m_OldPosition) + m_Acceleration * t * t;\n        m_OldPosition = tmp;\n    }\n}\ninline Vector3\u0026amp; GetPosition()  { return m_Position; }\ninline void       AddPosition(const Vector3 pos){\n    if (m_IsMovable){\n        m_Position += pos;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eclass CConstraint{\u003cbr\u003e\nprivate:\u003cbr\u003e\nfloat      m_Distance;\u003cbr\u003e\nCParticle* m_Particle1;\u003cbr\u003e\nCParticle* m_Particle2;\u003c/p\u003e\n\u003cp\u003epublic:\u003cbr\u003e\nCConstraint(CParticle* p1, CParticle* p2) :\u003cbr\u003e\nm_Distance(0.0f),\u003cbr\u003e\nm_Particle1(p1),\u003cbr\u003e\nm_Particle2(p2){\u003cbr\u003e\nVector3 p1_to_p2 = m_Particle2-\u0026gt;GetPosition() - m_Particle1-\u0026gt;GetPosition();\u003cbr\u003e\nm_Distance = p1_to_p2.Length();\u003cbr\u003e\n}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einline void Satisfy(){\n    Vector3 p1_to_p2          = m_Particle2-\u0026gt;GetPosition() - m_Particle1-\u0026gt;GetPosition();\n    float     diff              = p1_to_p2.Length() - m_Distance;\n    Vector3 correction_vector = p1_to_p2.Normalized() * diff * 0.5f;\n    m_Particle1-\u0026gt;AddPosition( correction_vector);\n    m_Particle2-\u0026gt;AddPosition(-correction_vector);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eclass CBall{\u003cbr\u003e\nprivate:\u003cbr\u003e\nfloat     m_Frequency;\u003cbr\u003e\nVector3 m_Position;\u003cbr\u003e\nfloat     m_Radius;\u003cbr\u003e\nfloat m_Offset;\u003c/p\u003e\n\u003cp\u003epublic:\u003cbr\u003e\nCBall(float radius) :\u003cbr\u003e\nm_Frequency(0.0f),\u003cbr\u003e\nm_Position(0.0f,0.0f,0.0f),\u003cbr\u003e\nm_Radius(radius),\u003cbr\u003e\nm_Offset(RandStandardNormal() * M_PI * 2.0f){}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einline void Update(float dt){\n    m_Position.z_ = 1.0f + cos(m_Frequency+m_Offset);\n    m_Frequency += dt * 0.2f;\n    if (m_Frequency \u0026gt; M_PI * 2.0f){ m_Frequency -= M_PI * 2.0f; }\n}\n\nVector3\u0026amp; GetPosition(){ return m_Position; }\ninline float      GetRadius()  { return m_Radius;   }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eclass CCloth{\u003cbr\u003e\nprivate:\u003cbr\u003e\nint                      m_Width;\u003cbr\u003e\nint                      m_Height;\u003cbr\u003e\nPODVector   m_Particles;\u003cbr\u003e\nPODVector m_Constraints;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCParticle* GetParticle(int w, int h) {return \u0026amp;m_Particles[ h * m_Width + w ];}\nvoid       MakeConstraint(CParticle* p1, CParticle* p2) { m_Constraints.Push(CConstraint(p1, p2));}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003epublic:\u003cbr\u003e\nCCloth(float width, float height, int num_width, int num_height):\u003cbr\u003e\nm_Width(num_width),\u003cbr\u003e\nm_Height(num_height) {\u003cbr\u003e\nm_Particles.Resize(m_Width * m_Height);\u003cbr\u003e\nfor(int w = 0; w \u0026lt; m_Width; w++){\u003cbr\u003e\nfor(int h = 0; h \u0026lt; m_Height; h++){\u003cbr\u003e\nVector3 pos( width  * ((float)w/(float)(m_Width - 1) ) - width  * 0.5f,\u003cbr\u003e\n-height * ((float)h/(float)(m_Height - 1)) + height * 0.5f,\u003cbr\u003e\n0.0f );\u003cbr\u003e\nbool is_movable = (h == 0) ? false : true;\u003cbr\u003e\nVector3 gravity( 0.0f, -0.98f, 0.0f );\u003cbr\u003e\nm_Particles[ h * m_Width + w ] = CParticle(is_movable, pos, gravity);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\nfor(int w = 0; w \u0026lt; m_Width; w++){\u003cbr\u003e\nfor(int h = 0; h \u0026lt; m_Height; h++){           // structual constraint\u003cbr\u003e\nif (w \u0026lt; m_Width  - 1){ MakeConstraint(GetParticle(w, h), GetParticle(w+1, h  )); }\u003cbr\u003e\nif (h \u0026lt; m_Height - 1){ MakeConstraint(GetParticle(w, h), GetParticle(w,   h+1)); }\u003cbr\u003e\nif (w \u0026lt; m_Width  - 1 \u0026amp;\u0026amp; h \u0026lt; m_Height - 1){ // shear constraint\u003cbr\u003e\nMakeConstraint(GetParticle(w,   h), GetParticle(w+1, h+1));\u003cbr\u003e\nMakeConstraint(GetParticle(w+1, h), GetParticle(w,   h+1));\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\nfor(int w = 0; w \u0026lt; m_Width; w++){\u003cbr\u003e\nfor(int h = 0; h \u0026lt; m_Height; h++){           // bend constraint\u003cbr\u003e\nif (w \u0026lt; m_Width  - 2){ MakeConstraint(GetParticle(w, h), GetParticle(w+2, h  )); }\u003cbr\u003e\nif (h \u0026lt; m_Height - 2){ MakeConstraint(GetParticle(w, h), GetParticle(w,   h+2)); }\u003cbr\u003e\nif (w \u0026lt; m_Width  - 2 \u0026amp;\u0026amp; h \u0026lt; m_Height - 2){\u003cbr\u003e\nMakeConstraint(GetParticle(w,   h), GetParticle(w+2, h+2));\u003cbr\u003e\nMakeConstraint(GetParticle(w+2, h), GetParticle(w,   h+2));\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\n~CCloth(){}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einline Vector3\u0026amp; GetPosition(int w, int h)  { return m_Particles[ h * m_Width + w ].GetPosition(); }\n\nvoid Update(float dt, CBall* ball, int iteration){\n    PODVector\u0026lt;CParticle\u0026gt;::Iterator particle;\n    for(particle = m_Particles.Begin(); particle != m_Particles.End(); particle++){\n        (*particle).Update(dt);\n    }\n    for(int i = 0; i \u0026lt; iteration; i++){\n        for(particle = m_Particles.Begin(); particle != m_Particles.End(); particle++){\n            Vector3 vec    = (*particle).GetPosition() - ball-\u0026gt;GetPosition();\n            float     length = vec.Length();\n            float     radius = ball-\u0026gt;GetRadius() * 1.4f; // fake radius\n            if (length \u0026lt; radius) {\n                (*particle).AddPosition(vec.Normalized() * (radius - length));\n            }\n        }\n        PODVector\u0026lt;CConstraint\u0026gt;::Iterator constraint;\n        for(constraint = m_Constraints.Begin(); constraint != m_Constraints.End(); constraint++){\n            (*constraint).Satisfy();\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003e/// Custom logic component for rotating a scene node.\u003cbr\u003e\nclass VerletCloth : public Model\u003cbr\u003e\n{\u003cbr\u003e\nURHO3D_OBJECT(VerletCloth, Model);\u003c/p\u003e\n\u003cp\u003epublic:\u003cbr\u003e\n/// Construct.\u003cbr\u003e\nVerletCloth(Context* context, int width = 21, int height = 21, int iteration = 5, bool updateNormal = false) :\u003cbr\u003e\nModel(context),\u003cbr\u003e\nwidth_(width),\u003cbr\u003e\nheight_(height),\u003cbr\u003e\niteration_(iteration),\u003cbr\u003e\nupdateNormal_(updateNormal),\u003cbr\u003e\ncloth_(nullptr),\u003cbr\u003e\nball_(nullptr),\u003cbr\u003e\nbuffer_(nullptr)\u003cbr\u003e\n{\u003cbr\u003e\ncloth_ = new CCloth(1.0f, 1.0f, width_, height_);\u003cbr\u003e\nball_ = new CBall(0.05f);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    CreateScratchModel();\n    \n    buffer_ = GetGeometry(0, 0)-\u0026gt;GetVertexBuffer(0);\n\n    // Subscribe HandleUpdate() function for processing update events\n    SubscribeToEvent(E_UPDATE, URHO3D_HANDLER(VerletCloth, HandleUpdate));\n}\n\nvirtual ~VerletCloth()\n{\n    if (cloth_) {\n        delete cloth_;\n        cloth_ = nullptr;\n    }\n    if (ball_) {\n        delete ball_;\n        ball_ = nullptr;\n    }\n    buffer_ = nullptr;\n}\n\nvoid HandleUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n    using namespace Update;\n    \n    // Take the frame time step, which is stored as a float\n    float timeStep = 0.0333333333f;//eventData[P_TIMESTEP].GetFloat();\n    \n    cloth_-\u0026gt;Update(timeStep, ball_, iteration_);\n    ball_-\u0026gt;Update(timeStep);\n    \n    float* vertexData = (float*)buffer_-\u0026gt;Lock(0, buffer_-\u0026gt;GetVertexCount());\n    if (vertexData)\n    {\n        // Update vertices\n        for (int w=0; w\u0026lt;width_; w++) {\n            for (int h=0; h\u0026lt;height_; h++) {\n                Vector3\u0026amp; src = cloth_-\u0026gt;GetPosition(w, h);\n                Vector3\u0026amp; dest = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w) * 8);\n                dest = src;\n            }\n        }\n        // Update normals\n        if (updateNormal_) {\n            for (int w=0; w\u0026lt;width_; w++) {\n                for (int h=0; h\u0026lt;height_; h++) {\n                    Vector3 n1, n2, n3, n4, n5, n6;\n                    // Detect surrounding triangles\n                    if (w-1\u0026gt;0 \u0026amp;\u0026amp; h-1\u0026gt;0) {\n                        Vector3\u0026amp; v1 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w - 1) * 8);\n                        Vector3\u0026amp; v2 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + ((h - 1) * width_ + w - 1) * 8);\n                        Vector3\u0026amp; v3 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w) * 8);\n                        n1 = (v2 - v1).CrossProduct(v3 - v2).Normalized();\n                    }\n                    if (w-1\u0026gt;0 \u0026amp;\u0026amp; h-1\u0026gt;0) {\n                        Vector3\u0026amp; v1 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + ((h - 1) * width_ + w - 1) * 8);\n                        Vector3\u0026amp; v2 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + ((h - 1) * width_ + w) * 8);\n                        Vector3\u0026amp; v3 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w) * 8);\n                        n2 = (v2 - v1).CrossProduct(v3 - v2).Normalized();\n                    }\n                    if (w+1\u0026lt;width_ \u0026amp;\u0026amp; h-1\u0026gt;0) {\n                        Vector3\u0026amp; v1 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + ((h - 1) * width_ + w) * 8);\n                        Vector3\u0026amp; v2 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w + 1) * 8);\n                        Vector3\u0026amp; v3 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w) * 8);\n                        n3 = (v2 - v1).CrossProduct(v3 - v2).Normalized();\n                    }\n                    if (w+1\u0026lt;width_ \u0026amp;\u0026amp; h+1\u0026lt;height_) {\n                        Vector3\u0026amp; v1 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w + 1) * 8);\n                        Vector3\u0026amp; v2 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + ((h + 1) * width_ + w + 1) * 8);\n                        Vector3\u0026amp; v3 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w) * 8);\n                        n4 = (v2 - v1).CrossProduct(v3 - v2).Normalized();\n                    }\n                    if (w+1\u0026lt;width_ \u0026amp;\u0026amp; h+1\u0026lt;height_) {\n                        Vector3\u0026amp; v1 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + ((h + 1) * width_ + w + 1) * 8);\n                        Vector3\u0026amp; v2 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + ((h + 1) * width_ + w) * 8);\n                        Vector3\u0026amp; v3 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w) * 8);\n                        n5 = (v2 - v1).CrossProduct(v3 - v2).Normalized();\n                    }\n                    if (w-1\u0026gt;0 \u0026amp;\u0026amp; h+1\u0026lt;height_) {\n                        Vector3\u0026amp; v1 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + ((h + 1) * width_ + w) * 8);\n                        Vector3\u0026amp; v2 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w - 1) * 8);\n                        Vector3\u0026amp; v3 = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w) * 8);\n                        n6 = (v2 - v1).CrossProduct(v3 - v2).Normalized();\n                    }\n                    Vector3\u0026amp; n = *reinterpret_cast\u0026lt;Vector3*\u0026gt;(vertexData + (h * width_ + w) * 8 + 3);\n                    // Average surrounding normals\n                    n = (n1 + n2 + n3 + n4 + n5 + n6).Normalized();\n                }\n            }\n        }\n        \n        buffer_-\u0026gt;Unlock();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eprivate:\u003cbr\u003e\nvoid CreateScratchModel()\u003cbr\u003e\n{\u003cbr\u003e\nconst unsigned numVertices = width_ * height_;\u003cbr\u003e\nconst unsigned numIndices = (width_-1) * (height_-1) * 6;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    float* vertexData = new float[numVertices * 8];\n    memset(vertexData, 0, numVertices * 8 * sizeof(float));\n    // Fill vertex buffer\n    for (int w=0; w\u0026lt;width_; w++) {\n        for (int h=0; h\u0026lt;height_; h++) {\n            // Vertex\n            vertexData[(h * width_ + w) * 8    ] = (float)w / (float)(width_ - 1) - 0.5f;\n            vertexData[(h * width_ + w) * 8 + 1] = -(float)h / (float)(height_ - 1) + 0.5f;\n            vertexData[(h * width_ + w) * 8 + 2] = 0.0f;\n            // Normal\n            vertexData[(h * width_ + w) * 8 + 3] = 0.0f;\n            vertexData[(h * width_ + w) * 8 + 4] = 0.0f;\n            vertexData[(h * width_ + w) * 8 + 5] = -1.0f;\n            // UV\n            vertexData[(h * width_ + w) * 8 + 6] = (float)w / (float)(width_ - 1);\n            vertexData[(h * width_ + w) * 8 + 7] = (float)h / (float)(height_ - 1);\n        }\n    }\n\n    unsigned short* indexData = new unsigned short[numIndices];\n    memset(indexData, 0, numIndices * sizeof(unsigned short));\n    // Fill index buffer\n    for (int w=0; w\u0026lt;width_-1; w++) {\n        for (int h=0; h\u0026lt;height_-1; h++) {\n            // Triangle one, clockwise order.\n            indexData[(h * (width_ - 1) + w) * 6    ] = h * width_ + w;\n            indexData[(h * (width_ - 1) + w) * 6 + 1] = h * width_ + w + 1;\n            indexData[(h * (width_ - 1) + w) * 6 + 2] = (h + 1) * width_ + w + 1;\n            // Triangle two, clockwise order.\n            indexData[(h * (width_ - 1) + w) * 6 + 3] = h * width_ + w;\n            indexData[(h * (width_ - 1) + w) * 6 + 4] = (h + 1) * width_ + w + 1;\n            indexData[(h * (width_ - 1) + w) * 6 + 5] = (h + 1) * width_ + w;\n        }\n    }\n    \n    SharedPtr\u0026lt;VertexBuffer\u0026gt; vb(new VertexBuffer(context_));\n    SharedPtr\u0026lt;IndexBuffer\u0026gt; ib(new IndexBuffer(context_));\n    SharedPtr\u0026lt;Geometry\u0026gt; geom(new Geometry(context_));\n    \n    // Shadowed buffer needed for raycasts to work, and so that data can be automatically restored on device loss\n    vb-\u0026gt;SetShadowed(true);\n    // We could use the \"legacy\" element bitmask to define elements for more compact code, but let's demonstrate\n    // defining the vertex elements explicitly to allow any element types and order\n    PODVector\u0026lt;VertexElement\u0026gt; elements;\n    elements.Push(VertexElement(TYPE_VECTOR3, SEM_POSITION));\n    elements.Push(VertexElement(TYPE_VECTOR3, SEM_NORMAL));\n    elements.Push(VertexElement(TYPE_VECTOR2, SEM_TEXCOORD));\n    vb-\u0026gt;SetSize(numVertices, elements);\n    vb-\u0026gt;SetData(vertexData);\n    \n    ib-\u0026gt;SetShadowed(true);\n    ib-\u0026gt;SetSize(numIndices, false);\n    ib-\u0026gt;SetData(indexData);\n    \n    geom-\u0026gt;SetVertexBuffer(0, vb);\n    geom-\u0026gt;SetIndexBuffer(ib);\n    geom-\u0026gt;SetDrawRange(TRIANGLE_LIST, 0, numIndices);\n    \n    SetNumGeometries(1);\n    SetGeometry(0, 0, geom);\n    SetBoundingBox(BoundingBox(Vector3(-0.5f, -0.5f, 0.0f), Vector3(0.5f, 0.5f, 0.0f)));\n    \n    delete [] vertexData;\n    delete [] indexData;\n}\n\nint width_;\nint height_;\nint iteration_;\nbool updateNormal_;\nCCloth* cloth_;\nCBall* ball_;\nVertexBuffer* buffer_;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003cbr\u003e\n[/code]\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T01:14:33.634Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":65,"reads":33,"readers_count":32,"score":350.6,"yours":false,"topic_id":2295,"topic_slug":"verlet-cloth-simulation","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/nnkgw/verlet_cloth","internal":false,"reflection":false,"title":"GitHub - nnkgw/verlet_cloth: cloth simulation using verlet integration","clicks":37}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":546,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":13904,"name":"Jimmy Gass","username":"ghidra","avatar_template":"/user_avatar/discourse.urho3d.io/ghidra/{size}/69_2.png","created_at":"2016-10-05T15:51:12.000Z","cooked":"\u003cp\u003eNice one!\u003cbr\u003e\nCould I pester you for a short video showing the verlet effect running in engine?\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-01-02T01:14:34.188Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":27,"readers_count":26,"score":5.4,"yours":false,"topic_id":2295,"topic_slug":"verlet-cloth-simulation","display_username":"Jimmy Gass","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":109,"hidden":false,"trust_level":3,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":13918,"name":"","username":"artgolf1000","avatar_template":"/user_avatar/discourse.urho3d.io/artgolf1000/{size}/73_2.png","created_at":"2016-10-06T02:28:15.000Z","cooked":"\u003cp\u003eI have just uploaded a short video: \u003ca href=\"https://youtu.be/zIpupeSpXl4\" data-bbcode=\"true\" rel=\"nofollow noopener\"\u003ehttps://youtu.be/zIpupeSpXl4\u003c/a\u003e\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2017-01-02T01:14:35.136Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":26,"readers_count":25,"score":10.2,"yours":false,"topic_id":2295,"topic_slug":"verlet-cloth-simulation","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://youtu.be/zIpupeSpXl4","internal":false,"reflection":false,"title":"Verlet Cloth in Urho3D - YouTube","clicks":62}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":546,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":14027,"name":"","username":"rasteron","avatar_template":"/user_avatar/discourse.urho3d.io/rasteron/{size}/55_2.png","created_at":"2016-10-11T07:21:54.000Z","cooked":"\u003cp\u003eI’m always fascinated in anything Verlet Physics, so great job! …and just in time for the coming holiday season!   \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/bulb.png?v=5\" title=\":bulb:\" class=\"emoji\" alt=\":bulb:\"\u003e\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2017-01-02T01:14:43.403Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":27,"readers_count":26,"score":5.4,"yours":false,"topic_id":2295,"topic_slug":"verlet-cloth-simulation","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":54,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[13896,13904,13918,14027]},"timeline_lookup":[[1,2240],[3,2239],[4,2234]],"suggested_topics":[{"id":7099,"title":":fallen_leaf: Polynomials \u0026 Harmonics","fancy_title":":fallen_leaf: Polynomials \u0026amp; Harmonics","slug":"polynomials-harmonics","posts_count":6,"reply_count":0,"highest_post_number":7,"image_url":null,"created_at":"2021-12-13T05:06:04.641Z","last_posted_at":"2021-12-27T23:27:39.489Z","bumped":true,"bumped_at":"2021-12-27T23:27:39.489Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🍂 Polynomials \u0026 Harmonics","tags_descriptions":{},"like_count":6,"views":392,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]},{"id":7103,"title":":test_tube: DebugRenderer as GUI","fancy_title":":test_tube: DebugRenderer as GUI","slug":"debugrenderer-as-gui","posts_count":4,"reply_count":1,"highest_post_number":4,"image_url":null,"created_at":"2021-12-17T02:25:06.606Z","last_posted_at":"2021-12-18T01:09:27.738Z","bumped":true,"bumped_at":"2021-12-18T01:09:27.738Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🧪 DebugRenderer as GUI","tags_descriptions":{},"like_count":4,"views":267,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":861,"username":"GodMan","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]},{"id":7110,"title":"Resource fetch define","fancy_title":"Resource fetch define","slug":"resource-fetch-define","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2021-12-27T12:28:55.126Z","last_posted_at":"2021-12-27T17:00:37.699Z","bumped":true,"bumped_at":"2021-12-27T17:00:37.699Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":7,"views":184,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":1304,"username":"lebrewer","name":"lebrewer","avatar_template":"/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]},{"id":7120,"title":"Log Error Once Macro","fancy_title":"Log Error Once Macro","slug":"log-error-once-macro","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-01-04T02:24:37.857Z","last_posted_at":"2022-01-04T02:24:37.925Z","bumped":true,"bumped_at":"2022-01-04T02:24:37.925Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":3,"views":143,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7122,"title":"Faster allocations with PMR","fancy_title":"Faster allocations with PMR","slug":"faster-allocations-with-pmr","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2022-01-10T16:23:15.053Z","last_posted_at":"2022-01-10T16:42:29.752Z","bumped":true,"bumped_at":"2022-01-10T17:55:02.117Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":209,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":1363,"username":"vmost","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/v/5f9b8f/{size}.png"}}]}],"tags_descriptions":{},"id":2295,"title":"Verlet Cloth Simulation","fancy_title":"Verlet Cloth Simulation","posts_count":4,"created_at":"2016-10-05T08:04:21.000Z","views":826,"reply_count":0,"like_count":1,"last_posted_at":"2016-10-11T07:21:54.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"verlet-cloth-simulation","category_id":13,"word_count":1642,"deleted_at":null,"user_id":546,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_2295","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":4,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":3,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":546,"username":"artgolf1000","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/artgolf1000/{size}/73_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":54,"username":"rasteron","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/rasteron/{size}/55_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":109,"username":"ghidra","name":"Jimmy Gass","avatar_template":"/user_avatar/discourse.urho3d.io/ghidra/{size}/69_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":3}],"created_by":{"id":546,"username":"artgolf1000","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/artgolf1000/{size}/73_2.png"},"last_poster":{"id":54,"username":"rasteron","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/rasteron/{size}/55_2.png"},"links":[{"url":"https://youtu.be/zIpupeSpXl4","title":"Verlet Cloth in Urho3D - YouTube","internal":false,"attachment":false,"reflection":false,"clicks":62,"user_id":546,"domain":"youtu.be","root_domain":"youtu.be"},{"url":"https://github.com/nnkgw/verlet_cloth","title":"GitHub - nnkgw/verlet_cloth: cloth simulation using verlet integration","internal":false,"attachment":false,"reflection":false,"clicks":37,"user_id":546,"domain":"github.com","root_domain":"github.com"}]}}