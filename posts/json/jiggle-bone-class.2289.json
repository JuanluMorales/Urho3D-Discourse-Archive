{"post_stream":{"posts":[{"id":13866,"name":"","username":"artgolf1000","avatar_template":"/user_avatar/discourse.urho3d.io/artgolf1000/{size}/73_2.png","created_at":"2016-10-02T23:42:14.000Z","cooked":"\u003cp\u003eHi,\u003c/p\u003e\n\u003cp\u003eI’ve made the jiggle bone class work in Urho3D 1.6, it can be used to control bouncy breast dynamics, hair, etc.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003econtext-\u0026gt;RegisterFactory\u0026lt;JiggleBone\u0026gt;();\nmodelObject-\u0026gt;GetSkeleton().GetBone(\"Hair\")-\u0026gt;animated_=false;\nmodelNode-\u0026gt;GetChild(\"Hair\", true)-\u0026gt;CreateComponent\u0026lt;JiggleBone\u0026gt;();\n\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e[code]\u003cspan class=\"hashtag\"\u003e#pragma\u003c/span\u003e once\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;Urho3D/Urho3DAll.h\u0026gt;\u003c/p\u003e\n\u003cp\u003e/*\u003cbr\u003e\nPort of \u003ca href=\"http://wiki.unity3d.com/index.php?title=JiggleBone\" rel=\"nofollow noopener\"\u003ehttp://wiki.unity3d.com/index.php?title=JiggleBone\u003c/a\u003e\u003cbr\u003e\nto Urho3D\u003cbr\u003e\n*/\u003c/p\u003e\n\u003cp\u003enamespace Urho3D\u003cbr\u003e\n{\u003cbr\u003e\nextern const char* PHYSICS_CATEGORY;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/// Custom logic component for rotating a scene node.\nclass JiggleBone : public LogicComponent\n{\n    URHO3D_OBJECT(JiggleBone, LogicComponent);\n    \npublic:\n    /// Construct.\n    JiggleBone(Context* context) :\n    LogicComponent(context),\n    boneAxis_(Vector3(0, 1, 0)),\n    targetDistance_(2.0f),\n    stiffness_(0.05f),\n    mass_(0.9f),\n    damping_(0.75f),\n    gravity_(1.25f),\n    squashAndStretch_(false),\n    sideStretch_(0.15f),\n    frontStretch_(0.2f),\n    drawDebug_(false)\n    {\n        // Only the scene post update event is needed: unsubscribe from the rest for optimization\n        SetUpdateEventMask(USE_POSTUPDATE);\n    }\n    \n    virtual ~JiggleBone() {}\n\n    static void RegisterObject(Context* context)\n    {\n        context-\u0026gt;RegisterFactory\u0026lt;JiggleBone\u0026gt;(PHYSICS_CATEGORY);\n        \n        URHO3D_COPY_BASE_ATTRIBUTES(LogicComponent);\n        URHO3D_ACCESSOR_ATTRIBUTE(\"Is Enabled\", IsEnabled, SetEnabled, bool, true, AM_DEFAULT);\n        URHO3D_ATTRIBUTE(\"Bone Axis\", Vector3, boneAxis_, Vector3(0, 0, 1), AM_DEFAULT);\n        \n        URHO3D_ATTRIBUTE(\"Stiffness\", float, stiffness_, 0.1f, AM_DEFAULT);\n        URHO3D_ATTRIBUTE(\"Mass\", float, mass_, 0.9f, AM_DEFAULT);\n        URHO3D_ATTRIBUTE(\"Damping\", float, damping_, 0.75f, AM_DEFAULT);\n        URHO3D_ATTRIBUTE(\"Gravity\", float, gravity_, 0.75f, AM_DEFAULT);\n        \n        URHO3D_ATTRIBUTE(\"Allow Stretch\", bool, squashAndStretch_, true, AM_DEFAULT);\n        URHO3D_ATTRIBUTE(\"Side Stretch\", float, sideStretch_, 0.15f, AM_DEFAULT);\n        URHO3D_ATTRIBUTE(\"Front Stretch\", float, frontStretch_, 0.15f, AM_DEFAULT);\n    }\n    \n    /// Called when the component is added to a scene node. Other components may not yet exist.\n    virtual void DelayedStart()\n    {\n        Vector3 forwardVector = GetNode()-\u0026gt;GetWorldUp() * targetDistance_;\n        targetPos_ = GetNode()-\u0026gt;GetWorldPosition() + forwardVector;\n        dynamicPos_ = targetPos_;\n    }\n    \n    virtual void PostUpdate(float timeStep)\n    {\n        if (IsEnabledEffective())\n        {\n            // Reset the bone rotation so we can recalculate the upVector and forwardVector\n            GetNode()-\u0026gt;SetRotation(Quaternion());\n\n            // Update forwardVector and upVector\n            Vector3 forwardVector = GetNode()-\u0026gt;GetWorldUp() * targetDistance_;\n            \n            // Calculate target position\n            targetPos_ = GetNode()-\u0026gt;GetWorldPosition() + forwardVector;\n            \n            // Calculate force, acceleration, and velocity per X, Y and Z\n            force_.x_ = (targetPos_.x_ - dynamicPos_.x_) * stiffness_;\n            acc_.x_ = force_.x_ / mass_;\n            vel_.x_ += acc_.x_ * (1 - damping_);\n            \n            force_.y_ = (targetPos_.y_ - dynamicPos_.y_) * stiffness_;\n            force_.y_ -= gravity_ * 0.1f; // Add some gravity\n            acc_.y_ = force_.y_ / mass_;\n            vel_.y_ += acc_.y_ * (1 - damping_);\n            \n            force_.z_ = (targetPos_.z_ - dynamicPos_.z_) * stiffness_;\n            acc_.z_ = force_.z_ / mass_;\n            vel_.z_ += acc_.z_ * (1 - damping_);\n            \n            // Update dynamic postion\n            dynamicPos_ += vel_ + force_;\n            \n            // Set bone rotation to look at dynamicPos\n            GetNode()-\u0026gt;LookAt(dynamicPos_, GetNode()-\u0026gt;GetWorldUp());\n            GetNode()-\u0026gt;Rotate(Quaternion(90.0f, 0.0f, 0.0f));\n            \n            // ==================================================\n            // Squash and Stretch section\n            // ==================================================\n            if (squashAndStretch_){\n                // Create a vector from target position to dynamic position\n                // We will measure the magnitude of the vector to determine\n                // how much squash and stretch we will apply\n                Vector3 dynamicVec = dynamicPos_ - targetPos_;\n                \n                // Get the magnitude of the vector\n                float stretchMag = dynamicVec.Length();\n                \n                // Here we determine the amount of squash and stretch based on stretchMag\n                // and the direction the Bone Axis is pointed in. Ideally there should be\n                // a vector with two values at 0 and one at 1. Like Vector3(0,0,1)\n                // for the 0 values, we assume those are the sides, and 1 is the direction\n                // the bone is facing\n                float xStretch;\n                if (boneAxis_.x_ == 0)\n                    xStretch = 1 + (-stretchMag * sideStretch_);\n                else\n                    xStretch = 1 + (stretchMag * frontStretch_);\n                \n                float yStretch;\n                if (boneAxis_.y_ == 0)\n                    yStretch = 1 + (-stretchMag * sideStretch_);\n                else\n                    yStretch = 1 + (stretchMag * frontStretch_);\n                \n                float zStretch;\n                if (boneAxis_.z_ == 0)\n                    zStretch = 1 + (-stretchMag * sideStretch_);\n                else\n                    zStretch = 1 + (stretchMag * frontStretch_);\n                \n                // Set the bone scale\n                GetNode()-\u0026gt;SetScale(Vector3(xStretch, yStretch, zStretch));\n            }\n            \n            if (drawDebug_) {\n                DebugRenderer* debug = GetScene()-\u0026gt;GetComponent\u0026lt;DebugRenderer\u0026gt;();\n                DrawDebugGeometry(debug, false);\n            }\n        }\n    }\n    \n    virtual void DrawDebugGeometry(DebugRenderer* debug, bool depthTest)\n    {\n        if (debug \u0026amp;\u0026amp; IsEnabledEffective())\n        {\n            // draw forward line\n            debug-\u0026gt;AddLine(GetNode()-\u0026gt;GetWorldPosition(),\n                           GetNode()-\u0026gt;GetWorldPosition() + GetNode()-\u0026gt;GetWorldDirection() * targetDistance_,\n                           Color(0, 0, 1), false);\n            // draw the up vector\n            debug-\u0026gt;AddLine(GetNode()-\u0026gt;GetWorldPosition(),\n                           GetNode()-\u0026gt;GetWorldPosition() + GetNode()-\u0026gt;GetWorldUp() * (targetDistance_ * 0.5f),\n                           Color(0, 1, 0), false);\n            // draw the target position\n            debug-\u0026gt;AddLine(targetPos_,\n                           Vector3::UP * (targetDistance_ * 0.2f),\n                           Color(1, 1, 0), false);\n            // draw the dynamic position\n            debug-\u0026gt;AddLine(dynamicPos_,\n                           Vector3::UP * (targetDistance_ * 0.2f),\n                           Color(1, 0, 0), false);\n        }\n    }\n    \nprivate:\n    Vector3 boneAxis_;\n    float targetDistance_;\n    float stiffness_;\n    float mass_;\n    float damping_;\n    float gravity_;\n    bool squashAndStretch_;\n    float sideStretch_;\n    float frontStretch_;\n    Vector3 targetPos_;\n    Vector3 dynamicPos_;\n    Vector3 force_;\n    Vector3 acc_;\n    Vector3 vel_;\n    bool drawDebug_;\n};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003cbr\u003e\n[/code]\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T01:14:31.567Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":72,"reads":11,"readers_count":10,"score":364.2,"yours":false,"topic_id":2289,"topic_slug":"jiggle-bone-class","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://wiki.unity3d.com/index.php?title=JiggleBone","internal":false,"reflection":false,"title":"JiggleBone - Unify Community Wiki","clicks":13}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":546,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":13869,"name":"","username":"1vanK","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png","created_at":"2016-10-03T01:33:44.000Z","cooked":"\u003cp\u003eThank you, very useful\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-01-02T01:14:31.792Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":12,"readers_count":11,"score":2.4,"yours":false,"topic_id":2289,"topic_slug":"jiggle-bone-class","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":263,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[13866,13869]},"timeline_lookup":[[1,2242]],"suggested_topics":[{"id":7103,"title":":test_tube: DebugRenderer as GUI","fancy_title":":test_tube: DebugRenderer as GUI","slug":"debugrenderer-as-gui","posts_count":4,"reply_count":1,"highest_post_number":4,"image_url":null,"created_at":"2021-12-17T02:25:06.606Z","last_posted_at":"2021-12-18T01:09:27.738Z","bumped":true,"bumped_at":"2021-12-18T01:09:27.738Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🧪 DebugRenderer as GUI","tags_descriptions":{},"like_count":4,"views":267,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":861,"username":"GodMan","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]},{"id":7110,"title":"Resource fetch define","fancy_title":"Resource fetch define","slug":"resource-fetch-define","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2021-12-27T12:28:55.126Z","last_posted_at":"2021-12-27T17:00:37.699Z","bumped":true,"bumped_at":"2021-12-27T17:00:37.699Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":7,"views":184,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":1304,"username":"lebrewer","name":"lebrewer","avatar_template":"/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]},{"id":7120,"title":"Log Error Once Macro","fancy_title":"Log Error Once Macro","slug":"log-error-once-macro","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-01-04T02:24:37.857Z","last_posted_at":"2022-01-04T02:24:37.925Z","bumped":true,"bumped_at":"2022-01-04T02:24:37.925Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":3,"views":143,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7099,"title":":fallen_leaf: Polynomials \u0026 Harmonics","fancy_title":":fallen_leaf: Polynomials \u0026amp; Harmonics","slug":"polynomials-harmonics","posts_count":6,"reply_count":0,"highest_post_number":7,"image_url":null,"created_at":"2021-12-13T05:06:04.641Z","last_posted_at":"2021-12-27T23:27:39.489Z","bumped":true,"bumped_at":"2021-12-27T23:27:39.489Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🍂 Polynomials \u0026 Harmonics","tags_descriptions":{},"like_count":6,"views":392,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]},{"id":7328,"title":"Any Expense if Setting AnimationState.Time to Previous Value?","fancy_title":"Any Expense if Setting AnimationState.Time to Previous Value?","slug":"any-expense-if-setting-animationstate-time-to-previous-value","posts_count":5,"reply_count":2,"highest_post_number":5,"image_url":null,"created_at":"2022-09-19T17:51:43.462Z","last_posted_at":"2022-09-22T11:28:01.861Z","bumped":true,"bumped_at":"2022-09-22T11:28:01.861Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":115,"category_id":7,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1456,"username":"Jens","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/j/d2c977/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]}],"tags_descriptions":{},"id":2289,"title":"Jiggle Bone Class","fancy_title":"Jiggle Bone Class","posts_count":2,"created_at":"2016-10-02T23:42:14.000Z","views":809,"reply_count":0,"like_count":0,"last_posted_at":"2016-10-03T01:33:44.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"jiggle-bone-class","category_id":13,"word_count":672,"deleted_at":null,"user_id":546,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_2289","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":2,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":2,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"moderator":true,"trust_level":4},{"id":546,"username":"artgolf1000","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/artgolf1000/{size}/73_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2}],"created_by":{"id":546,"username":"artgolf1000","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/artgolf1000/{size}/73_2.png"},"last_poster":{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"},"links":[{"url":"http://wiki.unity3d.com/index.php?title=JiggleBone","title":"JiggleBone - Unify Community Wiki","internal":false,"attachment":false,"reflection":false,"clicks":13,"user_id":546,"domain":"wiki.unity3d.com","root_domain":"unity3d.com"}]}}