{"post_stream":{"posts":[{"id":5856,"name":"","username":"Mike","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png","created_at":"2015-04-21T14:57:42.000Z","cooked":"\u003cp\u003eI’m currently experimenting a basic inverse kinematics (IK) foot placement for grounding feet on uneaven surfaces.\u003c/p\u003e\n\u003cp\u003eWhat I’d like to achieve is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eapply the animation (for real or virtually)\u003c/li\u003e\n\u003cli\u003ethen compute rotations for hip and knee joints to match the target positions (I get 4 Quaternions)\u003c/li\u003e\n\u003cli\u003ethen override the animation with the quaternions\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI’m missing the last step (applying the 4 quaternions after playing the animation has no effect). Or maybe it could be done differently?\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T01:04:47.870Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":561,"reads":28,"readers_count":27,"score":2809.6,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://discourse.urho3d.io/t/solved-custom-ik-broke-recently-was-getworld/1492/2","internal":true,"reflection":true,"title":"[SOLVED] custom IK broke recently (was GetWorld*)","clicks":2},{"url":"http://discourse.urho3d.io/t/ue4-style-ik/2021/2","internal":true,"reflection":true,"title":"UE4-style IK?","clicks":1},{"url":"http://discourse.urho3d.io/t/inverse-kinematics/1819/2","internal":true,"reflection":true,"title":"Inverse Kinematics","clicks":0}],"read":true,"user_title":"Contributor","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":9,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":5859,"name":"Lasse Öörni","username":"cadaver","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","created_at":"2015-04-22T08:22:05.000Z","cooked":"\u003cp\u003eRunning skinned animations are updated in Octree::Update(), which is done as part of the render preparation, so using postupdate is likely too early in the frame. When it’s done with the animation updates, Octree::Update() triggers the Scene to send the E_SCENEDRAWABLEUPDATEFINISHED event. Updating IK’s should be done as response to that. This is just before octree reinsertion \u0026amp; culling, so you should be able to move \u0026amp; rotate bone nodes without issues.\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-01-02T01:04:48.059Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":2,"reads":29,"readers_count":28,"score":15.8,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"Lasse Öörni","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Urho3D Author","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":3,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":5860,"name":"","username":"Mike","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png","created_at":"2015-04-22T14:42:15.000Z","cooked":"\u003cp\u003eMany thanks Cadaver, it works great now \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=5\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\"\u003e\u003cbr\u003e\nI’ll post a sample after some cleanup.\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2017-01-02T01:04:48.126Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":33,"readers_count":32,"score":11.6,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Contributor","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":9,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":5877,"name":"","username":"Mike","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png","created_at":"2015-04-23T13:46:18.000Z","cooked":"\u003cp\u003eSample lua demonstration:\u003c/p\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\nCode\u003c/summary\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003erequire \"LuaScripts/Utilities/Sample\"\nrequire \"LuaScripts/Utilities/Touch\"\n\nCTRL_FORWARD = 1\nCTRL_BACK = 2\nCTRL_LEFT = 4\nCTRL_RIGHT = 8\nlocal CTRL_JUMP = 16\n\nlocal MOVE_FORCE = 0.8\nlocal INAIR_MOVE_FORCE = 0.02\nlocal BRAKE_FORCE = 0.2\nlocal JUMP_FORCE = 7\nlocal YAW_SENSITIVITY = 0.1\nlocal INAIR_THRESHOLD_TIME = 0.1\nfirstPerson = false -- First person camera flag\n\nlocal characterNode = nil\nlocal doIK = false\n\n\nfunction Start()\n    SampleStart() -- Execute the common startup for samples\n    CreateScene() -- Create static scene content\n    CreateJack()  -- Create the controllable character\n    CreateInstructions() -- Create the UI content\n    SubscribeToEvents() -- Subscribe to necessary events\nend\n\nfunction CreateScene()\n    -- Scene\n    scene_ = Scene()\n    scene_:CreateComponent(\"Octree\")\n    physicsWorld = scene_:CreateComponent(\"PhysicsWorld\")\n    debug = scene_:CreateComponent(\"DebugRenderer\")\n\n    -- Create camera and define viewport. Camera does not necessarily have to belong to the scene\n    cameraNode = Node()\n    local camera = cameraNode:CreateComponent(\"Camera\")\n    camera.farClip = 300\n    renderer:SetViewport(0, Viewport:new(scene_, camera))\n\n    -- Create a Zone component for ambient lighting \u0026amp; fog control\n    local zoneNode = scene_:CreateChild(\"Zone\")\n    local zone = zoneNode:CreateComponent(\"Zone\")\n    zone.boundingBox = BoundingBox(-1000, 1000)\n    zone.ambientColor = Color(0.15, 0.15, 0.15)\n    zone.fogColor = Color(0.5, 0.5, 0.7)\n    zone.fogStart = 100\n    zone.fogEnd = 300\n\n    -- Create a directional light to the world. Enable cascaded shadows on it\n    local lightNode = scene_:CreateChild(\"DirectionalLight\")\n    lightNode.direction = Vector3(0.6, -1, 0.8)\n    local light = lightNode:CreateComponent(\"Light\")\n    light.lightType = LIGHT_DIRECTIONAL\n    light.castShadows = true\n    light.shadowBias = BiasParameters(0.00025, 0.5)\n    -- Set cascade splits at 10, 50 and 200 world units, fade shadows out at 80% of maximum shadow distance\n    light.shadowCascade = CascadeParameters(10, 50, 200, 0, 0.8)\n\n    -- Create the floor object\n    local floorNode = scene_:CreateChild(\"Floor\")\n    floorNode.position = Vector3(0, -0.5, 0)\n    floorNode.scale = Vector3(200, 1, 200)\n    local object = floorNode:CreateComponent(\"StaticModel\")\n    object.model = cache:GetResource(\"Model\", \"Models/Box.mdl\")\n    object.material = cache:GetResource(\"Material\", \"Materials/Stone.xml\")\n\n    local body = floorNode:CreateComponent(\"RigidBody\")\n    -- Use collision layer bit 2 to mark world scenery. This is what we will raycast against to prevent camera from going inside geometry\n    body.collisionLayer = 2\n    local shape = floorNode:CreateComponent(\"CollisionShape\")\n    shape:SetBox(Vector3(1, 1, 1))\n\n    -- Create mushrooms of varying sizes\n    local NUM_MUSHROOMS = 60\n    for i = 1, NUM_MUSHROOMS do\n        local objectNode = scene_:CreateChild(\"Mushroom\")\n        objectNode.position = Vector3(Random(180) - 90, 0, Random(180) - 90)\n        objectNode.rotation = Quaternion(0, Random(360), 0)\n        objectNode:SetScale(2 + Random(5))\n        local object = objectNode:CreateComponent(\"StaticModel\")\n        object.model = cache:GetResource(\"Model\", \"Models/Mushroom.mdl\")\n        object.material = cache:GetResource(\"Material\", \"Materials/Mushroom.xml\")\n        object.castShadows = true\n\n        local body = objectNode:CreateComponent(\"RigidBody\")\n        body.collisionLayer = 2\n        local shape = objectNode:CreateComponent(\"CollisionShape\")\n        shape:SetTriangleMesh(object.model, 0)\n    end\n\n    -- Create movable boxes. Let them fall from the sky at first\n    local NUM_BOXES = 100\n    for i = 1, NUM_BOXES do\n        local scale = Random(2) + 0.5\n\n        local objectNode = scene_:CreateChild(\"Box\")\n        objectNode.position = Vector3(Random(180) - 90, Random(10) + 10, Random(180) - 90)\n        objectNode.rotation = Quaternion(Random(360), Random(360), Random(360))\n        objectNode:SetScale(scale)\n        local object = objectNode:CreateComponent(\"StaticModel\")\n        object.model = cache:GetResource(\"Model\", \"Models/Box.mdl\")\n        object.material = cache:GetResource(\"Material\", \"Materials/Stone.xml\")\n        object.castShadows = true\n\n        local body = objectNode:CreateComponent(\"RigidBody\")\n        body.collisionLayer = 2\n        -- Bigger boxes will be heavier and harder to move\n        body.mass = scale * 2\n        local shape = objectNode:CreateComponent(\"CollisionShape\")\n        shape:SetBox(Vector3(1, 1, 1))\n    end\nend\n\nfunction CreateJack()\n    characterNode = scene_:CreateChild(\"Jack\")\n\n    -- Create the rendering component + animation controller\n    local object = characterNode:CreateComponent(\"AnimatedModel\")\n    object.model = cache:GetResource(\"Model\", \"Models/Jack.mdl\")\n    object.material = cache:GetResource(\"Material\", \"Materials/Jack.xml\")\n    object.castShadows = true\n    characterNode:CreateComponent(\"AnimationController\")\n\n    -- Create rigidbody, and set non-zero mass so that the body becomes dynamic\n    local body = characterNode:CreateComponent(\"RigidBody\")\n    body.collisionLayer = 1\n    body.mass = 1\n\n    -- Set zero angular factor so that physics doesn't turn the character on its own.\n    -- Instead we will control the character yaw manually\n    body.angularFactor = Vector3(0, 0, 0)\n\n    -- Set the rigidbody to signal collision also when in rest, so that we get ground collisions properly\n    body.collisionEventMode = COLLISION_ALWAYS\n\n    -- Set a capsule shape for collision\n    local shape = characterNode:CreateComponent(\"CollisionShape\")\n    shape:SetCapsule(0.7, 1.8, Vector3(0, 0.9, 0))\n\n    -- Create the character logic object, which takes care of steering the rigidbody\n    characterNode:CreateScriptObject(\"Character\")\n\n    -- Create IK chains\n    CreateIKChains()\nend\n\nfunction CreateInstructions()\n    -- Construct new Text object, set string to display and font to use\n    local instructionText = ui.root:CreateChild(\"Text\")\n    instructionText.text = \"Use directional keys and mouse to move\\n\"..\"Space to jump, F to toggle 1st/3rd person\\n\"..\"F5 to save scene, F7 to load\"\n    instructionText:SetFont(cache:GetResource(\"Font\", \"Fonts/Anonymous Pro.ttf\"), 15)\n    instructionText.textAlignment = HA_CENTER\n    instructionText.horizontalAlignment = HA_CENTER\n    instructionText.verticalAlignment = VA_CENTER\n    instructionText:SetPosition(0, ui.root.height / 4)\nend\n\nfunction SubscribeToEvents()\n    SubscribeToEvent(\"Update\", \"HandleUpdate\") -- Subscribe to Update event for setting the character controls before physics simulation\n    SubscribeToEvent(\"PostUpdate\", \"HandlePostUpdate\") -- Subscribe to PostUpdate event for updating the camera position after physics simulation\n    UnsubscribeFromEvent(\"SceneUpdate\") -- Unsubscribe the SceneUpdate event from base class as the camera node is being controlled in HandlePostUpdate() in this sample\n    SubscribeToEvent(\"SceneDrawableUpdateFinished\", \"HandleSceneDrawableUpdateFinished\") -- Subscribe to the SceneDrawableUpdateFinished event which is triggered after the animations have been updated so we can apply IK to override them\n\tSubscribeToEvent(\"PostRenderUpdate\", \"HandlePostRenderUpdate\") -- Process post-render update event, during which we request debug geometry\nend\n\nfunction HandleUpdate(eventType, eventData)\n    if characterNode == nil then return end\n\n    local character = characterNode:GetScriptObject()\n    if character == nil then return end\n\n    -- Clear previous controls\n    character.controls:Set(CTRL_FORWARD + CTRL_BACK + CTRL_LEFT + CTRL_RIGHT + CTRL_JUMP, false)\n\n    -- Update controls using touch utility\n    if touchEnabled then UpdateTouches(character.controls) end\n\n    -- Update controls using keys\n    if ui.focusElement == nil then\n        if not touchEnabled or not useGyroscope then\n            if input:GetKeyDown(KEY_UP) then character.controls:Set(CTRL_FORWARD, true) end\n            if input:GetKeyDown(KEY_DOWN) then character.controls:Set(CTRL_BACK, true) end\n            if input:GetKeyDown(KEY_LEFT) then character.controls:Set(CTRL_LEFT, true) end\n            if input:GetKeyDown(KEY_RIGHT) then character.controls:Set(CTRL_RIGHT, true) end\n        end\n        if input:GetKeyDown(KEY_SPACE) then character.controls:Set(CTRL_JUMP, true) end\n\n        -- Add character yaw \u0026amp; pitch from the mouse motion or touch input\n        if touchEnabled then\n            for i=0, input.numTouches - 1 do\n                local state = input:GetTouch(i)\n                if not state.touchedElement then -- Touch on empty space\n                    local camera = cameraNode:GetComponent(\"Camera\")\n                    if not camera then return end\n\n                    character.controls.yaw = character.controls.yaw + TOUCH_SENSITIVITY * camera.fov / graphics.height * state.delta.x\n                    character.controls.pitch = character.controls.pitch + TOUCH_SENSITIVITY * camera.fov / graphics.height * state.delta.y\n                end\n            end\n        else\n            character.controls.yaw = character.controls.yaw + input.mouseMoveX * YAW_SENSITIVITY\n            character.controls.pitch = character.controls.pitch + input.mouseMoveY * YAW_SENSITIVITY\n        end\n        -- Limit pitch\n        character.controls.pitch = Clamp(character.controls.pitch, -80, 80)\n\n        -- Switch between 1st and 3rd person\n        if input:GetKeyPress(KEY_F) then firstPerson = not firstPerson end\n\n        -- Turn on/off gyroscope on mobile platform\n        if input:GetKeyPress(KEY_G) then useGyroscope = not useGyroscope end\n\n        -- Check for loading / saving the scene\n        if input:GetKeyPress(KEY_F5) then scene_:SaveXML(fileSystem:GetProgramDir()..\"Data/Scenes/CharacterDemo.xml\") end\n        if input:GetKeyPress(KEY_F7) then\n            scene_:LoadXML(fileSystem:GetProgramDir()..\"Data/Scenes/CharacterDemo.xml\")\n            -- After loading we have to reacquire the character scene node, as it has been recreated\n            -- Simply find by name as there's only one of them\n            characterNode = scene_:GetChild(\"Jack\", true)\n            if characterNode == nil then return end\n        end\n    end\n\n    -- Set rotation already here so that it's updated every rendering frame instead of every physics frame\n    characterNode.rotation = Quaternion(character.controls.yaw, Vector3.UP)\n\n\t-- Toggle debug geometry with 'Q'\n\tif input:GetKeyPress(KEY_Q) then drawDebug = not drawDebug end\nend\n\nfunction HandlePostRenderUpdate(eventType, eventData)\n\tif drawDebug then scene_:GetComponent(\"PhysicsWorld\"):DrawDebugGeometry(true) end -- Draw physics debug geometry. Use depth test to make the result easier to interpret\nend\n\nfunction HandlePostUpdate(eventType, eventData)\n    if characterNode == nil then return end\n\n    local character = characterNode:GetScriptObject()\n    if character == nil then return end\n\n    -- Get camera lookat dir from character yaw + pitch\n    local rot = characterNode.rotation\n    local dir = rot * Quaternion(character.controls.pitch, Vector3(1, 0, 0))\n\n    if firstPerson then\n        -- First person camera: position to the head bone + offset slightly forward \u0026amp; up\n        cameraNode.position = headNode.worldPosition + rot * Vector3(0, 0.15, 0.2)\n        cameraNode.rotation = dir\n    else\n        -- Third person camera: position behind the character\n        local aimPoint = characterNode.position + rot * Vector3(0, 1.7, 0) -- You can modify x Vector3 value to translate the fixed character position (indicative range[-2;2])\n\n        -- Collide camera ray with static physics objects (layer bitmask 2) to ensure we see the character properly\n        local rayDir = dir * Vector3.BACK -- For indoor scenes you can use dir * Vector3(0, 0, -0.5) to prevent camera from crossing the walls\n        local rayDistance = cameraDistance\n        local result = scene_:GetComponent(\"PhysicsWorld\"):RaycastSingle(Ray(aimPoint, rayDir), rayDistance, 2)\n        if result.body ~= nil then\n            rayDistance = Min(rayDistance, result.distance)\n        end\n        rayDistance = Clamp(rayDistance, CAMERA_MIN_DIST, cameraDistance)\n\n        cameraNode.position = aimPoint + rayDir * rayDistance\n        cameraNode.rotation = dir\n    end\nend\n\n-- Character script object class\nCharacter = ScriptObject()\n\nfunction Character:Start()\n    self.controls = Controls() -- Character controls\n    self.onGround = false -- Grounded flag for movement\n    self.okToJump = true -- Jump flag\n    self.inAirTimer = 0 -- In air timer. Due to possible physics inaccuracy, character can be off ground for max. 1/10 second and still be allowed to move\n    self:SubscribeToEvent(self.node, \"NodeCollision\", \"Character:HandleNodeCollision\")\nend\n\nfunction Character:Load(deserializer)\n    self.controls.yaw = deserializer:ReadFloat()\n    self.controls.pitch = deserializer:ReadFloat()\nend\n\nfunction Character:Save(serializer)\n    serializer:WriteFloat(self.controls.yaw)\n    serializer:WriteFloat(self.controls.pitch)\nend\n\nfunction Character:HandleNodeCollision(eventType, eventData)\n    local contacts = eventData:GetBuffer(\"Contacts\")\n\n    while not contacts.eof do\n        local contactPosition = contacts:ReadVector3()\n        local contactNormal = contacts:ReadVector3()\n        local contactDistance = contacts:ReadFloat()\n        local contactImpulse = contacts:ReadFloat()\n\n        -- If contact is below node center and mostly vertical, assume it's a ground contact\n        if contactPosition.y \u0026lt; self.node.position.y + 1 then\n            local level = Abs(contactNormal.y)\n            if level \u0026gt; 0.75 then self.onGround = true end\n        end\n    end\nend\n\nfunction Character:FixedUpdate(timeStep)\n    -- Could cache the components for faster access instead of finding them each frame\n    local body = self.node:GetComponent(\"RigidBody\")\n    local animCtrl = self.node:GetComponent(\"AnimationController\")\n\n    -- Update the in air timer. Reset if grounded\n    if not self.onGround then self.inAirTimer = self.inAirTimer + timeStep else self.inAirTimer = 0 end\n    -- When character has been in air less than 1/10 second, it's still interpreted as being on ground\n    local softGrounded = self.inAirTimer \u0026lt; INAIR_THRESHOLD_TIME\n\n    -- Update movement \u0026amp; animation\n    local rot = self.node.rotation\n    local moveDir = Vector3.ZERO\n    local velocity = body.linearVelocity\n    -- Velocity on the XZ plane\n    local planeVelocity = Vector3(velocity.x, 0, velocity.z)\n\n    if self.controls:IsDown(CTRL_FORWARD) then moveDir = moveDir + Vector3.FORWARD end\n    if self.controls:IsDown(CTRL_BACK) then moveDir = moveDir + Vector3.BACK end\n    if self.controls:IsDown(CTRL_LEFT) then moveDir = moveDir + Vector3.LEFT end\n    if self.controls:IsDown(CTRL_RIGHT) then moveDir = moveDir + Vector3.RIGHT end\n\n    -- Normalize move vector so that diagonal strafing is not faster\n    if moveDir:LengthSquared() \u0026gt; 0 then moveDir:Normalize() end\n\n    -- If in air, allow control, but slower than when on ground\n    if softGrounded then\n        body:ApplyImpulse(rot * moveDir * MOVE_FORCE)\n    else\n        body:ApplyImpulse(rot * moveDir * INAIR_MOVE_FORCE)\n    end\n\n    if softGrounded then\n        -- When on ground, apply a braking force to limit maximum ground velocity\n        local brakeForce = planeVelocity * -BRAKE_FORCE\n        body:ApplyImpulse(brakeForce)\n\n        -- Jump. Must release jump control inbetween jumps\n        if self.controls:IsDown(CTRL_JUMP) then\n            if self.okToJump then\n                body:ApplyImpulse(Vector3.UP * JUMP_FORCE)\n                self.okToJump = false\n            end\n        else\n            self.okToJump = true\n        end\n    end\n\n    -- Play walk animation if moving on ground, otherwise fade it out\n    if softGrounded and not moveDir:Equals(Vector3.ZERO) then animCtrl:PlayExclusive(\"Models/Jack_Walk.ani\", 0, true, 0.2) else animCtrl:Stop(\"Models/Jack_Walk.ani\", 0.2) end\n    -- Set walk animation speed proportional to velocity\n    animCtrl:SetSpeed(\"Models/Jack_Walk.ani\", planeVelocity:Length() * 0.3)\n\n\t-- Set IK state (we will apply foot IK only when grounded)\n\tdoIK = self.onGround\n\n    -- Reset grounded flag for next frame\n    self.onGround = false\nend\n\n\n--====================================  IK  ============================================\n\n-- Variables\nlocal unevenThreshold = 0.05 -- Set this threshold according to the delta between feet height in idle position/animation\nlocal leftFoot, rightFoot, legAxis, rootBone, leftLegLength, rightLegLength, originalRootHeight\n\nfunction HandleSceneDrawableUpdateFinished(eventType, eventData)\n\tif doIK then SolveLegIK() end -- Foot IK only when grounded\nend\n\n\nfunction CreateIKChains()\n\t-- Set effector \u0026amp; axis for foot IK chains\n\tleftFoot = characterNode:GetChild(\"Bip01_L_Foot\", true)\n\trightFoot = characterNode:GetChild(\"Bip01_R_Foot\", true)\n\tlegAxis = Vector3(0, 0, -1)\n\n\t-- Set variables that will be used later\n\tlocal skel = characterNode:GetComponent(\"AnimatedModel\").skeleton\n\trootBone = characterNode:GetChild(skel.rootBone.name, true) -- Get root bone of the skeleton as we will move it to match IK targets\n\tleftLegLength = skel:GetBone(leftFoot.parent.parent.name).boundingBox.size.y + skel:GetBone(leftFoot.parent.name).boundingBox.size.y -- Left thigh length + left calf length\n\trightLegLength = skel:GetBone(rightFoot.parent.parent.name).boundingBox.size.y + skel:GetBone(rightFoot.parent.name).boundingBox.size.y -- Right thigh length + right calf length\n\toriginalRootHeight = rootBone.worldPosition.y - characterNode.position.y -- Used when no animation is playing\nend\n\n\nfunction SolveLegIK()\n\t-- ONLY IF NO ANIMATION playing: reset rootBone height\n\tif not characterNode:GetComponent(\"AnimationController\"):IsPlaying(\"Models/Jack_Walk.ani\") then rootBone.worldPosition = Vector3(rootBone.worldPosition.x, characterNode.position.y + originalRootHeight, rootBone.worldPosition.z) end\n\n\t-- Root bone and feet height from animation keyframe and character position\n\trootHeight = rootBone.worldPosition.y - characterNode.position.y\n\tfootHeightL = leftFoot.worldPosition.y - characterNode.position.y\n\tfootHeightR = rightFoot.worldPosition.y - characterNode.position.y\n\n\t-- Current feet position from animation keyframe\n\tlocal leftGround = leftFoot.worldPosition\n\tlocal rightGround = rightFoot.worldPosition\n\n\t-- Determine which foot should be grounded\n\tlocal leftDown, rightDown = false, false -- Reset\n\tif leftGround.y \u0026lt; rightGround.y - unevenThreshold then leftDown = true\n\telseif rightGround.y \u0026lt; leftGround.y - unevenThreshold then rightDown = true end\n\n\t-- Left Foot target (NB: ray cast is performed from a position above the foot, but not higher than the character so that we get an accurate result when foot is currently underground)\n\tlocal result = physicsWorld:RaycastSingle(Ray(leftGround + Vector3(0, leftLegLength, 0), Vector3.DOWN), 10, 2) -- NB: restrict targets to layer 2 to discard self-collision\n\tleftGround = result.position\n\tleftDist = leftFoot.worldPosition.y - (leftGround.y + footHeightL) -- Distance from foot to ground, while preserving animation's foot offset from ground\n\tlocal leftNormal = result.normal -- Used to make foot to face along the ground normal\n\n\t-- Right Foot target (NB: ray cast is performed from a reachable position above the foot so that we get an accurate result when foot is currently underground)\n\tlocal result = physicsWorld:RaycastSingle(Ray(rightGround + Vector3(0, leftLegLength, 0), Vector3.DOWN), 10, 2) -- NB: restrict targets to layer 2 to discard self-collision\n\trightGround = result.position\n\trightDist = rightFoot.worldPosition.y - (rightGround.y + footHeightR) -- Distance from foot to ground, while preserving animation's foot offset from ground\n\tlocal rightNormal = result.normal -- Used to make foot to face along the ground normal\n\n\t-- Set root bone target height to reach grounded foot target position\n\tlocal heightDiff = 0\n\tif leftDown or leftGround.y \u0026lt;= rightGround.y then\n\t\theightDiff = leftDist\n\t\tif Abs(heightDiff) \u0026gt; 0.001 then rightGround = rightGround + Vector3(0, heightDiff, 0) end\n\telseif rightDown or rightGround.y \u0026lt; leftGround.y then\n\t\theightDiff = rightDist\n\t\tif Abs(heightDiff) \u0026gt; 0.001 then leftGround = leftGround + Vector3(0, heightDiff, 0) end\n\tend\n\n\tif Abs(heightDiff) \u0026lt; 0.001 then return end -- Skip if heightDiff not significant\n\n\t-- Move the root bone (NB: characterNode has already been 'moved' by its physics collider)\n\trootBone.worldPosition = rootBone.worldPosition - Vector3(0, heightDiff, 0)\n\n\t-- Selectively solve IK\n\tif not leftDown then SolveIK(leftFoot, leftGround) end\n\tif not rightDown then SolveIK(rightFoot, rightGround) end\n\n\t-- TODO: make foot to face along the ground normal\nend\n\n\nfunction SolveIK(effectorNode, targetPos)\n\n\t-- Get current world position for the 3 joints of the IK chain\n\tlocal startJointPos = effectorNode.parent.parent.worldPosition -- Thigh pos (hip joint)\n\tlocal midJointPos = effectorNode.parent.worldPosition -- Calf pos (knee joint)\n\tlocal effectorPos = effectorNode.worldPosition -- Foot pos (ankle joint)\n\n\t-- Direction vectors\n\tlocal thighDir = midJointPos - startJointPos -- Thigh direction\n\tlocal calfDir = effectorPos - midJointPos -- Calf direction\n\tlocal targetDir = targetPos - startJointPos -- Leg direction\n\n\t-- Direction vectors lengths\n\tlocal length1 = thighDir:Length()\n\tlocal length2 = calfDir:Length()\n\tlocal limbLength = length1 + length2\n\tlocal lengthH = targetDir:Length()\n\tif lengthH \u0026gt; limbLength then\n\t\ttargetDir = targetDir * (limbLength / lengthH) * 0.999 -- Do not overshoot if target unreachable\n\t\tlengthH = targetDir:Length()\n\tend\n\tlocal lengthHsquared = targetDir:LengthSquared()\n\n\t-- Current knee angle (from animation keyframe)\n\tlocal kneeAngle = thighDir:Angle(calfDir)\n\n\t-- New knee angle\n\tlocal cos_theta = (lengthHsquared - thighDir:LengthSquared() - calfDir:LengthSquared()) / (2 * length1 * length2)\n\tif cos_theta \u0026gt; 1 then cos_theta = 1 elseif cos_theta \u0026lt; -1 then cos_theta = -1 end\n\tlocal theta = Acos(cos_theta)\n\n\t-- Quaternions for knee and hip joints\n\tif Abs(theta - kneeAngle) \u0026gt; 0.01 then\n\t\tlocal newKneeAngle = Quaternion((theta - kneeAngle), legAxis)\n\t\tlocal newHipAngle = Quaternion(-(theta - kneeAngle)*0.5, legAxis)\n\n\t\t-- Apply rotations\n\t\teffectorNode.parent.rotation = effectorNode.parent.rotation * newKneeAngle\n\t\teffectorNode.parent.parent.rotation = effectorNode.parent.parent.rotation * newHipAngle\n\tend\nend\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\u003cp\u003e          \u003ca href=\"https://i.imgur.com/JKTL2kJ.png\" target=\"_blank\" rel=\"nofollow ugc noopener\" class=\"onebox\"\u003e\n            \u003cimg src=\"https://i.imgur.com/JKTL2kJ.png\" width=\"530\" height=\"375\"\u003e\n          \u003c/a\u003e\n\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2017-06-29T10:29:10.035Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":7,"reads":31,"readers_count":30,"score":41.2,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":3,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://i.imgur.com/JKTL2kJ.png","internal":false,"reflection":false,"title":"JKTL2kJ.png","clicks":5}],"read":true,"user_title":"Contributor","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":9,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":5878,"name":"","username":"GoogleBot42","avatar_template":"/user_avatar/discourse.urho3d.io/googlebot42/{size}/62_2.png","created_at":"2015-04-23T15:56:45.000Z","cooked":"\u003cp\u003eNice!  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/smiley.png?v=5\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\"\u003e  I have been wanting this for a while. \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=5\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\"\u003e  Do you think you can port this to C++?\u003c/p\u003e","post_number":5,"post_type":1,"updated_at":"2017-01-02T01:04:49.693Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":29,"readers_count":28,"score":5.8,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":197,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":5881,"name":"","username":"Mike","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png","created_at":"2015-04-23T17:33:11.000Z","cooked":"\u003cp\u003eYes, code is rather simple, we just have to assign the feet nodes and rotation axis, and set a boolean for toggling on/off.\u003c/p\u003e","post_number":6,"post_type":1,"updated_at":"2017-01-02T01:04:49.935Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":27,"readers_count":26,"score":10.4,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Contributor","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":9,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":5884,"name":"","username":"GoogleBot42","avatar_template":"/user_avatar/discourse.urho3d.io/googlebot42/{size}/62_2.png","created_at":"2015-04-23T20:42:39.000Z","cooked":"\u003cp\u003eHmm I get this error when I run it… (I have lua error checking enabled in Urho3D build options)\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e[Thu Apr 23 14:40:29 2015] ERROR: Execute Lua function failed: invalid type in variable assignment.\n     value is 'const Vector3'; 'Vector3' expected.\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThere isn’t any information that says where the error is occurring though.  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/frowning.png?v=5\" title=\":frowning:\" class=\"emoji\" alt=\":frowning:\"\u003e\u003c/p\u003e","post_number":7,"post_type":1,"updated_at":"2017-01-02T01:04:50.200Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":2,"reads":27,"readers_count":26,"score":15.4,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":197,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":6411,"name":"","username":"sabotage3d","avatar_template":"/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png","created_at":"2015-06-07T12:03:26.000Z","cooked":"\u003cp\u003eHave anyone ported this to C++ ?\u003c/p\u003e","post_number":8,"post_type":1,"updated_at":"2017-01-02T01:05:29.913Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":25,"readers_count":24,"score":5.0,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":151,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":6416,"name":"","username":"globus","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/5f9b8f/{size}.png","created_at":"2015-06-07T17:03:42.000Z","cooked":"\u003cp\u003eYou can compare this Lua script with Character demo c++ code\u003cbr\u003e\nfor understanding.\u003c/p\u003e","post_number":9,"post_type":1,"updated_at":"2017-01-02T01:05:30.255Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":24,"readers_count":23,"score":4.8,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":32,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":6418,"name":"","username":"Mike","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png","created_at":"2015-06-08T05:33:52.000Z","cooked":"\u003cp\u003eI think it needs some improvement before considering porting to C++, like using octree ray casts (less expensive and more versatile than physics) and fixing a few details.\u003c/p\u003e","post_number":10,"post_type":1,"updated_at":"2017-01-02T01:05:30.399Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":7,"reads":28,"readers_count":27,"score":40.6,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Contributor","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":9,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":6934,"name":"","username":"Mike","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png","created_at":"2015-07-28T12:32:34.000Z","cooked":"\u003cp\u003eI’ve done a few updates/fixes, set as a component and ported to AngelScript (as I almost don’t use lua anymore).\u003cbr\u003e\nIt’s still far from perfect as it requires some manual settings (like ‘lerp’, ‘doIK’…) and an AnimationController (and I haven’t tested how it behaves without physics).\u003c/p\u003e\n\u003cp\u003eAlso I haven’t found a convenient way to check if the AnimationController is playing something or not.\u003c/p\u003e\n\u003cp\u003e[spoiler]class FootIK : ScriptObject\u003cbr\u003e\n{\u003cbr\u003e\nString leftFootName = “”;\u003cbr\u003e\nString rightFootName = “”;\u003cbr\u003e\nVector3 legAxis;\u003cbr\u003e\nfloat unevenThreshold = 0.05; // Set this threshold according to the delta between feet height in idle position/animation\u003cbr\u003e\nbool doIK = true; // Allow to disable Foot IK, which is only relevant when the character is grounded\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNode@ leftFoot;\nNode@ rightFoot;\nNode@ rootBone;\nfloat leftLegLength = 0;\nfloat rightLegLength = 0;\nfloat originalRootHeight = 0;\nQuaternion leftFootInitialRot;\nQuaternion rightFootInitialRot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003evoid CreateIKChains()\u003cbr\u003e\n{\u003cbr\u003e\n// Set IK chains effectors\u003cbr\u003e\nleftFoot = node.GetChild(leftFootName, true);\u003cbr\u003e\nrightFoot = node.GetChild(rightFootName, true);\u003cbr\u003e\nif (leftFoot is null || rightFoot is null)\u003cbr\u003e\n{\u003cbr\u003e\n\u003ca href=\"http://log.Info\"\u003elog.Info\u003c/a\u003e(\"Cannot get feet nodes \" + leftFootName + \" and/or \" + rightFootName);\u003cbr\u003e\nreturn;\u003cbr\u003e\n}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (leftFoot.parent is null || leftFoot.parent.parent is null || rightFoot.parent is null || rightFoot.parent.parent is null)\n\treturn;\n\n// Set variables\nAnimatedModel@ model = node.GetComponent(\"AnimatedModel\");\nSkeleton@ skel = model.skeleton;\nif (skel is null) return;\nrootBone = node.GetChild(skel.rootBone.name, true); // Get root bone of the skeleton as we will move its node up/down to match IK targets\n\nleftLegLength = skel.GetBone(leftFoot.parent.parent.name).boundingBox.size.y + skel.GetBone(leftFoot.parent.name).boundingBox.size.y; // Left thigh length + left calf length\nrightLegLength = skel.GetBone(rightFoot.parent.parent.name).boundingBox.size.y + skel.GetBone(rightFoot.parent.name).boundingBox.size.y; // Right thigh length + right calf length\noriginalRootHeight = rootBone.worldPosition.y - node.position.y; // Used when no animation is playing\n\n// Keep track of initial rotation in case no animation is playing\nleftFootInitialRot = skel.GetBone(leftFootName).initialRotation;\nrightFootInitialRot = skel.GetBone(rightFootName).initialRotation;\n\n// Subscribe to the SceneDrawableUpdateFinished event which is triggered after the animations have been updated, so we can apply IK to override them\nSubscribeToEvent(\"SceneDrawableUpdateFinished\", \"HandleSceneDrawableUpdateFinished\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid HandleSceneDrawableUpdateFinished(StringHash eventType, VariantMap\u0026amp; eventData)\u003cbr\u003e\n{\u003cbr\u003e\nif (doIK) SolveLegIK(eventData[“TimeStep”].GetFloat());\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid SolveIKUrho(Node@ effectorNode, Vector3 targetPos)\u003cbr\u003e\n{\u003cbr\u003e\n// Get current world position for the 3 joints of the IK chain\u003cbr\u003e\nVector3 startJointPos = effectorNode.parent.parent.worldPosition; // Thigh pos (hip joint)\u003cbr\u003e\nVector3 midJointPos = effectorNode.parent.worldPosition; // Calf pos (knee joint)\u003cbr\u003e\nVector3 effectorPos = effectorNode.worldPosition; // Foot pos (ankle joint)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Direction vectors\nVector3 thighDir = midJointPos - startJointPos; // Thigh direction\nVector3 calfDir = effectorPos - midJointPos; // Calf direction\nVector3 targetDir = targetPos - startJointPos; // Leg direction\n\n// Vectors lengths\nfloat length1 = thighDir.length;\nfloat length2 = calfDir.length;\nfloat limbLength = length1 + length2;\nfloat lengthH = targetDir.length;\nif (lengthH \u0026gt; limbLength)\n{\n\ttargetDir = targetDir * (limbLength / lengthH) * 0.999; // Do not overshoot if target unreachable\n\tlengthH = targetDir.length;\n}\nfloat lengthHsquared = targetDir.lengthSquared;\n\n// Current knee angle (from animation keyframe)\nfloat kneeAngle = thighDir.Angle(calfDir);\n\n// New knee angle\nfloat cos_theta = (lengthHsquared - thighDir.lengthSquared - calfDir.lengthSquared) / (2 * length1 * length2);\nif (cos_theta \u0026gt; 1) cos_theta = 1; else if (cos_theta \u0026lt; -1) cos_theta = -1;\nfloat theta = Acos(cos_theta);\n\n// Quaternions for knee and hip joints\nif (Abs(theta - kneeAngle) \u0026gt; 0.01)\n{\n\tQuaternion deltaKnee = Quaternion((theta - kneeAngle), legAxis);\n\tQuaternion deltaHip = Quaternion(-(theta - kneeAngle) * 0.5, legAxis);\n\n\t// Apply rotations\n\teffectorNode.parent.rotation = effectorNode.parent.rotation * deltaKnee;\n\teffectorNode.parent.parent.rotation = effectorNode.parent.parent.rotation * deltaHip;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid SolveLegIK(float timeStep)\u003cbr\u003e\n{\u003cbr\u003e\n// ONLY IF NO ANIMATION playing: reset rootBone height\u003cbr\u003e\nAnimationController@ animCtrl = node.GetComponent(“AnimationController”);\u003cbr\u003e\nif (\u003ca href=\"http://node.name\"\u003enode.name\u003c/a\u003e == “Jack” \u0026amp;\u0026amp; !animCtrl.IsPlaying(“Models/Jack_Walk.ani”))\u003cbr\u003e\nrootBone.worldPosition = Vector3(rootBone.worldPosition.x, node.position.y + originalRootHeight, rootBone.worldPosition.z);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Root bone and feet height from animation keyframe and character node position\nfloat footHeightL = leftFoot.worldPosition.y - node.position.y;\nfloat footHeightR = rightFoot.worldPosition.y - node.position.y;\n\n// Current feet position from animation keyframe\nVector3 leftGround = leftFoot.worldPosition;\nVector3 rightGround = rightFoot.worldPosition;\n\nOctree@ octree = scene.octree;\nfloat leftHeightDiff = 0; // Distance from left foot to ground, while preserving animation's foot offset from ground\nfloat rightHeightDiff = 0; // Distance from right foot to ground, while preserving animation's foot offset from ground\nVector3 leftNormal = Vector3(0, 0, 0);\nVector3 rightNormal = Vector3(0, 0, 0);\n\n// Left Foot (NB: ray cast is performed from a position above the foot, but not higher than the character so that we get an accurate result when foot is currently underground)\nRayQueryResult result = octree.RaycastSingle(Ray(leftGround + Vector3(0, leftLegLength, 0), Vector3(0, -1, 0)), RAY_TRIANGLE, 10, DRAWABLE_GEOMETRY, 63); // NB: skip last 2 view mask layers that contain self, foot effects, cutouts...\nif (result.drawable !is null)\n{\n\tleftGround = result.position;\n\tleftHeightDiff = leftFoot.worldPosition.y - (leftGround.y + footHeightL); // Distance from foot to ground, while preserving animation's foot offset from ground\n\tleftNormal = result.normal; // Used to make foot to face along the ground normal\n}\n\n// Right Foot (NB: ray cast is performed from a position above the foot, but not higher than the character so that we get an accurate result when foot is currently underground)\nRayQueryResult result2 = octree.RaycastSingle(Ray(rightGround + Vector3(0, rightLegLength, 0), Vector3(0, -1, 0)), RAY_TRIANGLE, 10, DRAWABLE_GEOMETRY, 63); // NB: skip last 2 view mask layers that contain self, foot effects, cutouts...\nif (result2.drawable !is null)\n{\n\trightGround = result2.position;\n\trightHeightDiff = rightFoot.worldPosition.y - (rightGround.y + footHeightR); // Distance from foot to ground, while preserving animation's foot offset from ground\n\trightNormal = result2.normal; // Used to make foot to face along the ground normal\n}\n\n// Feet are facing ground normal\nif (node.name == \"Jack\" \u0026amp;\u0026amp; !animCtrl.IsPlaying(\"Models/Jack_Walk.ani\")) // When no animation is playing, manually reset rotation (when an animation is playing, rotation is reset by the keyframe)\n{\n\tleftFoot.rotation = leftFootInitialRot;\n\trightFoot.rotation = rightFootInitialRot;\n}\nleftFoot.worldRotation = Quaternion(Vector3(0, 1, 0), leftNormal) * leftFoot.worldRotation;\nrightFoot.worldRotation = Quaternion(Vector3(0, 1, 0), rightNormal) * rightFoot.worldRotation;\n\n// Skip grounding if flat ground\nif(Abs(rightHeightDiff - leftHeightDiff) \u0026lt; 0.001) return;\n\n// From animation keyframe, determine which foot should be grounded\nbool leftDown = false;\nbool rightDown = false;\nif (leftGround.y \u0026lt; rightGround.y - unevenThreshold) leftDown = true;\nelse if (rightGround.y \u0026lt; leftGround.y - unevenThreshold) rightDown = true;\n\n// If feet are at even level in animation, ground at lowest ray cast level\nif (!leftDown \u0026amp;\u0026amp; !rightDown)\n{\n\tif (leftGround.y \u0026lt; rightGround.y) leftDown = true; else rightDown = true;\n}\n\n// Set root bone offset to reach grounded foot target position. Also update non grounded foot from this offset\nfloat heightDiff = 0;\nif (leftDown)\n{\n\theightDiff = leftHeightDiff;\n\trightGround = rightGround + Vector3(0, heightDiff, 0);\n}\nelse if (rightDown)\n{\n\theightDiff = rightHeightDiff;\n\tleftGround = leftGround + Vector3(0, heightDiff, 0);\n}\n\n// Move the root bone (NB: node has already been 'moved' by its physics collider)\nrootBone.worldPosition = rootBone.worldPosition - Vector3(0, heightDiff, 0);\n\n// Selectively solve IK\nif (!leftDown) SolveIKUrho(leftFoot, leftGround);\nif (!rightDown) SolveIKUrho(rightFoot, rightGround);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003e}[/spoiler]\u003c/p\u003e\n\u003cp\u003e[spoiler]\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e “Scripts/Utilities/Sample.as”\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e “Scripts/Utilities/Touch.as”\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e “Scripts/Perso/Foot_IK.as”\u003c/p\u003e\n\u003cp\u003econst int CTRL_FORWARD = 1;\u003cbr\u003e\nconst int CTRL_BACK = 2;\u003cbr\u003e\nconst int CTRL_LEFT = 4;\u003cbr\u003e\nconst int CTRL_RIGHT = 8;\u003cbr\u003e\nconst int CTRL_JUMP = 16;\u003c/p\u003e\n\u003cp\u003econst float MOVE_FORCE = 0.8f;\u003cbr\u003e\nconst float INAIR_MOVE_FORCE = 0.02f;\u003cbr\u003e\nconst float BRAKE_FORCE = 0.2f;\u003cbr\u003e\nconst float JUMP_FORCE = 7.0f;\u003cbr\u003e\nconst float YAW_SENSITIVITY = 0.1f;\u003cbr\u003e\nconst float INAIR_THRESHOLD_TIME = 0.1f;\u003cbr\u003e\nbool firstPerson = false; // First person camera flag\u003c/p\u003e\n\u003cp\u003eNode@ characterNode;\u003cbr\u003e\nString characterName = “Jack”; // Character to create, from “Jack”, “Ninja” or a prefab character\u003c/p\u003e\n\u003cp\u003evoid Start()\u003cbr\u003e\n{\u003cbr\u003e\nSampleStart(); // Execute the common startup for samples\u003cbr\u003e\nCreateScene(); // Create static scene content\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Create the controllable character\nif (characterName == \"Jack\") CreateJack();\nelse if (characterName == \"Ninja\") CreateNinja();\nelse CreateCharacter(characterName);\n\nCreateInstructions(); // Create the UI content\nSubscribeToEvents(); // Subscribe to necessary events\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid CreateScene()\u003cbr\u003e\n{\u003cbr\u003e\nscene_ = Scene();\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Create scene subsystem components\nscene_.CreateComponent(\"Octree\");\nscene_.CreateComponent(\"PhysicsWorld\");\nscene_.CreateComponent(\"DebugRenderer\");\n\n// Create camera and define viewport. Camera does not necessarily have to belong to the scene\ncameraNode = Node();\nCamera@ camera = cameraNode.CreateComponent(\"Camera\");\ncamera.farClip = 300.0f;\nrenderer.viewports[0] = Viewport(scene_, camera);\n\n// Create a Zone component for ambient lighting \u0026amp; fog control\nNode@ zoneNode = scene_.CreateChild(\"Zone\");\nZone@ zone = zoneNode.CreateComponent(\"Zone\");\nzone.boundingBox = BoundingBox(-1000.0f, 1000.0f);\nzone.ambientColor = Color(0.15f, 0.15f, 0.15f);\nzone.fogColor = Color(0.5f, 0.5f, 0.7f);\nzone.fogStart = 100.0f;\nzone.fogEnd = 300.0f;\n\n// Create a directional light to the world. Enable cascaded shadows on it\nNode@ lightNode = scene_.CreateChild(\"DirectionalLight\");\nlightNode.direction = Vector3(0.6f, -1.0f, 0.8f);\nLight@ light = lightNode.CreateComponent(\"Light\");\nlight.lightType = LIGHT_DIRECTIONAL;\nlight.castShadows = true;\nlight.shadowBias = BiasParameters(0.00025f, 0.5f);\n// Set cascade splits at 10, 50 and 200 world units, fade shadows out at 80% of maximum shadow distance\nlight.shadowCascade = CascadeParameters(10.0f, 50.0f, 200.0f, 0.0f, 0.8f);\n\n// Create the floor object\nNode@ floorNode = scene_.CreateChild(\"Floor\");\nfloorNode.position = Vector3(0.0f, -0.5f, 0.0f);\nfloorNode.scale = Vector3(200.0f, 1.0f, 200.0f);\nStaticModel@ object = floorNode.CreateComponent(\"StaticModel\");\nobject.model = cache.GetResource(\"Model\", \"Models/Box.mdl\");\nobject.material = cache.GetResource(\"Material\", \"Materials/Stone.xml\");\n\nRigidBody@ body = floorNode.CreateComponent(\"RigidBody\");\n// Use collision layer bit 2 to mark world scenery. This is what we will raycast against to prevent camera from going inside geometry\nbody.collisionLayer = 2;\nCollisionShape@ shape = floorNode.CreateComponent(\"CollisionShape\");\nshape.SetBox(Vector3(1.0f, 1.0f, 1.0f));\n\n// Create mushrooms of varying sizes\nconst uint NUM_MUSHROOMS = 60;\nfor (uint i = 0; i \u0026lt; NUM_MUSHROOMS; ++i)\n{\n\tNode@ objectNode = scene_.CreateChild(\"Mushroom\");\n\tobjectNode.position = Vector3(Random(180.0f) - 90.0f, 0.0f, Random(180.0f) - 90.0f);\n\tobjectNode.rotation = Quaternion(0.0f, Random(360.0f), 0.0f);\n\tobjectNode.SetScale(2.0f + Random(5.0f));\n\tStaticModel@ object = objectNode.CreateComponent(\"StaticModel\");\n\tobject.model = cache.GetResource(\"Model\", \"Models/Mushroom.mdl\");\n\tobject.material = cache.GetResource(\"Material\", \"Materials/Mushroom.xml\");\n\tobject.castShadows = true;\n\n\tRigidBody@ body = objectNode.CreateComponent(\"RigidBody\");\n\tbody.collisionLayer = 2;\n\tCollisionShape@ shape = objectNode.CreateComponent(\"CollisionShape\");\n\tshape.SetTriangleMesh(object.model, 0);\n}\n\n// Create movable boxes. Let them fall from the sky at first\nconst uint NUM_BOXES = 100;\nfor (uint i = 0; i \u0026lt; NUM_BOXES; ++i)\n{\n\tfloat scale = Random(2.0f) + 0.5f;\n\n\tNode@ objectNode = scene_.CreateChild(\"Box\");\n\tobjectNode.position = Vector3(Random(180.0f) - 90.0f, Random(10.0f) + 10.0f, Random(180.0f) - 90.0f);\n\tobjectNode.rotation = Quaternion(Random(360.0f), Random(360.0f), Random(360.0f));\n\tobjectNode.SetScale(scale);\n\tStaticModel@ object = objectNode.CreateComponent(\"StaticModel\");\n\tobject.model = cache.GetResource(\"Model\", \"Models/Box.mdl\");\n\tobject.material = cache.GetResource(\"Material\", \"Materials/Stone.xml\");\n\tobject.castShadows = true;\n\n\tRigidBody@ body = objectNode.CreateComponent(\"RigidBody\");\n\tbody.collisionLayer = 2;\n\t// Bigger boxes will be heavier and harder to move\n\tbody.mass = scale * 2.0f;\n\tCollisionShape@ shape = objectNode.CreateComponent(\"CollisionShape\");\n\tshape.SetBox(Vector3(1.0f, 1.0f, 1.0f));\n}\n\n// STEEP\nNode@ slope = scene_.CreateChild(\"Slope\");\nslope.scale = Vector3(10, 1, 5);\nslope.position = Vector3(0, 1.5, 5);\nslope.rotation = Quaternion(0, -90, 25);\nStaticModel@ model = slope.CreateComponent(\"StaticModel\");\nmodel.model = cache.GetResource(\"Model\", \"Models/Box.mdl\");\nmodel.material = cache.GetResource(\"Material\", \"Materials/Stone.xml\");\n\nRigidBody@ steepBody = slope.CreateComponent(\"RigidBody\");\nsteepBody.collisionLayer = 2;\nCollisionShape@ steepShape = slope.CreateComponent(\"CollisionShape\");\nsteepShape.SetBox(Vector3(1, 1, 1));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid CreateJack()\u003cbr\u003e\n{\u003cbr\u003e\ncharacterNode = scene_.CreateChild(“Jack”);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Create the rendering component + animation controller\nAnimatedModel@ object = characterNode.CreateComponent(\"AnimatedModel\");\nobject.model = cache.GetResource(\"Model\", \"Models/Jack.mdl\");\nobject.material = cache.GetResource(\"Material\", \"Materials/Jack.xml\");\nobject.castShadows = true;\ncharacterNode.CreateComponent(\"AnimationController\");\nobject.viewMask = 64; // Enable layer 7 only, to skip when raycasting the octree\n\n// Create rigidbody, and set non-zero mass so that the body becomes dynamic\nRigidBody@ body = characterNode.CreateComponent(\"RigidBody\");\nbody.collisionLayer = 1;\nbody.mass = 1;\n\n// Set zero angular factor so that physics doesn't turn the character on its own.\n// Instead we will control the character yaw manually\nbody.angularFactor = Vector3(0, 0, 0);\n\n// Set the rigidbody to signal collision also when in rest, so that we get ground collisions properly\nbody.collisionEventMode = COLLISION_ALWAYS;\n\n// Set a capsule shape for collision\nCollisionShape@ shape = characterNode.CreateComponent(\"CollisionShape\");\nshape.SetCapsule(0.6, 1.8, Vector3(0, 0.9, 0));\n\n// Create the character logic object, which takes care of steering the rigidbody\ncharacterNode.CreateScriptObject(scriptFile, \"Character\");\n\n// Create a foot IK script object\nFootIK@ footIK = cast\u0026lt;FootIK\u0026gt;(characterNode.CreateScriptObject(scriptFile, \"FootIK\"));\nfootIK.leftFootName = \"Bip01_L_Foot\";\nfootIK.rightFootName = \"Bip01_R_Foot\";\nfootIK.legAxis = Vector3(0, 0, -1);\nfootIK.CreateIKChains();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid CreateCharacter(String name)\u003cbr\u003e\n{\u003cbr\u003e\ncharacterNode = scene_.InstantiateXML(cache.GetFile(“Assets/” + name + “/Objects/” + name + “.xml”), Vector3(0, 0, 0), Quaternion(0, 0, 0));\u003cbr\u003e\ncharacterNode.CreateComponent(“AnimationController”);\u003cbr\u003e\ncharacterNode.CreateScriptObject(scriptFile, “Character”);\u003cbr\u003e\nAnimatedModel@ model = characterNode.GetComponent(“AnimatedModel”);\u003cbr\u003e\nmodel.viewMask = 64; // Enable layer 7 only, to skip when raycasting the octree\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Create a foot IK script object\nFootIK@ footIK = cast\u0026lt;FootIK\u0026gt;(characterNode.CreateScriptObject(scriptFile, \"FootIK\"));\nfootIK.leftFootName = \"Foot.L\";\nfootIK.rightFootName = \"Foot.R\";\nfootIK.legAxis = Vector3(-1, 0, 0);\nfootIK.CreateIKChains();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid CreateNinja()\u003cbr\u003e\n{\u003cbr\u003e\ncharacterNode = scene_.CreateChild(“Ninja”);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Create the rendering component + animation controller\nAnimatedModel@ object = characterNode.CreateComponent(\"AnimatedModel\");\nobject.model = cache.GetResource(\"Model\", \"Models/NinjaSnowWar/Ninja.mdl\");\nobject.material = cache.GetResource(\"Material\", \"Materials/NinjaSnowWar/Ninja.xml\");\nobject.castShadows = true;\ncharacterNode.CreateComponent(\"AnimationController\");\nobject.viewMask = 64; // Enable layer 7 only, to skip when raycasting the octree\n\n// Create rigidbody, and set non-zero mass so that the body becomes dynamic\nRigidBody@ body = characterNode.CreateComponent(\"RigidBody\");\nbody.collisionLayer = 1;\nbody.mass = 1;\n\n// Set zero angular factor so that physics doesn't turn the character on its own.\n// Instead we will control the character yaw manually\nbody.angularFactor = Vector3(0, 0, 0);\n\n// Set the rigidbody to signal collision also when in rest, so that we get ground collisions properly\nbody.collisionEventMode = COLLISION_ALWAYS;\n\n// Set a capsule shape for collision\nCollisionShape@ shape = characterNode.CreateComponent(\"CollisionShape\");\nshape.SetCapsule(0.5, 1.8, Vector3(0, 0.9, 0));\n\n// Create the character logic object, which takes care of steering the rigidbody\ncharacterNode.CreateScriptObject(scriptFile, \"Character\");\n\n// Create a foot IK script object\nFootIK@ footIK = cast\u0026lt;FootIK\u0026gt;(characterNode.CreateScriptObject(scriptFile, \"FootIK\"));\nfootIK.leftFootName = \"Joint20\";\nfootIK.rightFootName = \"Joint25\";\nfootIK.legAxis = Vector3(1, 0, 0);\nfootIK.CreateIKChains();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid CreateInstructions()\u003cbr\u003e\n{\u003cbr\u003e\n// Construct new Text object, set string to display and font to use\u003cbr\u003e\nText@ instructionText = ui.root.CreateChild(“Text”, “Instructions”);\u003cbr\u003e\ninstructionText.text = “Use WASD keys and mouse to move\\n” “Space to jump, F to toggle 1st/3rd person\\n” “F5 to save scene, F7 to load”;\u003cbr\u003e\ninstructionText.SetFont(cache.GetResource(“Font”, “Fonts/Anonymous Pro.ttf”), 15);\u003cbr\u003e\n// The text has multiple rows. Center them in relation to each other\u003cbr\u003e\ninstructionText.textAlignment = HA_CENTER;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Position the text relative to the screen center\ninstructionText.horizontalAlignment = HA_CENTER;\ninstructionText.verticalAlignment = VA_CENTER;\ninstructionText.SetPosition(0, ui.root.height / 4);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid SubscribeToEvents()\u003cbr\u003e\n{\u003cbr\u003e\nSubscribeToEvent(“Update”, “HandleUpdate”); // Subscribe to Update event for setting the character controls before physics simulation\u003cbr\u003e\nSubscribeToEvent(“PostUpdate”, “HandlePostUpdate”); // Subscribe to PostUpdate event for updating the camera position after physics simulation\u003cbr\u003e\nUnsubscribeFromEvent(“SceneUpdate”); // Unsubscribe the SceneUpdate event from base class as the camera node is being controlled in HandlePostUpdate() in this sample\u003cbr\u003e\nSubscribeToEvent(“PostRenderUpdate”, “HandlePostRenderUpdate”); // Process post-render update event, during which we request debug geometry\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid HandleUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\u003cbr\u003e\n{\u003cbr\u003e\nif (characterNode is null)\u003cbr\u003e\nreturn;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCharacter@ character = cast\u0026lt;Character\u0026gt;(characterNode.scriptObject);\nif (character is null)\n\treturn;\n\n// Clear previous controls\ncharacter.controls.Set(CTRL_FORWARD | CTRL_BACK | CTRL_LEFT | CTRL_RIGHT | CTRL_JUMP, false);\n\n// Update controls using touch utility\nif (touchEnabled)\n\tUpdateTouches(character.controls);\n\n// Update controls using keys (desktop)\nif (ui.focusElement is null)\n{\n\tif (touchEnabled || !useGyroscope)\n\t{\n\t\tcharacter.controls.Set(CTRL_FORWARD, input.keyDown[KEY_UP]);\n\t\tcharacter.controls.Set(CTRL_BACK, input.keyDown[KEY_DOWN]);\n\t\tcharacter.controls.Set(CTRL_LEFT, input.keyDown[KEY_LEFT]);\n\t\tcharacter.controls.Set(CTRL_RIGHT, input.keyDown[KEY_RIGHT]);\n\t}\n\tcharacter.controls.Set(CTRL_JUMP, input.keyDown[KEY_SPACE]);\n\n\t// Add character yaw \u0026amp; pitch from the mouse motion or touch input\n\tif (touchEnabled)\n\t{\n\t\tfor (uint i = 0; i \u0026lt; input.numTouches; ++i)\n\t\t{\n\t\t\tTouchState@ state = input.touches[i];\n\t\t\tif (state.touchedElement is null) // Touch on empty space\n\t\t\t{\n\t\t\t\tCamera@ camera = cameraNode.GetComponent(\"Camera\");\n\t\t\t\tif (camera is null)\n\t\t\t\t\treturn;\n\n\t\t\t\tcharacter.controls.yaw += TOUCH_SENSITIVITY * camera.fov / graphics.height * state.delta.x;\n\t\t\t\tcharacter.controls.pitch += TOUCH_SENSITIVITY * camera.fov / graphics.height * state.delta.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tcharacter.controls.yaw += input.mouseMoveX * YAW_SENSITIVITY;\n\t\tcharacter.controls.pitch += input.mouseMoveY * YAW_SENSITIVITY;\n\t}\n\t// Limit pitch\n\tcharacter.controls.pitch = Clamp(character.controls.pitch, -80.0f, 80.0f);\n\n\t// Switch between 1st and 3rd person\n\tif (input.keyPress['F'])\n\t\tfirstPerson = !firstPerson;\n\n\t// Turn on/off gyroscope on mobile platform\n\tif (input.keyPress['G'])\n\t\tuseGyroscope = !useGyroscope;\n\n\t// Check for loading / saving the scene\n\tif (input.keyPress[KEY_F5])\n\t{\n\t\tFile saveFile(fileSystem.programDir + \"Data/Scenes/CharacterDemo.xml\", FILE_WRITE);\n\t\tscene_.SaveXML(saveFile);\n\t}\n\tif (input.keyPress[KEY_F7])\n\t{\n\t\tFile loadFile(fileSystem.programDir + \"Data/Scenes/CharacterDemo.xml\", FILE_READ);\n\t\tscene_.LoadXML(loadFile);\n\t\t// After loading we have to reacquire the character scene node, as it has been recreated\n\t\t// Simply find by name as there's only one of them\n\t\tcharacterNode = scene_.GetChild(\"Jack\", true);\n\t\tif (characterNode is null)\n\t\t\treturn;\n\t}\n}\n\n// Set rotation already here so that it's updated every rendering frame instead of every physics frame\ncharacterNode.rotation = Quaternion(character.controls.yaw, Vector3(0.0f, 1.0f, 0.0f));\n\n// Toggle debug geometry with 'Z'\nif (input.keyPress[KEY_Z]) drawDebug = !drawDebug;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid HandlePostRenderUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\u003cbr\u003e\n{\u003cbr\u003e\nif (drawDebug) scene_.physicsWorld.DrawDebugGeometry(true); // Draw physics debug geometry. Use depth test to make the result easier to interpret\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid HandlePostUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\u003cbr\u003e\n{\u003cbr\u003e\nif (characterNode is null)\u003cbr\u003e\nreturn;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCharacter@ character = cast\u0026lt;Character\u0026gt;(characterNode.scriptObject);\nif (character is null)\n\treturn;\n\n// Get camera lookat dir from character yaw + pitch\nQuaternion rot = characterNode.rotation;\nQuaternion dir = rot * Quaternion(character.controls.pitch, Vector3(1.0f, 0.0f, 0.0f));\n\n// Third person camera: position behind the character\nVector3 aimPoint = characterNode.position + rot * Vector3(0.0f, 1.7f, 0.0f); // You can modify x Vector3 value to translate the fixed character position (indicative range[-2;2])\n\n// Collide camera ray with static physics objects (layer bitmask 2) to ensure we see the character properly\nVector3 rayDir = dir * Vector3(0.0f, 0.0f, -1.0f); // For indoor scenes you can use dir * Vector3(0.0, 0.0, -0.5) to prevent camera from crossing the walls\nfloat rayDistance = cameraDistance;\nPhysicsRaycastResult result = scene_.physicsWorld.RaycastSingle(Ray(aimPoint, rayDir), rayDistance, 2);\nif (result.body !is null)\n\trayDistance = Min(rayDistance, result.distance);\nrayDistance = Clamp(rayDistance, CAMERA_MIN_DIST, cameraDistance);\n\ncameraNode.position = aimPoint + rayDir * rayDistance;\ncameraNode.rotation = dir;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003e// Character script object class\u003cbr\u003e\n//\u003cbr\u003e\n// Those public member variables that can be expressed with a Variant and do not begin with an underscore are automatically\u003cbr\u003e\n// loaded / saved as attributes of the ScriptInstance component. We also have variables which can not be automatically saved\u003cbr\u003e\n// (yaw and pitch inside the Controls object) so we write manual binary format load / save methods for them. These functions\u003cbr\u003e\n// will be called by ScriptInstance when the script object is being loaded or saved.\u003cbr\u003e\nclass Character : ScriptObject\u003cbr\u003e\n{\u003cbr\u003e\n// Character controls.\u003cbr\u003e\nControls controls;\u003cbr\u003e\n// Grounded flag for movement.\u003cbr\u003e\nbool onGround = false;\u003cbr\u003e\n// Jump flag.\u003cbr\u003e\nbool okToJump = true;\u003cbr\u003e\n// In air timer. Due to possible physics inaccuracy, character can be off ground for max. 1/10 second and still be allowed to move.\u003cbr\u003e\nfloat inAirTimer = 0.0f;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evoid Start()\n{\n\tSubscribeToEvent(node, \"NodeCollision\", \"HandleNodeCollision\");\n}\n\nvoid Load(Deserializer\u0026amp; deserializer)\n{\n\tcontrols.yaw = deserializer.ReadFloat();\n\tcontrols.pitch = deserializer.ReadFloat();\n}\n\nvoid Save(Serializer\u0026amp; serializer)\n{\n\tserializer.WriteFloat(controls.yaw);\n\tserializer.WriteFloat(controls.pitch);\n}\n\nvoid HandleNodeCollision(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\tVectorBuffer contacts = eventData[\"Contacts\"].GetBuffer();\n\n\twhile (!contacts.eof)\n\t{\n\t\tVector3 contactPosition = contacts.ReadVector3();\n\t\tVector3 contactNormal = contacts.ReadVector3();\n\t\tfloat contactDistance = contacts.ReadFloat();\n\t\tfloat contactImpulse = contacts.ReadFloat();\n\n\t\t// If contact is below node center and mostly vertical, assume it's a ground contact\n\t\tif (contactPosition.y \u0026lt; (node.position.y + 1.0f))\n\t\t{\n\t\t\tfloat level = Abs(contactNormal.y);\n\t\t\tif (level \u0026gt; 0.75)\n\t\t\t\tonGround = true;\n\t\t}\n\t}\n}\n\nvoid FixedUpdate(float timeStep)\n{\n\t/// \\todo Could cache the components for faster access instead of finding them each frame\n\tRigidBody@ body = node.GetComponent(\"RigidBody\");\n\tAnimationController@ animCtrl = node.GetComponent(\"AnimationController\");\n\tFootIK@ footIK = cast\u0026lt;FootIK\u0026gt;(characterNode.GetScriptObject(\"FootIK\"));\n\n\t// Update the in air timer. Reset if grounded\n\tif (!onGround)\n\t\tinAirTimer += timeStep;\n\telse\n\t\tinAirTimer = 0.0f;\n\t// When character has been in air less than 1/10 second, it's still interpreted as being on ground\n\tbool softGrounded = inAirTimer \u0026lt; INAIR_THRESHOLD_TIME;\n\n\t// Update movement \u0026amp; animation\n\tQuaternion rot = node.rotation;\n\tVector3 moveDir(0.0f, 0.0f, 0.0f);\n\tVector3 velocity = body.linearVelocity;\n\t// Velocity on the XZ plane\n\tVector3 planeVelocity(velocity.x, 0.0f, velocity.z);\n\n\tif (controls.IsDown(CTRL_FORWARD))\n\t\tmoveDir += Vector3(0.0f, 0.0f, 1.0f);\n\tif (controls.IsDown(CTRL_BACK))\n\t\tmoveDir += Vector3(0.0f, 0.0f, -1.0f);\n\tif (controls.IsDown(CTRL_LEFT))\n\t\tmoveDir += Vector3(-1.0f, 0.0f, 0.0f);\n\tif (controls.IsDown(CTRL_RIGHT))\n\t\tmoveDir += Vector3(1.0f, 0.0f, 0.0f);\n\n\t// Normalize move vector so that diagonal strafing is not faster\n\tif (moveDir.lengthSquared \u0026gt; 0.0f)\n\t\tmoveDir.Normalize();\n\n\t// If in air, allow control, but slower than when on ground\n\tbody.ApplyImpulse(rot * moveDir * (softGrounded ? MOVE_FORCE : INAIR_MOVE_FORCE));\n\n\tif (softGrounded)\n\t{\n\t\t// When on ground, apply a braking force to limit maximum ground velocity\n\t\tVector3 brakeForce = -planeVelocity * BRAKE_FORCE;\n\t\tbody.ApplyImpulse(brakeForce);\n\n\t\t// Jump. Must release jump control inbetween jumps\n\t\tif (controls.IsDown(CTRL_JUMP))\n\t\t{\n\t\t\tif (okToJump)\n\t\t\t{\n\t\t\t\tbody.ApplyImpulse(Vector3(0.0f, 1.0f, 0.0f) * JUMP_FORCE);\n\t\t\t\tokToJump = false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tokToJump = true;\n\t}\n\n\t// Play walk animation if moving on ground, otherwise fade it out\n\tif (softGrounded \u0026amp;\u0026amp; !moveDir.Equals(Vector3(0, 0, 0)))\n\t{\n\t\tif (characterName == \"Jack\") animCtrl.PlayExclusive(\"Models/Jack_Walk.ani\", 0, true, 0.2);\n\t\telse if (characterName == \"Ninja\") animCtrl.PlayExclusive(\"Models/NinjaSnowWar/Ninja_Walk.ani\", 0, true, 0.2);\n\t\telse animCtrl.PlayExclusive(\"Assets/\" + characterName + \"/Models/Run.ani\", 0, true, 0.2);\n\t}\n\telse\n\t{\n\t\tif (characterName == \"Jack\") animCtrl.Stop(\"Models/Jack_Walk.ani\", 0.2);\n\t\telse if (characterName == \"Ninja\") animCtrl.PlayExclusive(\"Models/NinjaSnowWar/Ninja_Idle2.ani\", 0, true, 0.2);\n\t\telse animCtrl.PlayExclusive(\"Assets/\" + characterName + \"/Models/Idle.ani\", 0, true, 0.2);\n\t}\n\n\t// Set walk animation speed proportional to velocity\n\tanimCtrl.SetSpeed(\"Models/Jack_Walk.ani\", planeVelocity.length * 0.3f);\n\tanimCtrl.SetSpeed(\"Models/NinjaSnowWar/Ninja_Walk.ani\", planeVelocity.length * 0.3f);\n\tanimCtrl.SetSpeed(\"Assets/\" + characterName + \"/Models/Run.ani\", planeVelocity.length * 0.3);\n\n\t// Set IK state (we will apply foot IK only when grounded!)\n\tfootIK.doIK = onGround;\n\n\t// Reset grounded flag for next frame\n\tonGround = false;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003e// Create XML patch instructions for screen joystick layout specific to this sample app\u003cbr\u003e\nString patchInstructions =\u003cbr\u003e\n\"\" +\u003cbr\u003e\n\"\t\u0026lt;add sel=\"/element\"\u0026gt;\" +\u003cbr\u003e\n\"\t\t\u0026lt;element type=“Button”\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Name” value=“Button3” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Position” value=\"-120 -120\" /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Size” value=“96 96” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Horiz Alignment” value=“Right” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Vert Alignment” value=“Bottom” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Texture” value=“Texture2D;Textures/TouchInput.png” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Image Rect” value=“96 0 192 96” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Hover Image Offset” value=“0 0” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Pressed Image Offset” value=“0 0” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;element type=“Text”\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\t\u0026lt;attribute name=“Name” value=“Label” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\t\u0026lt;attribute name=“Horiz Alignment” value=“Center” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\t\u0026lt;attribute name=“Vert Alignment” value=“Center” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\t\u0026lt;attribute name=“Color” value=“0 0 0 1” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\t\u0026lt;attribute name=“Text” value=“Gyroscope” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;element type=“Text”\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\t\u0026lt;attribute name=“Name” value=“KeyBinding” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\t\u0026lt;attribute name=“Text” value=“G” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\" +\u003cbr\u003e\n\"\t\t\" +\u003cbr\u003e\n\"\t\" +\u003cbr\u003e\n\"\t\u0026lt;remove sel=\"/element/element[./attribute[@name=‘Name’ and @value=‘Button0’]]/attribute[@name=‘Is Visible’]\" /\u0026gt;\" +\u003cbr\u003e\n\"\t\u0026lt;replace sel=\"/element/element[./attribute[@name=‘Name’ and @value=‘Button0’]]/element[./attribute[@name=‘Name’ and @value=‘Label’]]/attribute[@name=‘Text’]/\u003cspan class=\"mention\"\u003e@value\u003c/span\u003e\"\u0026gt;1st/3rd\" +\u003cbr\u003e\n\"\t\u0026lt;add sel=\"/element/element[./attribute[@name=‘Name’ and @value=‘Button0’]]\"\u0026gt;\" +\u003cbr\u003e\n\"\t\t\u0026lt;element type=“Text”\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Name” value=“KeyBinding” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Text” value=“F” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\" +\u003cbr\u003e\n\"\t\" +\u003cbr\u003e\n\"\t\u0026lt;remove sel=\"/element/element[./attribute[@name=‘Name’ and @value=‘Button1’]]/attribute[@name=‘Is Visible’]\" /\u0026gt;\" +\u003cbr\u003e\n\"\t\u0026lt;replace sel=\"/element/element[./attribute[@name=‘Name’ and @value=‘Button1’]]/element[./attribute[@name=‘Name’ and @value=‘Label’]]/attribute[@name=‘Text’]/\u003cspan class=\"mention\"\u003e@value\u003c/span\u003e\"\u0026gt;Jump\" +\u003cbr\u003e\n\"\t\u0026lt;add sel=\"/element/element[./attribute[@name=‘Name’ and @value=‘Button1’]]\"\u0026gt;\" +\u003cbr\u003e\n\"\t\t\u0026lt;element type=“Text”\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Name” value=“KeyBinding” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\t\u0026lt;attribute name=“Text” value=“SPACE” /\u0026gt;\" +\u003cbr\u003e\n\"\t\t\" +\u003cbr\u003e\n\"\t\" +\u003cbr\u003e\n\"\";[/spoiler]\u003c/p\u003e\n\u003cp\u003eEDIT:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elerp no longer needed\u003c/li\u003e\n\u003cli\u003etested OK without physics and with a crowd agent\u003c/li\u003e\n\u003cli\u003eremoved AnimationController dependency\u003c/li\u003e\n\u003cli\u003eported to C++ (needs some tests before publishing)\u003c/li\u003e\n\u003c/ul\u003e","post_number":11,"post_type":1,"updated_at":"2017-01-02T01:06:08.859Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":6,"reads":27,"readers_count":26,"score":35.4,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://node.name","internal":false,"reflection":false,"clicks":0},{"url":"http://log.Info","internal":false,"reflection":false,"clicks":0}],"read":true,"user_title":"Contributor","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":true,"admin":false,"staff":true,"user_id":9,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":6935,"name":"","username":"christianclavet","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/c/76d3ee/{size}.png","created_at":"2015-07-28T17:07:52.000Z","cooked":"\u003cp\u003eThis is simply incredible! IK combined with animation! Wow!\u003cbr\u003e\nAre the LUA events commands are the same on C++? Code look easy to port!\u003c/p\u003e","post_number":12,"post_type":1,"updated_at":"2017-01-02T01:06:09.087Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":19,"readers_count":18,"score":3.8,"yours":false,"topic_id":1010,"topic_slug":"solved-ik-foot-placement","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":171,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[5856,5859,5860,5877,5878,5881,5884,6411,6416,6418,6934,6935]},"timeline_lookup":[[1,2773],[2,2772],[4,2771],[6,2770],[8,2726],[10,2725],[11,2675]],"suggested_topics":[{"id":7260,"title":"Is urho3d supported on Windows 8 and below?","fancy_title":"Is urho3d supported on Windows 8 and below?","slug":"is-urho3d-supported-on-windows-8-and-below","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2022-05-11T12:24:39.422Z","last_posted_at":"2022-05-11T12:50:41.468Z","bumped":true,"bumped_at":"2022-05-11T12:50:41.468Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":5,"views":103,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1519,"username":"Integar","name":"Torque189","avatar_template":"/user_avatar/discourse.urho3d.io/integar/{size}/3795_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}}]},{"id":7129,"title":"Best Model Import Pipeline as of Jan 2022?","fancy_title":"Best Model Import Pipeline as of Jan 2022?","slug":"best-model-import-pipeline-as-of-jan-2022","posts_count":7,"reply_count":0,"highest_post_number":7,"image_url":null,"created_at":"2022-01-17T09:27:23.432Z","last_posted_at":"2022-01-17T20:37:59.458Z","bumped":true,"bumped_at":"2022-01-17T20:37:59.458Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":4,"views":170,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1334,"username":"najak3d","name":"Brian Knox","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/n/6a8cbe/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1038,"username":"dertom","name":"Thomas Trocha","avatar_template":"/user_avatar/discourse.urho3d.io/dertom/{size}/1815_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1165,"username":"throwawayerino","name":"Actually Permanent","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/da6949/{size}.png"}}]},{"id":7132,"title":"How to Draw Anti-Aliased Outlined Line on the UI layer?","fancy_title":"How to Draw Anti-Aliased Outlined Line on the UI layer?","slug":"how-to-draw-anti-aliased-outlined-line-on-the-ui-layer","posts_count":8,"reply_count":5,"highest_post_number":8,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/optimized/2X/c/c040fdbc2f1856c238ba6328fd7f5ff80b15858f_2_782x1024.jpeg","created_at":"2022-01-17T22:08:06.874Z","last_posted_at":"2022-01-20T20:13:30.614Z","bumped":true,"bumped_at":"2022-01-20T20:13:30.614Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":3,"views":173,"category_id":10,"featured_link":null,"has_accepted_answer":true,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1334,"username":"najak3d","name":"Brian Knox","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/n/6a8cbe/{size}.png"}},{"extras":null,"description":"Frequent Poster, Accepted Answer","user":{"id":631,"username":"JTippetts1","name":"J Tippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts1/{size}/96_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]},{"id":7204,"title":"How handle with multiple scenes?","fancy_title":"How handle with multiple scenes?","slug":"how-handle-with-multiple-scenes","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-02-23T16:15:02.697Z","last_posted_at":"2022-02-23T16:15:02.762Z","bumped":true,"bumped_at":"2022-02-23T16:15:02.762Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":131,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":1508,"username":"killinbassou","name":"killin","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/k/848f3c/{size}.png"}}]},{"id":7268,"title":"Get vertex position before Morph in shader","fancy_title":"Get vertex position before Morph in shader","slug":"get-vertex-position-before-morph-in-shader","posts_count":8,"reply_count":6,"highest_post_number":8,"image_url":null,"created_at":"2022-05-15T19:44:19.139Z","last_posted_at":"2022-05-16T06:11:07.099Z","bumped":true,"bumped_at":"2022-08-12T22:38:31.553Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":5,"views":209,"category_id":10,"featured_link":null,"has_accepted_answer":true,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1205,"username":"Askhento","name":"Askhento","avatar_template":"/user_avatar/discourse.urho3d.io/askhento/{size}/3849_2.png"}},{"extras":"latest","description":"Most Recent Poster, Accepted Answer","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1358,"username":"JSandusky","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/jsandusky/{size}/3220_2.png"}}]}],"tags_descriptions":{},"id":1010,"title":"[SOLVED] IK foot placement","fancy_title":"[SOLVED] IK foot placement","posts_count":12,"created_at":"2015-04-21T14:57:42.000Z","views":2333,"reply_count":0,"like_count":0,"last_posted_at":"2015-07-28T17:07:52.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"solved-ik-foot-placement","category_id":10,"word_count":6849,"deleted_at":null,"user_id":9,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_1010","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":12,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":6,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":9,"username":"Mike","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png","post_count":6,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"moderator":true,"trust_level":2},{"id":197,"username":"GoogleBot42","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/googlebot42/{size}/62_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":3,"username":"cadaver","name":"Lasse Öörni","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"admin":true,"trust_level":2},{"id":32,"username":"globus","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/5f9b8f/{size}.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1},{"id":151,"username":"sabotage3d","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":171,"username":"christianclavet","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/c/76d3ee/{size}.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1}],"created_by":{"id":9,"username":"Mike","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png"},"last_poster":{"id":171,"username":"christianclavet","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/c/76d3ee/{size}.png"},"links":[{"url":"http://discourse.urho3d.io/t/solved-custom-ik-broke-recently-was-getworld/1492/2","title":"[SOLVED] custom IK broke recently (was GetWorld*)","internal":true,"attachment":false,"reflection":true,"clicks":2,"user_id":109,"domain":"discourse.urho3d.io","root_domain":"urho3d.io"},{"url":"http://discourse.urho3d.io/t/ue4-style-ik/2021/2","title":"UE4-style IK?","internal":true,"attachment":false,"reflection":true,"clicks":1,"user_id":263,"domain":"discourse.urho3d.io","root_domain":"urho3d.io"}]}}