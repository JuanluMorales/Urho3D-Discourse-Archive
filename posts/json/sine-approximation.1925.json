{"post_stream":{"posts":[{"id":11428,"name":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","username":"Modanung","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png","created_at":"2016-03-27T23:06:33.000Z","cooked":"\u003cp\u003e\u003ca href=\"https://github.com/urho3d/Urho3D/pull/1271\" data-bbcode=\"true\"\u003eSPLIT FROM GITHUB\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTo get fast sines I use a Vector of floats as a look-up table. It is generated when the program starts - but this should be possible during compile time - and after that you get pretty accurate (depending on the resolution) and fast results. Quarter of a period would be enough to generate since this data could be mirrored to fill in the rest.\u003cbr\u003e\nWould this be a good way to have fast sines built into Urho? Since sines are pretty versatile and useful for game world control.\u003c/p\u003e\n\u003cp\u003e[quote=‚Äúdamu‚Äù]I also thought of using a look-up table with a resolution of for example 1 degree. It would have to be interpolated. I have the feeling it would be slower as one of the variants from/based on Michaels work but it is worth to benchmark and to compare the precision. With caching it might actually be faster.\u003c/p\u003e\n\u003cp\u003eBut it would be also an approximation (and require fmod) which cadaver might not approve?\u003c/p\u003e\n\u003cp\u003eIn general a speedup there and maybe in other places would be good of course. It‚Äôs a design decision and I also thought of the possibility of making such faster but more inaccurate versions optional via Urho CMake options. That may not be that important for this case but there might be other places where an inaccurate approximation makes a higher performance impact which might be desired.\u003c/p\u003e\n\u003cp\u003eOh I also saw a talk (here: \u003ca href=\"https://youtu.be/Nsf2_Au6KxU?t=41m40s\"\u003eyoutu.be/Nsf2_Au6KxU?t=41m40s\u003c/a\u003e) by a Valve developer who worked at ‚ÄúLeft for Dead‚Äù and he showed a fast and approximated sincos using SIMD, so it seems that Valve uses such things. I also heard of Unreal having various fast approximations.[/quote]\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T01:11:34.260Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":40,"reads":3,"readers_count":2,"score":200.6,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/urho3d/Urho3D/pull/1271","internal":false,"reflection":false,"title":"BillboardSet::UpdateVertexBuffer optimization by damu ¬∑ Pull Request #1271 ¬∑ urho3d/Urho3D ¬∑ GitHub","clicks":2},{"url":"https://youtu.be/Nsf2_Au6KxU?t=41m40s","internal":false,"reflection":false,"title":"Performance Optimization, SIMD and Cache","clicks":0}],"read":true,"user_title":"","bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":192,"hidden":false,"trust_level":0,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"user_suspended":true,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11433,"name":"Yao Wei Tjong","username":"weitjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png","created_at":"2016-03-28T15:17:00.000Z","cooked":"\u003cp\u003eI don‚Äôt want to upload my graphs to somewhere else just so that I can link them here, so I uploaded them to the same github issue that you splitted. \u003ca href=\"https://github.com/urho3d/Urho3D/pull/1271#issuecomment-202431947\"\u003egithub.com/urho3d/Urho3D/pull/1 ‚Ä¶ -202431947\u003c/a\u003e. Based on these graphs, the squared quadratic approximation of the sine function looks pretty darn good.\u003c/p\u003e\n\u003cp\u003eRange from -pi to pi:\u003cbr\u003e\n\u003cdiv class=\"lightbox-wrapper\"\u003e\u003ca class=\"lightbox\" href=\"https://cloud.githubusercontent.com/assets/5548048/14080685/48aeef08-f539-11e5-8751-7c26fcf0e7da.png\" title=\"\"\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/5548048/14080685/48aeef08-f539-11e5-8751-7c26fcf0e7da.png\" alt=\"\" width=\"690\" height=\"420\"\u003e\u003cdiv class=\"meta\"\u003e\u003csvg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"\u003e\u003cuse xlink:href=\"#far-image\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003cspan class=\"filename\"\u003e\u003c/span\u003e\u003cspan class=\"informations\"\u003e1547√ó942\u003c/span\u003e\u003csvg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"\u003e\u003cuse xlink:href=\"#discourse-expand\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eZoom in on range from 0 to pi:\u003cbr\u003e\n\u003cdiv class=\"lightbox-wrapper\"\u003e\u003ca class=\"lightbox\" href=\"https://cloud.githubusercontent.com/assets/5548048/14080694/534ac9be-f539-11e5-9fac-a44a797b0817.png\" title=\"\"\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/5548048/14080694/534ac9be-f539-11e5-9fac-a44a797b0817.png\" alt=\"\" width=\"690\" height=\"417\"\u003e\u003cdiv class=\"meta\"\u003e\u003csvg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"\u003e\u003cuse xlink:href=\"#far-image\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003cspan class=\"filename\"\u003e\u003c/span\u003e\u003cspan class=\"informations\"\u003e1541√ó933\u003c/span\u003e\u003csvg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"\u003e\u003cuse xlink:href=\"#discourse-expand\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-01-02T01:11:34.632Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":4,"readers_count":3,"score":0.8,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"Yao Wei Tjong","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/urho3d/Urho3D/pull/1271#issuecomment-202431947","internal":false,"reflection":false,"title":"BillboardSet::UpdateVertexBuffer optimization by damu ¬∑ Pull Request #1271 ¬∑ urho3d/Urho3D ¬∑ GitHub","clicks":0},{"url":"https://cloud.githubusercontent.com/assets/5548048/14080694/534ac9be-f539-11e5-9fac-a44a797b0817.png","internal":false,"reflection":false,"title":"534ac9be-f539-11e5-9fac-a44a797b0817.png","clicks":0},{"url":"https://cloud.githubusercontent.com/assets/5548048/14080685/48aeef08-f539-11e5-8751-7c26fcf0e7da.png","internal":false,"reflection":false,"title":"48aeef08-f539-11e5-8751-7c26fcf0e7da.png","clicks":0}],"read":true,"user_title":"Admin","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":4,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11434,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-03-28T18:40:13.000Z","cooked":"\u003cp\u003eCool graph drawings.\u003cbr\u003e\nReposting my test output where one can compare the squared quadratic with sinf and cosf by values: \u003ca href=\"http://i.imgur.com/b8LEPUY.jpg\" rel=\"nofollow noopener\"\u003ei.imgur.com/b8LEPUY.jpg\u003c/a\u003e\u003cbr\u003e\nJust to be sure: That graphs function is the same as in the code currently in the pull request, right? \u003ca href=\"https://github.com/urho3d/Urho3D/pull/1271/commits/86ff45ce74251b03d2edea56691220a772275bae\" rel=\"nofollow noopener\"\u003egithub.com/urho3d/Urho3D/pull/1 ‚Ä¶ a772275bae\u003c/a\u003e\u003cbr\u003e\nMy test output was made with that. Also in my benchmark this approximation was nearly 3 times as fast as sincosf.\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2017-01-02T01:11:34.702Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":2,"readers_count":1,"score":0.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/urho3d/Urho3D/pull/1271/commits/86ff45ce74251b03d2edea56691220a772275bae","internal":false,"reflection":false,"title":"BillboardSet::UpdateVertexBuffer optimization by damu ¬∑ Pull Request #1271 ¬∑ urho3d/Urho3D ¬∑ GitHub","clicks":0},{"url":"http://i.imgur.com/b8LEPUY.jpg","internal":false,"reflection":false,"title":"b8LEPUY.jpg","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11437,"name":"Yao Wei Tjong","username":"weitjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png","created_at":"2016-03-28T22:52:45.000Z","cooked":"\u003cp\u003eYes, the graph uses the same equation sighted in the original post made by Nick which your program‚Äôs algorithm derived from.\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2017-01-02T01:11:34.932Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":2,"readers_count":1,"score":0.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"Yao Wei Tjong","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Admin","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":4,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11438,"name":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","username":"Modanung","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png","created_at":"2016-03-29T00:26:11.000Z","cooked":"\u003cp\u003eRight, and there‚Äôs no need trying to be faster than a squared quadratic function?\u003cbr\u003e\nIt does line up real nice.\u003c/p\u003e","post_number":5,"post_type":1,"updated_at":"2017-01-02T01:11:34.989Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":1,"readers_count":0,"score":0.2,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"","bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":192,"hidden":false,"trust_level":0,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"user_suspended":true,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11440,"name":"Yao Wei Tjong","username":"weitjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png","created_at":"2016-03-29T03:07:16.000Z","cooked":"\u003cp\u003eI don‚Äôt think there is a need to be more accurate than the squared quadratic approximation approach. The implementation, of course, is always the faster the better. Nick in his post has already showed how to eliminate the code branching to speed up the code execution, for one instance. I am not sure why Gawag does not use that. So, I have a good feeling it could be potentially more than 3x faster.\u003c/p\u003e","post_number":6,"post_type":1,"updated_at":"2017-01-02T01:11:35.120Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":2,"readers_count":1,"score":5.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"Yao Wei Tjong","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Admin","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":4,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11442,"name":"","username":"TheComet","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","created_at":"2016-03-29T05:59:32.000Z","cooked":"\u003cp\u003eHow does a small-ish lookup table with linear interpolation compare to the quadratic approximation? I‚Äôd imagine it‚Äôd be faster, but obviously you consume more memory.\u003c/p\u003e\n\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/modanung/40/1123_1.png\" class=\"avatar\"\u003e Modanung:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003ebut this should be possible during compile time\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eThe memory needs to be stored somewhere, so there‚Äôs no way around having to fill in the array at some point during runtime. Unless you do something like have CMake generate the array and store it in a \u003cspan class=\"hashtag\"\u003e#define\u003c/span\u003e or something.  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/open_mouth.png?v=5\" title=\":open_mouth:\" class=\"emoji\" alt=\":open_mouth:\"\u003e\u003c/p\u003e\n\u003cp\u003eYou could use the magic of templates to generate it during startup.\u003c/p\u003e\n\u003cp\u003e[code]\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u003c/p\u003e\n\u003cp\u003enamespace detail {\u003cbr\u003e\ntemplate \u0026lt;class T, int N, int D\u0026gt;\u003cbr\u003e\nstruct SineInitializer;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etemplate \u0026lt;class T, int N\u0026gt;\nstruct SineInitializer\u0026lt;T,N,0\u0026gt;\n{   \n    static void init(T* tableSlot) { (void)tableSlot; }\n};\n\ntemplate \u0026lt;class T, int N, int D\u0026gt;\nstruct SineInitializer\n{   \n    static void init(T* tableSlot)\n    {   \n        *tableSlot = sin(M_PI * 0.5 * T(N-D)/N);\n        SineInitializer\u0026lt;T, N, D-1\u0026gt;::init(tableSlot + 1);\n    }\n};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e} // namespace detail\u003c/p\u003e\n\u003cp\u003etemplate \u0026lt;class T, int N\u0026gt;\u003cbr\u003e\nstruct SineTable\u003cbr\u003e\n{\u003cbr\u003e\nSineTable()\u003cbr\u003e\n{ detail::SineInitializer\u0026lt;T,N,N\u0026gt;::init(table); }\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eT table[N];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eSineTable\u0026lt;double, 16\u0026gt; gSine;\u003c/p\u003e\n\u003cp\u003eint main()\u003cbr\u003e\n{\u003cbr\u003e\nfor(int i = 0; i != 16; ++i)\u003cbr\u003e\nstd::cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \": \" \u0026lt;\u0026lt; gSine.table[i] \u0026lt;\u0026lt; std::endl;\u003cbr\u003e\n}[/code]\u003c/p\u003e\n\u003cp\u003eBeautiful, isn‚Äôt it? Why wouldn‚Äôt everyone want code like that in their program?\u003c/p\u003e\n\u003cp\u003eThis line here generates a static array of 16 doubles (double arr[16]\u003cimg src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=5\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"\u003e and fills it with a quarter of a sine function (ranging from 0? to 84.375?).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince it‚Äôs static, the constructor is called during start up and you‚Äôll have your array filled when entering main(). When compiling with -O3 it ends up inlining all function calls, so it‚Äôs efficient.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e0: 0\n1: 0.0980171\n2: 0.19509\n3: 0.290285\n4: 0.382683\n5: 0.471397\n6: 0.55557\n7: 0.634393\n8: 0.707107\n9: 0.77301\n10: 0.83147\n11: 0.881921\n12: 0.92388\n13: 0.95694\n14: 0.980785\n15: 0.995185\u003c/code\u003e\u003c/p\u003e","post_number":7,"post_type":1,"updated_at":"2017-01-02T01:11:35.241Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":2,"readers_count":1,"score":0.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Community repository maintainer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":37,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11445,"name":"Yao Wei Tjong","username":"weitjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png","created_at":"2016-03-29T07:23:36.000Z","cooked":"\u003cp\u003eHave you considered the time to fetch the data from the memory and the time required to interpolate between two pre-calculated sine values? Not to mention how would you do the latter without sacrificing the accuracy?\u003c/p\u003e\n\u003cp\u003eI just spend some time to lookup how the glibc implements the sincosf() function. It appears that the function just internally call __kernel_sinf() and __kernel_cosf() functions separately. There is no magic there. The __kernel_sinf() and __kernel_cosf() functions are implemented using, guess what, some kind of polynomial expansion approximation too. It just that they approximate the true sine/cosine values at a very high accuracy because they expand to a longer series. In this case until the sixth series.\u003c/p\u003e\n\u003cp\u003eThe bottom line. We are just comparing one sine approximation with another. It is a trade-off between accuracy and speed. So, unless we could get a massive speed boost without sacrificing too much on accuracy, I see now why Lasse prefers to stick with the ‚Äúnative‚Äù implementation.\u003c/p\u003e","post_number":8,"post_type":1,"updated_at":"2017-01-02T01:11:35.452Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":2,"readers_count":1,"score":0.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"Yao Wei Tjong","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Admin","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":4,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11452,"name":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","username":"Modanung","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png","created_at":"2016-03-29T11:40:26.000Z","cooked":"\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/thecomet/40/142_1.png\" class=\"avatar\"\u003e TheComet:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou could use the magic of templates to generate it during startup.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eThat‚Äôs one option. c++11 introduced the \u003ca href=\"http://en.cppreference.com/w/cpp/language/constexpr\" data-bbcode=\"true\"\u003econstexpr\u003c/a\u003e keyword, which I think might be used for this as well?\u003cbr\u003e\nBut since it‚Äôs c++11 that‚Äôs no option for a built-in solution at the moment.\u003c/p\u003e","post_number":9,"post_type":1,"updated_at":"2017-01-02T01:11:35.936Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":1,"readers_count":0,"score":0.2,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://en.cppreference.com/w/cpp/language/constexpr","internal":false,"reflection":false,"title":"constexpr specifier (since C++11) - cppreference.com","clicks":0}],"read":true,"user_title":"","bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":192,"hidden":false,"trust_level":0,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"user_suspended":true,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11456,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-03-29T23:15:34.000Z","cooked":"\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/weitjong/40/4_1.png\" class=\"avatar\"\u003e weitjong:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNick in his post has already showed how to eliminate the code branching to speed up the code execution, for one instance. I am not sure why Gawag does not use that. So, I have a good feeling it could be potentially more than 3x faster.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eDepending on how abs is implemented there is still branching but just outsourced into a library function.\u003cbr\u003e\nI started testing out various things and also read the article from Nick by now, which I didn‚Äôt before for some reason. I may be able to make a degree version of the squared quadratic approach as he describes how he got those values.\u003cbr\u003e\nThere are various things one can try like testing abs, testing small branches, testing big branches, comparing assembler output, ‚Ä¶ No idea how all that changes the performance. Haven‚Äôt had much time so far, I‚Äôll try to find some tomorrow.\u003cbr\u003e\nI could also test a version with a cache. I suspect it‚Äôs less precise than the squared quadratic approach and slower but I‚Äôm not sure how good the CPU cache actually is, maybe we‚Äôll get a surprise. Also performance numbers are actually interesting as well.\u003cbr\u003e\nI think the fmodf is one of the more expensive things in the code‚Ä¶ Could compare some degree-int(degree/180.0f)*180 thingy or something as an alternative as well‚Ä¶\u003c/p\u003e","post_number":10,"post_type":1,"updated_at":"2017-01-02T01:11:36.183Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":2,"readers_count":1,"score":0.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11471,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-03-30T20:05:48.000Z","cooked":"\u003cp\u003eThe version with abs (fabsf) from Nick is a bit slower as my version with manual branching: \u003ca href=\"http://i.imgur.com/ErnfeLu.jpg\" rel=\"nofollow noopener\"\u003ei.imgur.com/ErnfeLu.jpg\u003c/a\u003e\u003cbr\u003e\nI added cosine calculation and value wrapping. The resulting values are identical.\u003cbr\u003e\nDoes someone see a further optimization?\u003c/p\u003e\n\u003cp\u003eTesting caching now and moving that to a separate testing project and uploading that to GitHub. Oh and I also could try my idea to get rid of fmodf.\u003c/p\u003e","post_number":11,"post_type":1,"updated_at":"2017-01-02T01:11:37.260Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":2,"readers_count":1,"score":5.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://i.imgur.com/ErnfeLu.jpg","internal":false,"reflection":false,"title":"ErnfeLu.jpg","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11473,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-03-31T00:13:00.000Z","cooked":"\u003cp\u003eMade a separate test project: \u003ca href=\"https://github.com/damu/test_sincosf\" rel=\"nofollow noopener\"\u003egithub.com/damu/test_sincosf\u003c/a\u003e\u003cbr\u003e\nThe sincos using a cache is not finished yet but the first results are not as bad as expected. It seems to be a bit slower as the squared quadratic approach but maybe I can optimize that more and I‚Äôm also not sure how the precision is.\u003c/p\u003e\n\u003cp\u003eMy idea with a faster fmodf actually worked and is around 3 times faster  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/open_mouth.png?v=5\" title=\":open_mouth:\" class=\"emoji\" alt=\":open_mouth:\"\u003e : \u003ca href=\"http://i.imgur.com/36IMOTu.png\" rel=\"nofollow noopener\"\u003ei.imgur.com/36IMOTu.png\u003c/a\u003e (build with -O3 and -ffast-math as can be seen at the bottom)\u003cbr\u003e\nHow can that be? Does one have to do everything himself if one wants performance?\u003c/p\u003e\n\u003cp\u003eHas anyone another idea for a/the non-cached version (regarding more optimization)?\u003cbr\u003e\nSIMD (SSE2) could help but I‚Äôm not sure if that can be used in that billboard place and it also kinda restricts to x86 and I‚Äôve also never used that personally. Also it would be quite special for that one place and the idea is more to get a general better sincosf.\u003c/p\u003e\n\u003cp\u003eSuch optimizations are quite work intense and I‚Äôve again put several hours into it. But I‚Äôm also learning more by doing that.\u003c/p\u003e","post_number":12,"post_type":1,"updated_at":"2017-01-02T01:11:37.402Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":2,"readers_count":1,"score":5.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/damu/test_sincosf","internal":false,"reflection":false,"title":"GitHub - damu/test_sincosf: Optimizing sincosf.","clicks":1},{"url":"http://i.imgur.com/36IMOTu.png","internal":false,"reflection":false,"title":"36IMOTu.png","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11478,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-03-31T12:09:48.000Z","cooked":"\u003cp\u003eOops.  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/blush.png?v=5\" title=\":blush:\" class=\"emoji\" alt=\":blush:\"\u003e\u003cbr\u003e\nThe fabsf version from Nick is actually a bit faster as my branched version. The slower code was caused by the option ‚Äú-march=pentium-m‚Äù which I had enabled in CodeBlocks because I wanted to enable SSE2 and other optimizations but that actually made Nicks fabsf version and sinf and cosf slower. Only found that out as I got quite different numbers in QtCreator.\u003cbr\u003e\nHm, actually it was slower with Urho‚Äôs default CMake options as well. Uhm?\u003cbr\u003e\nThe numbers without that option are:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e0.807046 \t\u0026lt;- sinf cosf\n0.873049 \t\u0026lt;- sincosf\n0.19101 \t\u0026lt;- sincosf_fast (unprecise)\n0.18301 \t\u0026lt;- SinCosfFast (unprecise)\n0.309017 \t\u0026lt;- sincosf_fast2 (precise and better branching)\n0.280016 \t\u0026lt;- sincosf_fast3 (precise and using fabsf instead of branches)\n0.897051 \t\u0026lt;- SinCosf_cached_90 (incorrect results, speed could be a bit different with correct calculations)\n0.283016 \t\u0026lt;- SinCosf_cached_360\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003ea separate sinf and cosf is now slightly faster as sincosf.\u003c/li\u003e\n\u003cli\u003eNicks fabsf version (sincosf_fast3) is slightly faster as my branch version (sincosf_fast2)\u003c/li\u003e\n\u003cli\u003ethe version with a cache with 360 degrees is as fast as the precise fabsf version from Nick and weirdly really precise. Almost looks like sincosf uses a look-up table as well but slower.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNicks fabsf version has the advantage of not using memory and not getting cold cache effects which the cached_360 does. Also it is possible to avoid the degree to radians conversion to make it even faster.\u003c/p\u003e\n\u003cp\u003eAlso I‚Äôm now using my ‚Äúfaster‚Äù fmodf (fmodf_fast). The relevant results with fmodf instead are:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e0.259014 \t\u0026lt;- sincosf_fast (unprecise)\n0.255014 \t\u0026lt;- SinCosfFast (unprecise)\n0.287016 \t\u0026lt;- sincosf_fast2 (precise and better branching)\n0.272015 \t\u0026lt;- sincosf_fast3 (precise and using fabsf instead of branches)\n0.828047 \t\u0026lt;- SinCosf_cached_90 (incorrect results, speed could be a bit different with correct calculations)\n0.259014 \t\u0026lt;- SinCosf_cached_360\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor some reason some variants are faster with fmodf and others with my fmodf_fast. I guess it has to do with inlining and mine is only faster when inlined, which GCC only does in the shorter loops. \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/unamused.png?v=5\" title=\":unamused:\" class=\"emoji\" alt=\":unamused:\"\u003e\u003c/p\u003e\n\u003cp\u003eI‚Äôll try to dig more into the fmodf and fmodf_fast weirdness and try to optimize Nicks version with degrees and maybe other stuff, like a manually inlined fmodf_fast. Oh and I‚Äôll also get some precision statistics which is especially interesting in comparison with the cached version.\u003c/p\u003e\n\u003cp\u003eEdit: parts of the things stated here are wrong. I had some compiler version and 32bit vs 64bit executable chaos. The compiler option mentioned above was not the cause.\u003c/p\u003e","post_number":13,"post_type":1,"updated_at":"2017-01-02T01:11:37.722Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":2,"readers_count":1,"score":0.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11481,"name":"Yao Wei Tjong","username":"weitjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png","created_at":"2016-03-31T12:52:58.000Z","cooked":"\u003cp\u003eJust wonder how did you time your program. In Linux, I could just wrap the program that I want to time with a ‚Äútime‚Äù command. And also for this kind of the tests, I would ensure my CPU speed scaling not causing wrong reading by setting the CPU frequency governor to the highest setting available (instead of default powersave mode). But ignore me if you have already done so.\u003c/p\u003e","post_number":14,"post_type":1,"updated_at":"2017-01-02T01:11:37.938Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":2,"readers_count":1,"score":0.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"Yao Wei Tjong","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Admin","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":4,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11493,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-03-31T23:02:32.000Z","cooked":"\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/weitjong/40/4_1.png\" class=\"avatar\"\u003e weitjong:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eJust wonder how did you time your program. In Linux, I could just wrap the program that I want to time with a ‚Äútime‚Äù command. And also for this kind of the tests, I would ensure my CPU speed scaling not causing wrong reading by setting the CPU frequency governor to the highest setting available (instead of default powersave mode). But ignore me if you have already done so.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eI‚Äôm using std::chrono::high_resolution_clock as you can see in the code: \u003ca href=\"https://github.com/damu/test_sincosf/blob/master/main.cpp#L6\" rel=\"nofollow noopener\"\u003egithub.com/damu/test_sincosf/bl ‚Ä¶ ain.cpp#L6\u003c/a\u003e\u003cbr\u003e\nIt‚Äôs a real time clock, so no cycle counting stuff.\u003cbr\u003e\nI‚Äôm on a desktop so no real adjustable CPU speed or powersave mode. Also the program should be always executed at full speed as it is not waiting or something. The results are quite consistent and close to each other when starting the program several times or when executing the same test several times.\u003c/p\u003e\n\u003cp\u003eOptimizing code is always weird. Really small things can make big differences.\u003c/p\u003e\n\u003cp\u003eOh what the hay. I think I found the reason:\u003cbr\u003e\nThe version with the slow sinf and cosf and fast fmodf_fast was a 64bit application build by a GCC 4.8.2.\u003cbr\u003e\nThe version with the fast sinf and cosf and slow fmodf_fast was a 32bit application build by a GCC 4.9.2. Both from the MinGW64 project.\u003cbr\u003e\nI guess the newer GCC/MinGW version has a faster sinf and cosf but my fmodf_fast is slightly slower than fmodf in 32bit mode but way faster in 64bit mode. Also the whole sincosf_cached_360 is way faster on 64bit.\u003c/p\u003e\n\u003cp\u003eI actually had already checked for 32bit/64bit stuff and different compiler versions but it seems my QtCreator was wrongly configured as the ‚Äú32bit‚Äù build there was actually a 64bit build with the same 4.8.2 GCC.\u003cbr\u003e\nI‚Äôll try to get more up to date compilers and test with properly configured IDEs‚Ä¶  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/unamused.png?v=5\" title=\":unamused:\" class=\"emoji\" alt=\":unamused:\"\u003e That took really long to figure out‚Ä¶\u003c/p\u003e","post_number":15,"post_type":1,"updated_at":"2017-01-02T01:11:38.785Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":2,"readers_count":1,"score":0.4,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/damu/test_sincosf/blob/master/main.cpp#L6","internal":false,"reflection":false,"title":"test_sincosf/main.cpp at master ¬∑ damu/test_sincosf ¬∑ GitHub","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11495,"name":"Yao Wei Tjong","username":"weitjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png","created_at":"2016-03-31T23:19:54.000Z","cooked":"\u003caside class=\"quote\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt width=\"20\" height=\"20\" src=\"https://sjc6.discourse-cdn.com/standard17/user_avatar/discourse.urho3d.io/gawag/40/68_1.png\" class=\"avatar\"\u003e gawag:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI‚Äôm on a desktop so no real adjustable CPU speed or powersave mode. Also the program should be always executed at full speed as it is not waiting or something.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eI won‚Äôt be so sure about that. I am using desktop CPU from Intel and I know mine has frequency scaler, my motherboard from Asus also has feature like Cool n Quiet. Anyway if you got a consistent readings then I suppose it‚Äôs non issue for you.\u003c/p\u003e","post_number":16,"post_type":1,"updated_at":"2017-01-02T01:11:38.916Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":3,"readers_count":2,"score":0.6,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"Yao Wei Tjong","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Admin","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":4,"hidden":false,"trust_level":4,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":11523,"name":"gawag AKA damu","username":"gawag","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","created_at":"2016-04-02T16:24:44.000Z","cooked":"\u003cp\u003eThis is really weird. Some things I assumed are again wrong.\u003cbr\u003e\nSorry for spamming this thread so much. I‚Äôm out of ideas regarding the compiler dependent results and stopping that now with final results:\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"bbcode-b\"\u003eWindows with MinGW:\u003c/span\u003e\u003cbr\u003e\nI‚Äôve now benchmarked with GCC 5.3.0 in 64bit and 32bit, both 64bit and 32bit are around these values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e1.61709         \u0026lt;- sinf cosf\n0.830047        \u0026lt;- sincosf\nwith using fmodf:\n0.263015        \u0026lt;- sincosf_fast\n0.242013        \u0026lt;- SinCosfFast\n0.274015        \u0026lt;- sincosf_fast2 (precise and better branching)\n0.249014        \u0026lt;- sincosf_fast3 (precise and using fabsf instead of branches)\n0.278015        \u0026lt;- SinCosf_cached_90\n0.239013        \u0026lt;- SinCosf_cached_360\nwith using my fmodf_fast:\n0.157009        \u0026lt;- sincosf_fast\n0.147008        \u0026lt;- SinCosfFast\n0.216012        \u0026lt;- sincosf_fast2 (precise and better branching)\n0.17901         \u0026lt;- sincosf_fast3 (precise and using fabsf instead of branches)\n0.222012        \u0026lt;- SinCosf_cached_90\n0.17901         \u0026lt;- SinCosf_cached_360\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI‚Äôve no idea what‚Äôs going on. My fmodf_fast is actually faster as fmodf, as I had hoped. The results are the same with this MinGW in CodeBlocks and QtCreator with their default options (both with additionally -O3 -ffast-math).\u003cbr\u003e\nI assume the one MinGW with the faster sinf and cosf was some special one. I have now four MinGW (AKA GCC on Windows) versions (two 32bit and two 64bit and three different GCC versions(4.8.2, 4.9.2 and 5.3)) that all have the same results with a slow sinf and cos and fast fmodf_fast.\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"bbcode-b\"\u003eLinux\u003c/span\u003e\u003cbr\u003e\nBenchmark results on a 64bit Linux system with GCC 5.2.0:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e0.23583 \t\u0026lt;- sinf cosf\n0.252991 \t\u0026lt;- sincosf\nwith using fmodf:\n0.254887 \t\u0026lt;- sincosf_fast\n0.217493 \t\u0026lt;- SinCosfFast\n0.287769 \t\u0026lt;- sincosf_fast2 (precise and better branching)\n0.232882 \t\u0026lt;- sincosf_fast3 (precise and using fabsf instead of branches)\n0.533353 \t\u0026lt;- SinCosf_cached_90\n0.250574 \t\u0026lt;- SinCosf_cached_360\nwith using my fmodf_fast:\n0.168701 \t\u0026lt;- sincosf_fast\n0.127137 \t\u0026lt;- SinCosfFast\n0.231201 \t\u0026lt;- sincosf_fast2 (precise and better branching)\n0.194316 \t\u0026lt;- sincosf_fast3 (precise and using fabsf instead of branches)\n0.517385 \t\u0026lt;- SinCosf_cached_90\n0.208518 \t\u0026lt;- SinCosf_cached_360\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan class=\"bbcode-b\"\u003eWindows with VS2015\u003c/span\u003e\u003cbr\u003e\nAnd here comes the troll Visual Studio 2015  \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/open_mouth.png?v=5\" title=\":open_mouth:\" class=\"emoji\" alt=\":open_mouth:\"\u003e : \u003ca href=\"http://i.imgur.com/wFQLowA.png\" rel=\"nofollow noopener\"\u003ei.imgur.com/wFQLowA.png\u003c/a\u003e I‚Äôve tested everything five times as you can see.\u003cbr\u003e\nI‚Äôll call it Banana Studio from now on. Also there are more ‚Äúwat‚Äù results as the ones I‚Äôve marked, kinda missed at least the sincosf_fast3 weirdness.\u003c/p\u003e\n\u003cp\u003eThe fmodf benchmark on Visual Studio is relative consistent around these values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003ex86:\n5.47131         \u0026lt;- fmodf\n0.475393        \u0026lt;- manual\n0.474258        \u0026lt;- fmodf_fast\nx64:\n1.84036         \u0026lt;- fmodf\n0.497435        \u0026lt;- manual\n0.497714        \u0026lt;- fmodf_fast\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe fmodf benchmark is around these value for GCC 5.3.0 32bit and 64bit on Windows and GCC 5.2.0 64bit on Linux (haven‚Äôt tested 32bit on Linux):\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e0.977551 \t\u0026lt;- fmodf\n0.334571 \t\u0026lt;- manual\n0.332621 \t\u0026lt;- fmodf_fast\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cspan class=\"bbcode-b\"\u003eConclusion:\u003c/span\u003e\u003cbr\u003e\nSo the fmodf_fast approach seems to be mostly way faster. But the sinf, cosf and sincosf functions are all over the place depending on the system and STL implementation.\u003cbr\u003e\nAlso Visual Studio is really weird.\u003cbr\u003e\nAn alternative for sinf\u0026amp;cosf or sincosf would be good for at least MinGW as it is really slow there. Not sure about Banana Studio though as it seems to be doing a lot of code elimination in this test.\u003c/p\u003e\n\u003cp\u003eEdit (don‚Äôt want to make a new post for this):\u003cbr\u003e\nI tried making the currently best approximation SinCos3 with degrees so that one saves the degrees to radians conversion. I couldn‚Äôt get the values right to have the best values but the measured time in my test is 0.18 seconds compared to the version with radians (and the required conversion) which is 0.21 seconds. As expected the degree version is slightly faster.\u003c/p\u003e","post_number":17,"post_type":1,"updated_at":"2017-01-02T01:11:40.975Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":3,"readers_count":2,"score":0.6,"yours":false,"topic_id":1925,"topic_slug":"sine-approximation","display_username":"gawag AKA damu","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://i.imgur.com/wFQLowA.png","internal":false,"reflection":false,"title":"wFQLowA.png","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":206,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[11428,11433,11434,11437,11438,11440,11442,11445,11452,11456,11471,11473,11478,11481,11493,11495,11523]},"timeline_lookup":[[1,2431],[3,2430],[10,2429],[11,2428],[15,2427],[17,2426]],"suggested_topics":[{"id":7062,"title":"Is WebGL2.0 \u0026 GLES3.0 being supported in the near future?","fancy_title":"Is WebGL2.0 \u0026amp; GLES3.0 being supported in the near future?","slug":"is-webgl2-0-gles3-0-being-supported-in-the-near-future","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2021-11-23T09:04:28.802Z","last_posted_at":"2021-11-23T21:44:08.088Z","bumped":true,"bumped_at":"2021-11-23T21:44:08.088Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":199,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1490,"username":"Sunc","name":"DoubleSuper","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/df788c/{size}.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":631,"username":"JTippetts1","name":"J Tippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts1/{size}/96_2.png"}}]},{"id":7136,"title":"Open-source ocean shader system","fancy_title":"Open-source ocean shader system","slug":"open-source-ocean-shader-system","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-01-19T23:11:15.784Z","last_posted_at":"2022-01-19T23:11:15.858Z","bumped":true,"bumped_at":"2022-01-19T23:11:15.858Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":177,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":1304,"username":"lebrewer","name":"lebrewer","avatar_template":"/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]},{"id":7095,"title":"Texture2D from imported GPU memory (interop)","fancy_title":"Texture2D from imported GPU memory (interop)","slug":"texture2d-from-imported-gpu-memory-interop","posts_count":6,"reply_count":2,"highest_post_number":6,"image_url":null,"created_at":"2021-12-09T10:52:31.426Z","last_posted_at":"2021-12-13T15:40:35.300Z","bumped":true,"bumped_at":"2021-12-13T15:40:35.300Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":316,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1496,"username":"ange","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/a/76d3ee/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7196,"title":"Windows Urho3D build with -DURHO3D_OPENGL=1 using rake","fancy_title":"Windows Urho3D build with -DURHO3D_OPENGL=1 using rake","slug":"windows-urho3d-build-with-durho3d-opengl-1-using-rake","posts_count":18,"reply_count":9,"highest_post_number":19,"image_url":null,"created_at":"2022-02-20T12:49:25.777Z","last_posted_at":"2022-02-24T18:24:11.679Z","bumped":true,"bumped_at":"2022-02-24T18:24:11.679Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":3,"views":254,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":421,"username":"Lunarovich","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/lunarovich/{size}/2097_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":631,"username":"JTippetts1","name":"J Tippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts1/{size}/96_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":4,"username":"weitjong","name":"Yao Wei Tjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png"}}]},{"id":7223,"title":"navMesh.FindPath(jack1.Position, pathPos); crash in android","fancy_title":"navMesh.FindPath(jack1.Position, pathPos); crash in android","slug":"navmesh-findpath-jack1-position-pathpos-crash-in-android","posts_count":15,"reply_count":13,"highest_post_number":17,"image_url":null,"created_at":"2022-03-22T06:21:34.927Z","last_posted_at":"2022-03-30T17:48:22.028Z","bumped":true,"bumped_at":"2022-03-30T17:48:22.028Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":242,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1503,"username":"tianlv777","name":"zerrrrr","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/a4c791/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":230,"username":"Nerrik","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/n/958977/{size}.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":809,"username":"elix22","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png"}}]}],"tags_descriptions":{},"id":1925,"title":"Sine approximation","fancy_title":"Sine approximation","posts_count":17,"created_at":"2016-03-27T23:06:33.000Z","views":892,"reply_count":0,"like_count":0,"last_posted_at":"2016-04-02T16:24:44.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"sine-approximation","category_id":16,"word_count":3201,"deleted_at":null,"user_id":192,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_1925","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":17,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":4,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":206,"username":"gawag","name":"gawag AKA damu","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png","post_count":7,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1},{"id":4,"username":"weitjong","name":"Yao Wei Tjong","avatar_template":"/user_avatar/discourse.urho3d.io/weitjong/{size}/4_2.png","post_count":6,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"admin":true,"trust_level":4},{"id":192,"username":"Modanung","name":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png","post_count":3,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":0},{"id":37,"username":"TheComet","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/thecomet/{size}/1493_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2}],"created_by":{"id":192,"username":"Modanung","name":"È≠îÂ§ßÂÜú ùûçùûéùù≥ ÁèæÊãõËúç","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"},"last_poster":{"id":206,"username":"gawag","name":"gawag AKA damu","avatar_template":"/user_avatar/discourse.urho3d.io/gawag/{size}/68_2.png"},"links":[{"url":"https://github.com/urho3d/Urho3D/pull/1271","title":"BillboardSet::UpdateVertexBuffer optimization by damu ¬∑ Pull Request #1271 ¬∑ urho3d/Urho3D ¬∑ GitHub","internal":false,"attachment":false,"reflection":false,"clicks":2,"user_id":192,"domain":"github.com","root_domain":"github.com"},{"url":"https://github.com/damu/test_sincosf","title":"GitHub - damu/test_sincosf: Optimizing sincosf.","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":206,"domain":"github.com","root_domain":"github.com"}]}}