{"post_stream":{"posts":[{"id":8306,"name":"","username":"thebluefish","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/f04885/{size}.png","created_at":"2015-10-26T22:58:48.000Z","cooked":"\u003cp\u003eSo once upon a time \u003ca href=\"http://discourse.urho3d.io/t/dumb-angelscript-ini-parser/866/1\" data-bbcode=\"true\"\u003eChrisMAN posted his dumb AS ini parser\u003c/a\u003e. It worked for what it did, but godamn it was Angelscript and so not usable by everybody. So carnalis made his little ini/cfg parser in C++ based off ChrisMAN’s, which did the same thing but in C++ instead of Angeslcript. Following the tradition, I’ve decided to expand on this to a full Urho3D Resource based off their initial work.\u003c/p\u003e\n\u003cp\u003eSome quick features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWorks just as any other Urho3D Resource\u003c/li\u003e\n\u003cli\u003eOption to toggle case sensitivity\u003c/li\u003e\n\u003cli\u003eSupports ‘//’ and ‘#’ comments, ‘;’ comments were left out due to being used by some resources\u003c/li\u003e\n\u003cli\u003eSupports ‘=’ and ‘:’ to indicate value pairs\u003c/li\u003e\n\u003cli\u003e‘Smart Save’ option - Replaces \u003cspan class=\"bbcode-i\"\u003eonly\u003c/span\u003e the values, preserving the rest of the file such as comments and whitespacing\u003c/li\u003e\n\u003cli\u003e‘Dumb Save’ option (default) - Writes out brand new file\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn example of reading some values from a file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003eauto configFile = cache-\u0026gt;GetResource\u0026lt;blu::ConfigFile\u0026gt;(\"settings.cfg\");\n\nauto width = configFile-\u0026gt;GetInt(\"engine\", \"WindowWidth\", 1024);\nauto height = configFile-\u0026gt;GetInt(\"engine\", \"WindowHeight\", 768);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can set values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003econfigFile-\u0026gt;Set(\"engine\", \"WindowWidth\", \"800\");\nconfigFile-\u0026gt;Set(\"engine\", \"Windowheight\", \"600\");\nconfigFile-\u0026gt;Set(\"engine\", \"test\", \"something dark side\");\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen save it back out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e// Saves to application directory\nUrho3D::File file(context_, \"settings.cfg\", Urho3D::FILE_WRITE);\nconfigFile-\u0026gt;Save(file, true);\nfile.Close();\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will be later included in a lib of useful-stuff-to-have, but I am release it independently for now.\u003c/p\u003e\n\u003cp\u003eLicense:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003eThe MIT License (MIT)\n\nCopyright (c) 2015 Thebluefish\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eConfigFile.cpp:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e#include \"ConfigFile.h\"\n\n#include \u0026lt;Urho3D/Core/Context.h\u0026gt;\n#include \u0026lt;Urho3D/Core/Variant.h\u0026gt;\n#include \u0026lt;Urho3D/IO/File.h\u0026gt;\n#include \u0026lt;Urho3D/Container/Str.h\u0026gt;\n#include \u0026lt;Urho3D/Container/Vector.h\u0026gt;\n#include \u0026lt;Urho3D/Container/HashSet.h\u0026gt;\n#include \u0026lt;Urho3D/IO/MemoryBuffer.h\u0026gt;\n#include \u0026lt;Urho3D/IO/Log.h\u0026gt;\n\nnamespace blu\n{\n\tConfigFile::ConfigFile(Urho3D::Context* context, bool caseSensitive)\n\t\t: Urho3D::Resource(context)\n\t\t, _caseSensitive(caseSensitive)\n\t{\n\n\t}\n\n\tConfigFile::~ConfigFile()\n\t{\n\n\t}\n\n\tvoid ConfigFile::RegisterObject(Urho3D::Context* context)\n\t{\n\t\tcontext-\u0026gt;RegisterFactory\u0026lt;ConfigFile\u0026gt;();\n\t}\n\n\tbool ConfigFile::BeginLoad(Urho3D::Deserializer\u0026amp; source)\n\t{\n\t\tunsigned dataSize = source.GetSize();\n\t\tif (!dataSize \u0026amp;\u0026amp; !source.GetName().Empty())\n\t\t{\n\t\t\tLOGERROR(\"Zero sized data in \" + source.GetName());\n\t\t\treturn false;\n\t\t}\n\n        ConfigSection* configSection = new ConfigSection();\n        _configMap.Push(*configSection);\n\t\twhile (!source.IsEof())\n\t\t{\n\t\t\t// Reads the next line\n\t\t\tauto line = source.ReadLine();\n\n\t\t\t// Parse headers\n\t\t\tif (line.StartsWith(\"[\") \u0026amp;\u0026amp; line.EndsWith(\"]\"))\n\t\t\t{\n\t\t\t\t//Urho3D::String sectionName = line.Substring(1, line.Length() - 2);\n\t\t\t\t//currentMap = \u0026amp;_configMap[sectionName];\n\n                _configMap.Push(ConfigSection());\n                configSection = \u0026amp;_configMap.Back();\n\t\t\t\t\n\t\t\t}\n\n            configSection-\u0026gt;Push(line);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tbool ConfigFile::Save(Urho3D::Serializer\u0026amp; dest) const\n\t{\n\t\tdest.WriteLine(\"################\");\n\t\tdest.WriteLine(\"# AUTO-GENERATED\");\n\t\tdest.WriteLine(\"################\");\n\n\t\t// Iterate over all sections, printing out the header followed by the properties\n\t\tfor (auto itr = _configMap.Begin(); itr != _configMap.End(); itr++)\n\t\t{\n\t\t\tif (itr-\u0026gt;Begin() == itr-\u0026gt;End())\n\t\t\t\tcontinue;\n\n\t\t\t// Don't print section if there's nothing to print\n\t\t\tbool hasHeader = false;\n\t\t\tfor (auto section_itr = itr-\u0026gt;Begin(); section_itr != itr-\u0026gt;End(); section_itr++)\n\t\t\t{\n\t\t\t\tif (ParseComments(*section_itr) != Urho3D::String::EMPTY)\n\t\t\t\t{\n\t\t\t\t\thasHeader = true;\n\t\t\t\t\tdest.WriteLine(\"\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tauto section_itr = itr-\u0026gt;Begin();\n\n\t\t\t// Doesn't print header if it's empty\n\t\t\tif (hasHeader)\n\t\t\t{\n\t\t\t\tdest.WriteLine(\"[\" + ParseHeader(*section_itr) + \"]\");\n\t\t\t\tdest.WriteLine(\"\");\n\t\t\t}\n\n\t\t\tfor (; section_itr != itr-\u0026gt;End(); section_itr++)\n\t\t\t{\n\t\t\t\tauto line = ParseComments(*section_itr);\n\n\t\t\t\tUrho3D::String property;\n\t\t\t\tUrho3D::String value;\n\n\t\t\t\tParseProperty(line, property, value);\n\n\t\t\t\tif (property != Urho3D::String::EMPTY \u0026amp;\u0026amp; value != Urho3D::String::EMPTY)\n\t\t\t\t\tdest.WriteLine(property + \"=\" + value);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tbool ConfigFile::Save(Urho3D::Serializer\u0026amp; dest, bool smartSave) const\n\t{\n\t\tif (!smartSave)\n\t\t\treturn Save(dest);\n\n\t\t// Iterate over all sections, printing out the header followed by the properties\n\t\tfor (auto itr = _configMap.Begin(); itr != _configMap.End(); itr++)\n\t\t{\n\t\t\tif (itr-\u0026gt;Begin() == itr-\u0026gt;End())\n\t\t\t\tcontinue;\n\n\t\t\tfor (auto section_itr = itr-\u0026gt;Begin(); section_itr != itr-\u0026gt;End(); section_itr++)\n\t\t\t{\n\t\t\t\tauto line = *section_itr;\n\n\t\t\t\tdest.WriteLine(line);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tbool ConfigFile::FromString(const Urho3D::String\u0026amp; source)\n\t{\n\t\tif (source.Empty())\n\t\t\treturn false;\n\n\t\tUrho3D::MemoryBuffer buffer(source.CString(), source.Length());\n\t\treturn Load(buffer);\n\t}\n\n\tbool ConfigFile::Has(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter)\n\t{\n\t\treturn GetString(section, parameter) != Urho3D::String::EMPTY;\n\t}\n\n\tconst Urho3D::String ConfigFile::GetString(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::String\u0026amp; defaultValue)\n\t{\n\t\t// Find the correct section\n\t\tConfigSection* configSection = 0;\n\t\tfor (auto itr = _configMap.Begin(); itr != _configMap.End(); itr++)\n\t\t{\n\t\t\tif (itr-\u0026gt;Begin() == itr-\u0026gt;End())\n\t\t\t\tcontinue;\n\n\t\t\tauto header = *(itr-\u0026gt;Begin());\n\t\t\theader = ParseHeader(header);\n\n            if (_caseSensitive)\n            {\n                if (section == header)\n                {\n                    configSection = \u0026amp;(*itr);\n                }\n            }\n            else\n            {\n                if (section.ToLower() == header.ToLower())\n                {\n                    configSection = \u0026amp;(*itr);\n                }\n            }\n\t\t}\n\n\t\t// Section doesn't exist\n\t\tif (!configSection)\n\t\t\treturn defaultValue;\n\n\t\tfor (auto itr = configSection-\u0026gt;Begin(); itr != configSection-\u0026gt;End(); itr++)\n\t\t{\n\t\t\tUrho3D::String property;\n\t\t\tUrho3D::String value;\n\t\t\tParseProperty(*itr, property, value);\n\n\t\t\tif (property == Urho3D::String::EMPTY || value == Urho3D::String::EMPTY)\n                continue;\n\n            if (_caseSensitive)\n            {\n                if (parameter == property)\n                    return value;\n            }\n            else\n            {\n                if (parameter.ToLower() == property.ToLower())\n                    return value;\n            }\n\t\t}\n\n\t\treturn defaultValue;\n\t}\n\n\tconst int ConfigFile::GetInt(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const int defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToInt(property);\n\t}\n\n\tconst bool ConfigFile::GetBool(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const bool defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToBool(property);\n\t}\n\n\tconst float ConfigFile::GetFloat(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const float defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToFloat(property);\n\t}\n\n\tconst Urho3D::Vector2 ConfigFile::GetVector2(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Vector2\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToVector2(property);\n\t}\n\n\tconst Urho3D::Vector3 ConfigFile::GetVector3(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Vector3\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToVector3(property);\n\t}\n\n\tconst Urho3D::Vector4 ConfigFile::GetVector4(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Vector4\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToVector4(property);\n\t}\n\n\tconst Urho3D::Quaternion ConfigFile::GetQuaternion(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Quaternion\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToQuaternion(property);\n\t}\n\n\tconst Urho3D::Color ConfigFile::GetColor(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Color\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToColor(property);\n\t}\n\n\tconst Urho3D::IntRect ConfigFile::GetIntRect(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::IntRect\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToIntRect(property);\n\t}\n\n\tconst Urho3D::IntVector2 ConfigFile::GetIntVector2(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::IntVector2\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToIntVector2(property);\n\t}\n\n\tconst Urho3D::Matrix3 ConfigFile::GetMatrix3(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Matrix3\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToMatrix3(property);\n\t}\n\n\tconst Urho3D::Matrix3x4 ConfigFile::GetMatrix3x4(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Matrix3x4\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToMatrix3x4(property);\n\t}\n\n\tconst Urho3D::Matrix4 ConfigFile::GetMatrix4(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Matrix4\u0026amp; defaultValue)\n\t{\n\t\tauto property = GetString(section, parameter);\n\n\t\tif (property == Urho3D::String::EMPTY)\n\t\t\treturn defaultValue;\n\n\t\treturn Urho3D::ToMatrix4(property);\n\t}\n\n\tvoid ConfigFile::Set(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::String\u0026amp; value)\n\t{\n        // Find the correct section\n        ConfigSection* configSection = 0;\n        for (auto itr = _configMap.Begin(); itr != _configMap.End(); itr++)\n        {\n            if (itr-\u0026gt;Begin() == itr-\u0026gt;End())\n                continue;\n\n            auto header = *(itr-\u0026gt;Begin());\n            header = ParseHeader(header);\n\n            if (_caseSensitive)\n            {\n                if (section == header)\n                {\n                    configSection = \u0026amp;(*itr);\n                }\n            }\n            else\n            {\n                if (section.ToLower() == header.ToLower())\n                {\n                    configSection = \u0026amp;(*itr);\n                }\n            }\n        }\n\n        // Section doesn't exist\n        if (!configSection)\n        {\n            // Create section\n            _configMap.Push(ConfigSection());\n            configSection = \u0026amp;_configMap.Back();\n        }\n\n        Urho3D::String* line = 0;\n        unsigned separatorPos = 0;\n        for (auto itr = configSection-\u0026gt;Begin(); itr != configSection-\u0026gt;End(); itr++)\n        {\n            // Find property seperator\n            separatorPos = itr-\u0026gt;Find(\"=\");\n            if (separatorPos == Urho3D::String::NPOS)\n            {\n                separatorPos = itr-\u0026gt;Find(\":\");\n            }\n\n            // Not a property\n            if (separatorPos == Urho3D::String::NPOS)\n                continue;\n\n            Urho3D::String workingLine = ParseComments(*itr);\n\n            auto oldParameter = workingLine.Substring(0, separatorPos).Trimmed();\n            auto oldValue = workingLine.Substring(separatorPos + 1).Trimmed();\n            \n            // Not the correct parameter\n            if (_caseSensitive ? (oldParameter == parameter) : (oldParameter.ToLower() == parameter.ToLower()))\n            {\n                // Replace the value\n\n                itr-\u0026gt;Replace(itr-\u0026gt;Find(oldValue, separatorPos), oldValue.Length(), value);\n                return;\n            }\n        }\n\n        // Parameter doesn't exist yet\n        // We need to find a good place to insert the parameter\n        // Avoiding lines which are entirely comments or whitespacing\n        int index = configSection-\u0026gt;Size() - 1;\n        for (int i = index; i \u0026gt;= 0; i--)\n        {\n            if (ParseComments((*configSection)[i]) != Urho3D::String::EMPTY)\n            {\n                index = i + 1;\n                break;\n            }\n        }\n        configSection-\u0026gt;Insert(index, parameter + \"=\" + value);\n\t}\n\n\t// Returns header without bracket\n\tUrho3D::String ConfigFile::ParseHeader(Urho3D::String line) const\n\t{\n\t\t// Only parse comments outside of headers\n\t\tunsigned commentPos = 0;\n\n\t\twhile (commentPos != Urho3D::String::NPOS)\n\t\t{\n\t\t\t// Find next comment\n\t\t\tauto lastCommentPos = commentPos;\n\t\t\tauto commaPos = line.Find(\"//\", commentPos);\n\t\t\tauto hashPos = line.Find(\"#\", commentPos);\n\t\t\tcommentPos = (commaPos \u0026lt; hashPos) ? commaPos : hashPos;\n\n\t\t\t// Header is behind a comment\n\t\t\tif (line.Find(\"[\", lastCommentPos) \u0026gt; commentPos)\n\t\t\t{\n\t\t\t\t// Stop parsing this line\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Header is before the comment\n\t\t\tif (line.Find(\"[\") \u0026lt; commentPos)\n\t\t\t{\n\t\t\t\tint startPos = line.Find(\"[\") + 1;\n\t\t\t\tint l1 = line.Find(\"]\");\n\t\t\t\tint length = l1 - startPos;\n\t\t\t\tline = line.Substring(startPos, length);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tline = line.Trimmed();\n\n\t\treturn line;\n\t}\n\n\t//  property or Empty if no property\n\tvoid ConfigFile::ParseProperty(Urho3D::String line, Urho3D::String\u0026amp; property, Urho3D::String\u0026amp; value) const\n\t{\n        line = ParseComments(line);\n\n        // Find property seperator\n        auto separatorPos = line.Find(\"=\");\n        if (separatorPos == Urho3D::String::NPOS)\n        {\n            separatorPos = line.Find(\":\");\n        }\n\n        // Not a property\n        if (separatorPos == Urho3D::String::NPOS)\n        {\n            property = Urho3D::String::EMPTY;\n            value = Urho3D::String::EMPTY;\n            return;\n        }\n\n        property = line.Substring(0, separatorPos).Trimmed();\n        value = line.Substring(separatorPos + 1).Trimmed();\n\t}\n\n\t// strips comments and whitespaces\n\tUrho3D::String ConfigFile::ParseComments(Urho3D::String line) const\n\t{\n\t\t// Comments are normalized\n\t\tline.Replace(\"//\", \"#\");\n\n\t\t// Ignore comments\n\t\tunsigned commentPos = line.Find(\"#\");\n\t\tif (commentPos != Urho3D::String::NPOS)\n\t\t{\n\t\t\tline = line.Substring(0, commentPos);\n\t\t}\n\n\t\treturn line;\n\t}\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eConfigFile.h:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e#pragma once\n\n#include \u0026lt;Urho3D/Urho3D.h\u0026gt;\n#include \u0026lt;Urho3D/Resource/Resource.h\u0026gt;\n#include \u0026lt;Urho3D/Core/Variant.h\u0026gt;\n#include \u0026lt;Urho3D/Core/StringUtils.h\u0026gt;\n\nnamespace Urho3D\n{\n\tclass File;\n\tclass Variant;\n}\n\nnamespace blu\n{\n\ttypedef Urho3D::Vector\u0026lt;Urho3D::String\u0026gt; ConfigSection;\n\ttypedef Urho3D::Vector\u0026lt;ConfigSection\u0026gt; ConfigMap;\n\n\tclass ConfigFile : public Urho3D::Resource\n\t{\n\tpublic:\n\t\tConfigFile(Urho3D::Context* context, bool caseSensitive = false);\n\t\t~ConfigFile();\n\n\t\tstatic void RegisterObject(Urho3D::Context* context);\n\n\t\tvoid SetCaseSensitive(bool caseSensitive) { _caseSensitive = caseSensitive; }\n\n\t\t/// Load resource from stream. May be called from a worker thread. Return true if successful.\n\t\tvirtual bool BeginLoad(Urho3D::Deserializer\u0026amp; source);\n\t\t/// Save resource\n\t\tvirtual bool Save(Urho3D::Serializer\u0026amp; dest) const;\n\t\t/// Smart Save resource, replacing only the values, keeping whitespacing and comments\n\t\tvirtual bool Save(Urho3D::Serializer\u0026amp; dest, bool smartSave) const;\n\n\t\t/// Deserialize from a string. Return true if successful.\n\t\tbool FromString(const Urho3D::String\u0026amp; source);\n\n\t\tconst ConfigMap* GetMap() { return \u0026amp;_configMap; }\n\n\t\tbool Has(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter);\n\n\t\tconst Urho3D::String GetString(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::String\u0026amp; defaultValue = Urho3D::String::EMPTY);\n\t\tconst int GetInt(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const int defaultValue = 0);\n\t\tconst bool GetBool(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const bool defaultValue = false);\n\t\tconst float GetFloat(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const float defaultValue = 0.f);\n\t\tconst Urho3D::Vector2 GetVector2(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Vector2\u0026amp; defaultValue = Urho3D::Vector2::ZERO);\n\t\tconst Urho3D::Vector3 GetVector3(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Vector3\u0026amp; defaultValue = Urho3D::Vector3::ZERO);\n\t\tconst Urho3D::Vector4 GetVector4(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Vector4\u0026amp; defaultValue = Urho3D::Vector4::ZERO);\n\t\tconst Urho3D::Quaternion GetQuaternion(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Quaternion\u0026amp; defaultValue = Urho3D::Quaternion::IDENTITY);\n\t\tconst Urho3D::Color GetColor(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Color\u0026amp; defaultValue = Urho3D::Color::WHITE);\n\t\tconst Urho3D::IntRect GetIntRect(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::IntRect\u0026amp; defaultValue = Urho3D::IntRect::ZERO);\n\t\tconst Urho3D::IntVector2 GetIntVector2(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::IntVector2\u0026amp; defaultValue = Urho3D::IntVector2::ZERO);\n\t\tconst Urho3D::Matrix3 GetMatrix3(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Matrix3\u0026amp; defaultValue = Urho3D::Matrix3::IDENTITY);\n\t\tconst Urho3D::Matrix3x4 GetMatrix3x4(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Matrix3x4\u0026amp; defaultValue = Urho3D::Matrix3x4::IDENTITY);\n\t\tconst Urho3D::Matrix4 GetMatrix4(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::Matrix4\u0026amp; defaultValue = Urho3D::Matrix4::IDENTITY);\n\t\t\n\t\tvoid Set(const Urho3D::String\u0026amp; section, const Urho3D::String\u0026amp; parameter, const Urho3D::String\u0026amp; value);\n\n\tprotected:\n\n\t\t// Returns header without bracket\n\t\tUrho3D::String ParseHeader(Urho3D::String line) const;\n\t\t//  property or Empty if no property\n\t\tvoid ParseProperty(Urho3D::String line, Urho3D::String\u0026amp; property, Urho3D::String\u0026amp; value) const;\n\t\t// strips comments and whitespaces\n\t\tUrho3D::String ParseComments(Urho3D::String line) const;\n\n\tprotected:\n\n\t\tbool _caseSensitive;\n\t\tConfigMap _configMap;\n\t};\n}\u003c/code\u003e\u003c/pre\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T01:07:47.720Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":170,"reads":74,"readers_count":73,"score":973.8,"yours":false,"topic_id":1449,"topic_slug":"a-more-advanced-ini-parser","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://discourse.urho3d.io/t/dumb-angelscript-ini-parser/866","internal":true,"reflection":false,"title":"Dumb Angelscript ini parser","clicks":0},{"url":"http://discourse.urho3d.io/t/data-folder/2130/4","internal":true,"reflection":true,"title":"Data folder","clicks":5},{"url":"http://discourse.urho3d.io/t/saving-scene-to-2d-texture-with-transparency/3523/2","internal":true,"reflection":true,"title":"Saving scene to 2D texture with transparency","clicks":1},{"url":"https://discourse.urho3d.io/t/turbo-badger-implementation/1364/16","internal":true,"reflection":true,"title":"Turbo Badger implementation","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":3}],"moderator":false,"admin":false,"staff":false,"user_id":80,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[8306]},"timeline_lookup":[[1,2584]],"suggested_topics":[{"id":7099,"title":":fallen_leaf: Polynomials \u0026 Harmonics","fancy_title":":fallen_leaf: Polynomials \u0026amp; Harmonics","slug":"polynomials-harmonics","posts_count":6,"reply_count":0,"highest_post_number":7,"image_url":null,"created_at":"2021-12-13T05:06:04.641Z","last_posted_at":"2021-12-27T23:27:39.489Z","bumped":true,"bumped_at":"2021-12-27T23:27:39.489Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🍂 Polynomials \u0026 Harmonics","tags_descriptions":{},"like_count":6,"views":392,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]},{"id":7103,"title":":test_tube: DebugRenderer as GUI","fancy_title":":test_tube: DebugRenderer as GUI","slug":"debugrenderer-as-gui","posts_count":4,"reply_count":1,"highest_post_number":4,"image_url":null,"created_at":"2021-12-17T02:25:06.606Z","last_posted_at":"2021-12-18T01:09:27.738Z","bumped":true,"bumped_at":"2021-12-18T01:09:27.738Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🧪 DebugRenderer as GUI","tags_descriptions":{},"like_count":4,"views":267,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":861,"username":"GodMan","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]},{"id":7110,"title":"Resource fetch define","fancy_title":"Resource fetch define","slug":"resource-fetch-define","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2021-12-27T12:28:55.126Z","last_posted_at":"2021-12-27T17:00:37.699Z","bumped":true,"bumped_at":"2021-12-27T17:00:37.699Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":7,"views":184,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":1304,"username":"lebrewer","name":"lebrewer","avatar_template":"/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]},{"id":7120,"title":"Log Error Once Macro","fancy_title":"Log Error Once Macro","slug":"log-error-once-macro","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-01-04T02:24:37.857Z","last_posted_at":"2022-01-04T02:24:37.925Z","bumped":true,"bumped_at":"2022-01-04T02:24:37.925Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":3,"views":143,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7314,"title":"How do I build Urho3D with M1 MacBook?","fancy_title":"How do I build Urho3D with M1 MacBook?","slug":"how-do-i-build-urho3d-with-m1-macbook","posts_count":3,"reply_count":1,"highest_post_number":3,"image_url":null,"created_at":"2022-08-18T13:41:49.414Z","last_posted_at":"2022-08-19T14:57:34.502Z","bumped":true,"bumped_at":"2022-08-19T14:57:34.502Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":136,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1490,"username":"Sunc","name":"DoubleSuper","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/df788c/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]}],"tags_descriptions":{},"id":1449,"title":"A more advanced ini parser","fancy_title":"A more advanced ini parser","posts_count":1,"created_at":"2015-10-26T22:58:48.000Z","views":1934,"reply_count":0,"like_count":3,"last_posted_at":"2015-10-26T22:58:48.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"a-more-advanced-ini-parser","category_id":13,"word_count":2785,"deleted_at":null,"user_id":80,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_1449","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":1,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":1,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":80,"username":"thebluefish","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/f04885/{size}.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1}],"created_by":{"id":80,"username":"thebluefish","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/f04885/{size}.png"},"last_poster":{"id":80,"username":"thebluefish","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/f04885/{size}.png"},"links":[{"url":"http://discourse.urho3d.io/t/data-folder/2130/4","title":"Data folder","internal":true,"attachment":false,"reflection":true,"clicks":5,"user_id":21,"domain":"discourse.urho3d.io","root_domain":"urho3d.io"},{"url":"http://discourse.urho3d.io/t/saving-scene-to-2d-texture-with-transparency/3523/2","title":"Saving scene to 2D texture with transparency","internal":true,"attachment":false,"reflection":true,"clicks":1,"user_id":21,"domain":"discourse.urho3d.io","root_domain":"urho3d.io"}]}}