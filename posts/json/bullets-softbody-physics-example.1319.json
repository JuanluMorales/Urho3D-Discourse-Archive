{"post_stream": {"posts": [{"id": 7469, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-08-31T14:42:06.000Z", "cooked": "<p>I became interested in porting bullet\u2019s softbody physics after reading Josh\u2019s post, <a href=\"http://discourse.urho3d.io/t/soft-body-physics/1313/1\" data-bbcode=\"true\">http://discourse.urho3d.io/t/soft-body-physics/1313/1</a>.<br>\nAnd the thing that I was really interested in was TriMesh softbody implementation, curious as to whether the softbody needed to be recreated every frame or if just updating the model\u2019s vertex buffer would work.<br>\nThis example shows trimesh softbody implementation that updates model\u2019s vertex buffer.  It\u2019s no where near code complete, as I have neglected to write methods like settransform(), setmass(), etc., and I coded SoftBody class in PhysicsWorld.h/.cpp for ease of testing.  But I decided to share this as there are others who are more interested in this than myself.</p>\n<div class=\"lazyYT\" data-youtube-id=\"XkLMAZWaVB8\" data-youtube-title=\"Urho3D SoftBody Demo\" data-width=\"480\" data-height=\"270\" data-parameters=\"feature=oembed&amp;wmode=opaque\"></div>\n<p>Edit: progress update 09/20/15<br>\n-This progress is collaborative efforts made by Mike, codingmonkey, and myself - this will eventually make it into the master branch, hopefully.  I found out that there is no way to remove duplicate verts from Blender. So, I wrote a duplicate verts removal (pruning) routine and apply the softbody deformation back to the original model\u2019s vertex buffer.  The attached video shows this work.</p>\n<div class=\"lazyYT\" data-youtube-id=\"SvdpjhA-Mq8\" data-youtube-title=\"Urho3D SoftBody\" data-width=\"480\" data-height=\"270\" data-parameters=\"feature=oembed&amp;wmode=opaque\"></div>\n<p>The lates repo: <a href=\"https://github.com/Lumak/Urho3D-SoftBody\">https://github.com/Lumak/Urho3D-SoftBody</a></p>", "post_number": 1, "post_type": 1, "updated_at": "2018-04-04T21:16:13.466Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1852, "reads": 120, "readers_count": 119, "score": 9395.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 3, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "https://github.com/Lumak/Urho3D-SoftBody", "internal": false, "reflection": false, "title": "GitHub - Lumak/Urho3D-SoftBody: Bullet Physics SoftBody implementation.", "clicks": 158}, {"url": "https://www.youtube.com/watch?v=XkLMAZWaVB8", "internal": false, "reflection": false, "title": "Urho3D SoftBody Demo", "clicks": 1}, {"url": "https://discourse.urho3d.io/t/soft-body-physics/1313", "internal": true, "reflection": false, "title": "Soft Body Physics", "clicks": 0}, {"url": "https://www.youtube.com/watch?v=SvdpjhA-Mq8", "internal": false, "reflection": false, "title": "YouTube", "clicks": 0}, {"url": "https://discourse.urho3d.io/t/wind-and-clothes/4083/4", "internal": true, "reflection": true, "title": "Wind and clothes", "clicks": 6}, {"url": "http://discourse.urho3d.io/t/soft-body-physics/1313/9", "internal": true, "reflection": true, "title": "Soft Body Physics", "clicks": 4}, {"url": "http://discourse.urho3d.io/t/adding-vertex-weights-to-the-model-file/3432", "internal": true, "reflection": true, "title": "Adding vertex weights to the model file", "clicks": 1}, {"url": "https://discourse.urho3d.io/t/soft-body-physics/1313/15", "internal": true, "reflection": true, "title": "Soft Body Physics", "clicks": 0}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "count": 4}], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7471, "name": "", "username": "dragonCASTjosh", "avatar_template": "/user_avatar/discourse.urho3d.io/dragoncastjosh/{size}/774_2.png", "created_at": "2015-08-31T14:52:38.000Z", "cooked": "<p>thanks ill give it a go</p>", "post_number": 2, "post_type": 1, "updated_at": "2017-01-02T01:06:48.205Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 100, "readers_count": 99, "score": 20.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 284, "hidden": false, "trust_level": 3, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7473, "name": "", "username": "codingmonkey", "avatar_template": "/user_avatar/discourse.urho3d.io/codingmonkey/{size}/119_2.png", "created_at": "2015-08-31T16:39:04.000Z", "cooked": "<p>Thanks for this example.<br>\nGood starting point for moving forward to clothes and hair</p>", "post_number": 3, "post_type": 1, "updated_at": "2017-01-02T01:06:48.351Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 96, "readers_count": 95, "score": 39.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "count": 1}], "moderator": false, "admin": false, "staff": false, "user_id": 148, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7474, "name": "", "username": "practicing01", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/b5e925/{size}.png", "created_at": "2015-08-31T17:56:29.000Z", "cooked": "<p>That\u2019s hot.  Any idea of what the performance will be like on android?</p>", "post_number": 4, "post_type": 1, "updated_at": "2017-01-02T01:06:48.413Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 88, "readers_count": 87, "score": 22.6, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 140, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7479, "name": "", "username": "rasteron", "avatar_template": "/user_avatar/discourse.urho3d.io/rasteron/{size}/55_2.png", "created_at": "2015-08-31T23:24:49.000Z", "cooked": "<p>This looks cool Lumak! Thanks for sharing <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"> You should do a PR for next release. Yes, I\u2019m also wondering about android performance.</p>", "post_number": 5, "post_type": 1, "updated_at": "2017-01-02T01:06:48.738Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 2, "reads": 86, "readers_count": 85, "score": 27.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 54, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7484, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-09-01T06:02:33.000Z", "cooked": "<p>I\u2019m not sure about performance on android or on any platform for that matter.  Some optimization should be made. One is checking to see if a collision deformation has occurred before blindly copying the vertex buffer every frame.<br>\nThis is my first time working with softbody physics and have concerns with bullet\u2019s implementation in general.  While running bullet\u2019s demo, I noticed that objects can easily penetrate or punch-through some surfaces (also observed with the mushroom example).  I\u2019m not sure if it\u2019s because of a) its intended to work as implemented on specific softbody types, b) some softbody parameter settings that are not set properly or c) caused by degenerative triangles. Further studies would be required to figure out what all the softbody parameter settings are, what they do, and what the optimal settings would be. If I were to use softbody physics in an application, I would first process models through NVidia\u2019s NvTriStrip, <a href=\"http://www.nvidia.com/object/nvtristrip_library.html\" data-bbcode=\"true\">http://www.nvidia.com/object/nvtristrip_library.html</a>, to remove any degenerative triangles and hope that it can also eliminate what looks like tearing when there are, I think, duplicate vertices.<br>\nI\u2019m just not all that familiar with softbody physics but hope that there are others in the community who are.</p>", "post_number": 6, "post_type": 1, "updated_at": "2017-01-02T01:06:49.104Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 4, "reads": 84, "readers_count": 83, "score": 36.8, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "http://www.nvidia.com/object/nvtristrip_library.html", "internal": false, "reflection": false, "title": "NvTriStrip Library | NVIDIA", "clicks": 6}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7486, "name": "", "username": "Mike", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png", "created_at": "2015-09-01T09:11:49.000Z", "cooked": "<p>Many thanks for sharing this Lumak  <img src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=5\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\"></p>\n<p>For optimization, I will investigate if there is a sleep/rest threshold as there exists for RigidBody.</p>\n<p>How do you account for position, rotation and scale? Currently transforms are hard-coded and I have some troubles feeding custom transforms to match softBodyNode transforms.</p>", "post_number": 7, "post_type": 1, "updated_at": "2017-01-02T01:06:49.229Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 73, "readers_count": 72, "score": 14.6, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Contributor", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": true, "admin": false, "staff": true, "user_id": 9, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7527, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-09-02T12:41:14.000Z", "cooked": "<p>The code sample that I provided is no where near complete.  It was written primarily to test a trimesh softbody functionality. Basic node_ member variable access functions, such as set/get transforms, set scale, etc. were not written.  If you want to write those, look for a line with a comment \u201c// create methods for these\u201d in SoftBody::CreateBodyFromTriMesh(\u2026) function and you can see a list of functions that I neglected to write.</p>", "post_number": 8, "post_type": 1, "updated_at": "2017-01-02T01:06:52.136Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 72, "readers_count": 71, "score": 19.4, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7531, "name": "", "username": "Mike", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png", "created_at": "2015-09-02T16:07:48.000Z", "cooked": "<p>Thanks, for now I give up.</p>", "post_number": 9, "post_type": 1, "updated_at": "2017-01-02T01:06:52.483Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 76, "readers_count": 75, "score": 20.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Contributor", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": true, "admin": false, "staff": true, "user_id": 9, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7543, "name": "", "username": "Mike", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png", "created_at": "2015-09-03T10:26:27.000Z", "cooked": "<p>Made as a SoftBody component (nothing added, raw extraction, code conventions and simplification):</p>\n<p>SoftBody.h</p>\n<pre><code class=\"lang-auto\">#pragma once\n\n#include \"../Scene/Component.h\"\n\nclass btSoftBody;\n\nnamespace Urho3D\n{\n\n/// Physics soft body component.\nclass URHO3D_API SoftBody : public Component\n{\n    OBJECT(SoftBody);\n\npublic:\n    /// Construct.\n    SoftBody(Context* context);\n    /// Destruct. Free the soft body and geometries.\n    ~SoftBody();\n    /// Register object factory.\n    static void RegisterObject(Context* context);\n\n    /// Handle logic post-update event where we update the vertex buffer.\n    void HandlePostUpdate(StringHash eventType, VariantMap&amp; eventData);\n\n    /// Remove the soft body.\n    void ReleaseBody();\n    /// Create TriMesh from model's geometry.\n    void CreateTriMesh();\n    /// Create the soft body from a TriMesh.\n    bool CreateBodyFromTriMesh(VertexBuffer* vertexBuffer, IndexBuffer* indexBuffer, bool randomizeConstraints = true);\n    /// Return Bullet soft body.\n    btSoftBody* GetBody() { return body_; }\n    /// TODO.\n    void SetPosition(const Vector3&amp; position);\n\nprotected:\n    /// Handle node being assigned.\n    virtual void OnNodeSet(Node* node);\n    /// Handle scene being assigned.\n    virtual void OnSceneSet(Scene* scene);\n    /// Handle node transform being dirtied.\n//    virtual void OnMarkedDirty(Node* node);\n\nprivate:\n    /// Create the soft body, or re-add to the physics world with changed flags. Calls UpdateMass().\n    void AddBodyToWorld();\n    /// Remove the soft body from the physics world.\n    void RemoveBodyFromWorld();\n\n    /// Physics world.\n    WeakPtr&lt;PhysicsWorld&gt; physicsWorld_;\n    /// Bullet soft body.\n    btSoftBody* body_;\n    /// Vertex buffer.\n    VertexBuffer* vertexBuffer_;\n};\n\n}</code></pre>\n<p>SoftBody .cpp</p>\n<pre><code class=\"lang-auto\">#include \"../Precompiled.h\"\n\n#include \"../Core/Context.h\"\n#include \"../Core/CoreEvents.h\"\n#include \"../Graphics/Geometry.h\"\n#include \"../Graphics/IndexBuffer.h\"\n#include \"../IO/Log.h\"\n#include \"../Graphics/Material.h\"\n#include \"../Graphics/Model.h\"\n#include \"../Physics/PhysicsUtils.h\"\n#include \"../Physics/PhysicsWorld.h\"\n#include \"../Resource/ResourceCache.h\"\n#include \"../Scene/Scene.h\"\n#include \"../Scene/SceneEvents.h\"\n#include \"../Physics/SoftBody.h\"\n#include \"../Graphics/StaticModel.h\"\n#include \"../Graphics/VertexBuffer.h\"\n\n#include &lt;Bullet/BulletSoftBody/btSoftBody.h&gt;\n#include &lt;Bullet/BulletSoftBody/btSoftRigidDynamicsWorld.h&gt;\n#include &lt;Bullet/BulletSoftBody/btSoftBodyHelpers.h&gt;\n\nnamespace Urho3D\n{\n\nextern const char* PHYSICS_CATEGORY;\n\nSoftBody::SoftBody(Context* context) :\n    Component(context),\n    body_(NULL),\n    vertexBuffer_(NULL)\n{\n}\n\nSoftBody::~SoftBody()\n{\n    if (body_)\n    {\n        delete body_;\n        body_ = NULL;\n    }\n\n    // We don't own the vertsbuffer\n    vertexBuffer_ = NULL;\n}\n\nvoid SoftBody::RegisterObject(Context* context)\n{\n    context-&gt;RegisterFactory&lt;SoftBody&gt;(PHYSICS_CATEGORY);\n}\n\nvoid SoftBody::OnNodeSet(Node* node)\n{\n    if (node)\n        node-&gt;AddListener(this);\n}\n\nvoid SoftBody::OnSceneSet(Scene* scene)\n{\n    if (scene)\n    {\n        if (scene == node_)\n            LOGWARNING(GetTypeName() + \" should not be created to the root scene node\");\n\n        physicsWorld_ = scene-&gt;GetOrCreateComponent&lt;PhysicsWorld&gt;();\n        physicsWorld_-&gt;AddSoftBody(this);\n\n        AddBodyToWorld();\n    }\n    else\n    {\n        ReleaseBody();\n\n        if (physicsWorld_)\n            physicsWorld_-&gt;RemoveSoftBody(this);\n    }\n}\n\nvoid SoftBody::AddBodyToWorld()\n{\n    if (!physicsWorld_)\n        return;\n\n    if (body_)\n    {\n        btSoftRigidDynamicsWorld* world = (btSoftRigidDynamicsWorld*)physicsWorld_-&gt;GetWorld();\n        world-&gt;addSoftBody(body_);\n    }\n}\n\nvoid SoftBody::ReleaseBody()\n{\n    if (body_)\n    {\n        RemoveBodyFromWorld();\n        delete body_;\n        body_ = NULL;\n    }\n}\n\nvoid SoftBody::RemoveBodyFromWorld()\n{\n    if (body_)\n    {\n        if (physicsWorld_)\n        {\n            btSoftRigidDynamicsWorld* pSoftRigidWorld = (btSoftRigidDynamicsWorld *)physicsWorld_-&gt;GetWorld();\n            pSoftRigidWorld-&gt;removeSoftBody(body_);\n        }\n    }\n}\n\nvoid SoftBody::CreateTriMesh()\n{\n    ResourceCache* cache = GetSubsystem&lt;ResourceCache&gt;();\n    Scene* scene = GetScene();\n\n    // Get model\n    StaticModel* model = node_-&gt;GetComponent&lt;StaticModel&gt;();\n    if (!model)\n        return;\n    Model* originalModel = model-&gt;GetModel();\n    if (!originalModel)\n        return;\n\n    // Clone model\n    SharedPtr&lt;Model&gt; cloneModel = originalModel-&gt;Clone();\n    model-&gt;SetModel(cloneModel);\n\n    // Get the vertex and index buffers from the first geometry's first LOD level\n    VertexBuffer* vertexBuffer = cloneModel-&gt;GetGeometry(0, 0)-&gt;GetVertexBuffer(0);\n    IndexBuffer* indexBuffer = cloneModel-&gt;GetGeometry(0, 0)-&gt;GetIndexBuffer();\n\n    // Cretae soft body from TriMesh\n    CreateBodyFromTriMesh(vertexBuffer, indexBuffer);\n}\n\nbool SoftBody::CreateBodyFromTriMesh(VertexBuffer* vertexBuffer, IndexBuffer* indexBuffer, bool randomizeConstraints)\n{\n    bool bConstructed = false;\n\n    if (vertexBuffer &amp;&amp; indexBuffer)\n    {\n        btAlignedObjectArray&lt;bool&gt; chks;\n        btAlignedObjectArray&lt;btVector3&gt; vtx;\n\n        // Save vertexbuffer ptr\n        vertexBuffer_ = vertexBuffer;\n\n        // Copy vertex buffer\n        const unsigned char* pVertexData = (const unsigned char*)vertexBuffer_-&gt;Lock(0, vertexBuffer_-&gt;GetVertexCount());\n\n        if (pVertexData)\n        {\n            unsigned numVertices = vertexBuffer_-&gt;GetVertexCount();\n            unsigned vertexSize = vertexBuffer_-&gt;GetVertexSize();\n\n            vtx.resize(numVertices);\n\n            // Copy the original verts\n            for (unsigned i = 0; i &lt; numVertices; ++i)\n            {\n                const Vector3&amp; src = *reinterpret_cast&lt;const Vector3*&gt;(pVertexData + i * vertexSize);\n                vtx[i] = ToBtVector3(src);\n            }\n            vertexBuffer_-&gt;Unlock();\n        }\n\n        // Create softbody\n        physicsWorld_ = GetScene()-&gt;GetComponent&lt;PhysicsWorld&gt;();\n        body_ = new btSoftBody(physicsWorld_-&gt;GetSoftBodyInfo(), vtx.size(), &amp;vtx[0], 0);\n\n        // Copy indexbuffer\n        const unsigned* pIndexData = (const unsigned*)indexBuffer-&gt;Lock(0, indexBuffer-&gt;GetIndexCount());\n        const unsigned short* pUShortData = (const unsigned short*)pIndexData;\n        if (pIndexData)\n        {\n            unsigned numIndices = indexBuffer-&gt;GetIndexCount();\n            unsigned indexSize = indexBuffer-&gt;GetIndexSize();\n\n            int ntriangles = (int)numIndices / 3;\n\n            int maxidx = 0;\n            int i; //,j,ni;\n\n            if (indexSize == sizeof(unsigned short))\n            {\n                for (i = 0; i &lt; (int)numIndices; ++i)\n                {\n                    unsigned uidx = pUShortData[i];\n                    maxidx = Max(uidx, maxidx);\n                }\n            }\n            else if (indexSize == sizeof(unsigned))\n            {\n                for (i = 0; i &lt; (int)numIndices; ++i)\n                {\n                    unsigned uidx = pIndexData[i];\n                    maxidx = Max(uidx, maxidx);\n                }\n            }\n            ++maxidx;\n            chks.resize(maxidx * maxidx, false);\n\n            for (i = 0; i &lt; (int)numIndices; i += 3)\n            {\n                int idx[3];\n                if (indexSize == sizeof(unsigned short))\n                {\n                    idx[0] = (int)pUShortData[i];\n                    idx[1] = (int)pUShortData[i + 1];\n                    idx[2] = (int)pUShortData[i + 2];\n                }\n                else\n                {\n                    idx[0] = (int)pIndexData[i];\n                    idx[1] = (int)pIndexData[i + 1];\n                    idx[2] = (int)pIndexData[i + 2];\n                }\n\n                #define IDX(_x_, _y_) ((_y_) * maxidx + (_x_))\n                for (int j=2, k=0; k&lt;3; j = k++)\n                {\n                    if (!chks[IDX(idx[j], idx[k])])\n                    {\n                        chks[IDX(idx[j], idx[k])] = true;\n                        chks[IDX(idx[k], idx[j])] = true;\n                        body_-&gt;appendLink(idx[j], idx[k]);\n                    }\n                }\n                #undef IDX\n                body_-&gt;appendFace(idx[0], idx[1], idx[2]);\n            }\n            indexBuffer-&gt;Unlock();\n        }\n\n        if (randomizeConstraints)\n            body_-&gt;randomizeConstraints();\n\n        // Straight out of Bullet's softbody demo for trimesh\n        body_-&gt;m_materials[0]-&gt;m_kLST = 0.1;\n        body_-&gt;m_cfg.kMT = 0.05;\n\n        btMatrix3x3 m;\n        m.setEulerZYX(0, 0, 0);\n\n        // Create methods for these\n        body_-&gt;transform(btTransform(m, btVector3(0, 4, 0)));\n        body_-&gt;scale(btVector3(2, 2, 2));\n        body_-&gt;setTotalMass(50, true);\n        body_-&gt;setPose(true, true);\n\n        bConstructed = true;\n    }\n\n    AddBodyToWorld();\n    SubscribeToEvent(E_POSTUPDATE, HANDLER(SoftBody, HandlePostUpdate));\n\n    return bConstructed;\n}\n\nvoid SoftBody::HandlePostUpdate(StringHash eventType, VariantMap&amp; eventData)\n{\n    // Update vertex buffer\n    if (body_ &amp;&amp; vertexBuffer_)\n    {\n        unsigned char* pVertexData = (unsigned char*)vertexBuffer_-&gt;Lock(0, vertexBuffer_-&gt;GetVertexCount());\n\n        // Copy soft body vertices back into the model vertex buffer\n        if (pVertexData)\n        {\n            unsigned numVertices = vertexBuffer_-&gt;GetVertexCount();\n            unsigned vertexSize = vertexBuffer_-&gt;GetVertexSize();\n\n            // Copy original vertex positions\n            for (unsigned i = 0; i &lt; body_-&gt;m_nodes.size(); ++i)\n            {\n                btSoftBody::Node&amp; n = body_-&gt;m_nodes[i];\n                Vector3&amp; src = *reinterpret_cast&lt;Vector3*&gt;(pVertexData + i * vertexSize);\n                src = ToVector3(n.m_x);\n            }\n            vertexBuffer_-&gt;Unlock();\n        }\n    }\n}\n\nvoid SoftBody::SetPosition(const Vector3&amp; position)\n{\n    if (body_)\n    {\n        body_-&gt;transform(btTransform(btQuaternion::getIdentity(), ToBtVector3(position)));\n        MarkNetworkUpdate();\n    }\n}\n\n}</code></pre>\n<p>11_Physics.h</p>\n<pre><code class=\"lang-auto\">#include &lt;Urho3D/Physics/SoftBody.h&gt;</code></pre>\n<p>11_Physics.cpp</p>\n<pre><code class=\"lang-auto\">    // Create mushroom\n    Node* softBodyNode = scene_-&gt;CreateChild(\"SomeSoftBody\");\n    StaticModel* model = softBodyNode-&gt;CreateComponent&lt;StaticModel&gt;();\n    model-&gt;SetModel(cache-&gt;GetResource&lt;Model&gt;(\"Models/Mushroom.mdl\"));\n    model-&gt;SetMaterial(cache-&gt;GetResource&lt;Material&gt;(\"Materials/Mushroom.xml\"));\n    model-&gt;SetCastShadows(true);\n\n    // Create SoftBody component\n    SoftBody* body = softBodyNode-&gt;CreateComponent&lt;SoftBody&gt;();\n    body-&gt;CreateTriMesh();</code></pre>", "post_number": 10, "post_type": 1, "updated_at": "2017-03-17T18:56:21.184Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 88, "readers_count": 87, "score": 67.6, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 2, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Contributor", "title_is_group": false, "bookmarked": false, "actions_summary": [{"id": 2, "count": 1}], "moderator": true, "admin": false, "staff": true, "user_id": 9, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7544, "name": "", "username": "Mike", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png", "created_at": "2015-09-03T10:27:14.000Z", "cooked": "<p>PhysicsWorld.h</p>\n<p>[spoiler][code]<br>\n//<br>\n// Copyright \u00a9 2008-2015 the Urho3D project.<br>\n//<br>\n// Permission is hereby granted, free of charge, to any person obtaining a copy<br>\n// of this software and associated documentation files (the \u201cSoftware\u201d), to deal<br>\n// in the Software without restriction, including without limitation the rights<br>\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>\n// copies of the Software, and to permit persons to whom the Software is<br>\n// furnished to do so, subject to the following conditions:<br>\n//<br>\n// The above copyright notice and this permission notice shall be included in<br>\n// all copies or substantial portions of the Software.<br>\n//<br>\n// THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br>\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br>\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br>\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br>\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<br>\n// THE SOFTWARE.<br>\n//</p>\n<p><span class=\"hashtag\">#pragma</span> once</p>\n<p><span class=\"hashtag\">#include</span> \u201c\u2026/Container/HashSet.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/IO/VectorBuffer.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Math/BoundingBox.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Math/Sphere.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Math/Vector3.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Scene/Component.h\u201d</p>\n<p><span class=\"hashtag\">#include</span> &lt;Bullet/LinearMath/btIDebugDraw.h&gt;</p>\n<p>class btCollisionConfiguration;<br>\nclass btCollisionShape;<br>\nclass btBroadphaseInterface;<br>\nclass btConstraintSolver;<br>\nclass btDiscreteDynamicsWorld;<br>\nclass btDispatcher;<br>\nclass btDynamicsWorld;<br>\nclass btPersistentManifold;<br>\nclass btSoftBodyWorldInfo; //===============================</p>\n<p>namespace Urho3D<br>\n{</p>\n<p>class CollisionShape;<br>\nclass Deserializer;<br>\nclass Constraint;<br>\nclass Model;<br>\nclass Node;<br>\nclass Ray;<br>\nclass RigidBody;<br>\nclass Scene;<br>\nclass Serializer;<br>\nclass XMLElement;</p>\n<p>//=====================================<br>\nclass SoftBody;<br>\nclass IndexBuffer;<br>\nclass VertexBuffer;<br>\n//=====================================</p>\n<p>struct CollisionGeometryData;</p>\n<p>/// Physics raycast hit.<br>\nstruct URHO3D_API PhysicsRaycastResult<br>\n{<br>\n/// Construct with defaults.<br>\nPhysicsRaycastResult() :<br>\nbody_(0)<br>\n{<br>\n}</p>\n<pre><code>/// Test for inequality, added to prevent GCC from complaining.\nbool operator !=(const PhysicsRaycastResult&amp; rhs) const\n{\n    return position_ != rhs.position_ || normal_ != rhs.normal_ || distance_ != rhs.distance_ || body_ != rhs.body_;\n}\n\n/// Hit worldspace position.\nVector3 position_;\n/// Hit worldspace normal.\nVector3 normal_;\n/// Hit distance from ray origin.\nfloat distance_;\n/// Rigid body that was hit.\nRigidBody* body_;\n</code></pre>\n<p>};</p>\n<p>/// Delayed world transform assignment for parented rigidbodies.<br>\nstruct DelayedWorldTransform<br>\n{<br>\n/// Rigid body.<br>\nRigidBody* rigidBody_;<br>\n/// Parent rigid body.<br>\nRigidBody* parentRigidBody_;<br>\n/// New world position.<br>\nVector3 worldPosition_;<br>\n/// New world rotation.<br>\nQuaternion worldRotation_;<br>\n};</p>\n<p>static const float DEFAULT_MAX_NETWORK_ANGULAR_VELOCITY = 100.0f;</p>\n<p>/// Physics simulation world component. Should be added only to the root scene node.<br>\nclass URHO3D_API PhysicsWorld : public Component, public btIDebugDraw<br>\n{<br>\nOBJECT(PhysicsWorld);</p>\n<pre><code>friend void InternalPreTickCallback(btDynamicsWorld* world, btScalar timeStep);\nfriend void InternalTickCallback(btDynamicsWorld* world, btScalar timeStep);\n</code></pre>\n<p>public:<br>\n/// Construct.<br>\nPhysicsWorld(Context* scontext);<br>\n/// Destruct.<br>\nvirtual ~PhysicsWorld();<br>\n/// Register object factory.<br>\nstatic void RegisterObject(Context* context);</p>\n<p>//=========================================<br>\n// softbody<br>\nbtSoftBodyWorldInfo* GetSoftBodyInfo() { return m_softBodyWorldInfo; }<br>\nbtSoftBodyWorldInfo* m_softBodyWorldInfo;<br>\n//=========================================</p>\n<pre><code>/// Check if an AABB is visible for debug drawing.\nvirtual bool isVisible(const btVector3&amp; aabbMin, const btVector3&amp; aabbMax);\n/// Draw a physics debug line.\nvirtual void drawLine(const btVector3&amp; from, const btVector3&amp; to, const btVector3&amp; color);\n/// Log warning from the physics engine.\nvirtual void reportErrorWarning(const char* warningString);\n/// Draw a physics debug contact point. Not implemented.\nvirtual void drawContactPoint\n    (const btVector3&amp; pointOnB, const btVector3&amp; normalOnB, btScalar distance, int lifeTime, const btVector3&amp; color);\n/// Draw physics debug 3D text. Not implemented.\nvirtual void draw3dText(const btVector3&amp; location, const char* textString);\n\n/// Set debug draw flags.\nvirtual void setDebugMode(int debugMode) { debugMode_ = debugMode; }\n\n/// Return debug draw flags.\nvirtual int getDebugMode() const { return debugMode_; }\n\n/// Visualize the component as debug geometry.\nvirtual void DrawDebugGeometry(DebugRenderer* debug, bool depthTest);\n\n/// Step the simulation forward.\nvoid Update(float timeStep);\n/// Refresh collisions only without updating dynamics.\nvoid UpdateCollisions();\n/// Set simulation substeps per second.\nvoid SetFps(int fps);\n/// Set gravity.\nvoid SetGravity(const Vector3&amp; gravity);\n/// Set maximum number of physics substeps per frame. 0 (default) is unlimited. Positive values cap the amount. Use a negative value to enable an adaptive timestep. This may cause inconsistent physics behavior.\nvoid SetMaxSubSteps(int num);\n/// Set number of constraint solver iterations.\nvoid SetNumIterations(int num);\n/// Set whether to interpolate between simulation steps.\nvoid SetInterpolation(bool enable);\n/// Set whether to use Bullet's internal edge utility for trimesh collisions. Disabled by default.\nvoid SetInternalEdge(bool enable);\n/// Set split impulse collision mode. This is more accurate, but slower. Disabled by default.\nvoid SetSplitImpulse(bool enable);\n/// Set maximum angular velocity for network replication.\nvoid SetMaxNetworkAngularVelocity(float velocity);\n/// Perform a physics world raycast and return all hits.\nvoid Raycast\n    (PODVector&lt;PhysicsRaycastResult&gt;&amp; result, const Ray&amp; ray, float maxDistance, unsigned collisionMask = M_MAX_UNSIGNED);\n/// Perform a physics world raycast and return the closest hit.\nvoid RaycastSingle(PhysicsRaycastResult&amp; result, const Ray&amp; ray, float maxDistance, unsigned collisionMask = M_MAX_UNSIGNED);\n/// Perform a physics world swept sphere test and return the closest hit.\nvoid SphereCast\n    (PhysicsRaycastResult&amp; result, const Ray&amp; ray, float radius, float maxDistance, unsigned collisionMask = M_MAX_UNSIGNED);\n/// Perform a physics world swept convex test using a user-supplied collision shape and return the first hit.\nvoid ConvexCast(PhysicsRaycastResult&amp; result, CollisionShape* shape, const Vector3&amp; startPos, const Quaternion&amp; startRot,\n    const Vector3&amp; endPos, const Quaternion&amp; endRot, unsigned collisionMask = M_MAX_UNSIGNED);\n/// Perform a physics world swept convex test using a user-supplied Bullet collision shape and return the first hit.\nvoid ConvexCast(PhysicsRaycastResult&amp; result, btCollisionShape* shape, const Vector3&amp; startPos, const Quaternion&amp; startRot,\n    const Vector3&amp; endPos, const Quaternion&amp; endRot, unsigned collisionMask = M_MAX_UNSIGNED);\n/// Invalidate cached collision geometry for a model.\nvoid RemoveCachedGeometry(Model* model);\n/// Return rigid bodies by a sphere query.\nvoid GetRigidBodies(PODVector&lt;RigidBody*&gt;&amp; result, const Sphere&amp; sphere, unsigned collisionMask = M_MAX_UNSIGNED);\n/// Return rigid bodies by a box query.\nvoid GetRigidBodies(PODVector&lt;RigidBody*&gt;&amp; result, const BoundingBox&amp; box, unsigned collisionMask = M_MAX_UNSIGNED);\n/// Return rigid bodies that have been in collision with a specific body on the last simulation step.\nvoid GetRigidBodies(PODVector&lt;RigidBody*&gt;&amp; result, const RigidBody* body);\n\n/// Return gravity.\nVector3 GetGravity() const;\n\n/// Return maximum number of physics substeps per frame.\nint GetMaxSubSteps() const { return maxSubSteps_; }\n\n/// Return number of constraint solver iterations.\nint GetNumIterations() const;\n\n/// Return whether interpolation between simulation steps is enabled.\nbool GetInterpolation() const { return interpolation_; }\n\n/// Return whether Bullet's internal edge utility for trimesh collisions is enabled.\nbool GetInternalEdge() const { return internalEdge_; }\n\n/// Return whether split impulse collision mode is enabled.\nbool GetSplitImpulse() const;\n\n/// Return simulation steps per second.\nint GetFps() const { return fps_; }\n\n/// Return maximum angular velocity for network replication.\nfloat GetMaxNetworkAngularVelocity() const { return maxNetworkAngularVelocity_; }\n\n/// Add a rigid body to keep track of. Called by RigidBody.\nvoid AddRigidBody(RigidBody* body);\n/// Remove a rigid body. Called by RigidBody.\nvoid RemoveRigidBody(RigidBody* body);\n</code></pre>\n<p>//====================================<br>\n/// Add a soft body to keep track of. Called by SoftBody.<br>\nvoid AddSoftBody(SoftBody* body);<br>\n/// Remove a soft body. Called by SoftBody.<br>\nvoid RemoveSoftBody(SoftBody* body);<br>\n//====================================</p>\n<pre><code>/// Add a collision shape to keep track of. Called by CollisionShape.\nvoid AddCollisionShape(CollisionShape* shape);\n/// Remove a collision shape. Called by CollisionShape.\nvoid RemoveCollisionShape(CollisionShape* shape);\n/// Add a constraint to keep track of. Called by Constraint.\nvoid AddConstraint(Constraint* joint);\n/// Remove a constraint. Called by Constraint.\nvoid RemoveConstraint(Constraint* joint);\n/// Add a delayed world transform assignment. Called by RigidBody.\nvoid AddDelayedWorldTransform(const DelayedWorldTransform&amp; transform);\n/// Add debug geometry to the debug renderer.\nvoid DrawDebugGeometry(bool depthTest);\n/// Set debug renderer to use. Called both by PhysicsWorld itself and physics components.\nvoid SetDebugRenderer(DebugRenderer* debug);\n/// Set debug geometry depth test mode. Called both by PhysicsWorld itself and physics components.\nvoid SetDebugDepthTest(bool enable);\n\n/// Return the Bullet physics world.\nbtDiscreteDynamicsWorld* GetWorld() { return world_; }\n\n/// Clean up the geometry cache.\nvoid CleanupGeometryCache();\n\n/// Return trimesh collision geometry cache.\nHashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr&lt;CollisionGeometryData&gt; &gt;&amp; GetTriMeshCache() { return triMeshCache_; }\n\n/// Return convex collision geometry cache.\nHashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr&lt;CollisionGeometryData&gt; &gt;&amp; GetConvexCache() { return convexCache_; }\n\n/// Set node dirtying to be disregarded.\nvoid SetApplyingTransforms(bool enable) { applyingTransforms_ = enable; }\n\n/// Return whether node dirtying should be disregarded.\nbool IsApplyingTransforms() const { return applyingTransforms_; }\n</code></pre>\n<p>protected:<br>\n/// Handle scene being assigned.<br>\nvirtual void OnSceneSet(Scene* scene);</p>\n<p>private:<br>\n/// Handle the scene subsystem update event, step simulation here.<br>\nvoid HandleSceneSubsystemUpdate(StringHash eventType, VariantMap&amp; eventData);<br>\n/// Trigger update before each physics simulation step.<br>\nvoid PreStep(float timeStep);<br>\n/// Trigger update after each physics simulation step.<br>\nvoid PostStep(float timeStep);<br>\n/// Send accumulated collision events.<br>\nvoid SendCollisionEvents();</p>\n<pre><code>/// Bullet collision configuration.\nbtCollisionConfiguration* collisionConfiguration_;\n/// Bullet collision dispatcher.\nbtDispatcher* collisionDispatcher_;\n/// Bullet collision broadphase.\nbtBroadphaseInterface* broadphase_;\n/// Bullet constraint solver.\nbtConstraintSolver* solver_;\n/// Bullet physics world.\nbtDiscreteDynamicsWorld* world_;\n/// Extra weak pointer to scene to allow for cleanup in case the world is destroyed before other components.\nWeakPtr&lt;Scene&gt; scene_;\n/// Rigid bodies in the world.\nPODVector&lt;RigidBody*&gt; rigidBodies_;\n</code></pre>\n<p>//===================================<br>\n/// Soft bodies in the world.<br>\nPODVector&lt;SoftBody*&gt; softBodies_;<br>\n//===================================</p>\n<pre><code>/// Collision shapes in the world.\nPODVector&lt;CollisionShape*&gt; collisionShapes_;\n/// Constraints in the world.\nPODVector&lt;Constraint*&gt; constraints_;\n/// Collision pairs on this frame.\nHashMap&lt;Pair&lt;WeakPtr&lt;RigidBody&gt;, WeakPtr&lt;RigidBody&gt; &gt;, btPersistentManifold*&gt; currentCollisions_;\n/// Collision pairs on the previous frame. Used to check if a collision is \"new.\" Manifolds are not guaranteed to exist anymore.\nHashMap&lt;Pair&lt;WeakPtr&lt;RigidBody&gt;, WeakPtr&lt;RigidBody&gt; &gt;, btPersistentManifold*&gt; previousCollisions_;\n/// Delayed (parented) world transform assignments.\nHashMap&lt;RigidBody*, DelayedWorldTransform&gt; delayedWorldTransforms_;\n/// Cache for trimesh geometry data by model and LOD level.\nHashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr&lt;CollisionGeometryData&gt; &gt; triMeshCache_;\n/// Cache for convex geometry data by model and LOD level.\nHashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr&lt;CollisionGeometryData&gt; &gt; convexCache_;\n/// Preallocated event data map for physics collision events.\nVariantMap physicsCollisionData_;\n/// Preallocated event data map for node collision events.\nVariantMap nodeCollisionData_;\n/// Preallocated buffer for physics collision contact data.\nVectorBuffer contacts_;\n/// Simulation substeps per second.\nunsigned fps_;\n/// Maximum number of simulation substeps per frame. 0 (default) unlimited, or negative values for adaptive timestep.\nint maxSubSteps_;\n/// Time accumulator for non-interpolated mode.\nfloat timeAcc_;\n/// Maximum angular velocity for network replication.\nfloat maxNetworkAngularVelocity_;\n/// Interpolation flag.\nbool interpolation_;\n/// Use internal edge utility flag.\nbool internalEdge_;\n/// Applying transforms flag.\nbool applyingTransforms_;\n/// Debug renderer.\nDebugRenderer* debugRenderer_;\n/// Debug draw flags.\nint debugMode_;\n/// Debug draw depth test mode.\nbool debugDepthTest_;\n</code></pre>\n<p>};</p>\n<p>/// Register Physics library objects.<br>\nvoid URHO3D_API RegisterPhysicsLibrary(Context* context);</p>\n<p>}</p>\n<p>[/code][/spoiler]</p>\n<p>PhysicsWorld.cpp</p>\n<p>[spoiler][code]<br>\n//<br>\n// Copyright \u00a9 2008-2015 the Urho3D project.<br>\n//<br>\n// Permission is hereby granted, free of charge, to any person obtaining a copy<br>\n// of this software and associated documentation files (the \u201cSoftware\u201d), to deal<br>\n// in the Software without restriction, including without limitation the rights<br>\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>\n// copies of the Software, and to permit persons to whom the Software is<br>\n// furnished to do so, subject to the following conditions:<br>\n//<br>\n// The above copyright notice and this permission notice shall be included in<br>\n// all copies or substantial portions of the Software.<br>\n//<br>\n// THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br>\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br>\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br>\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br>\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<br>\n// THE SOFTWARE.<br>\n//</p>\n<p><span class=\"hashtag\">#include</span> \u201c\u2026/Precompiled.h\u201d</p>\n<p><span class=\"hashtag\">#include</span> \u201c\u2026/Core/Context.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Core/Mutex.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Core/Profiler.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Graphics/DebugRenderer.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Graphics/Model.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/IO/Log.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Math/Ray.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Physics/CollisionShape.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Physics/Constraint.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Physics/PhysicsEvents.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Physics/PhysicsUtils.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Physics/PhysicsWorld.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Physics/RigidBody.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Scene/Scene.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Scene/SceneEvents.h\u201d<br>\n<span class=\"hashtag\">#include</span> \u201c\u2026/Physics/SoftBody.h\u201d</p>\n<p><span class=\"hashtag\">#include</span> &lt;Bullet/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h&gt;<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h&gt;<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletCollision/CollisionDispatch/btInternalEdgeUtility.h&gt;<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletCollision/CollisionShapes/btBoxShape.h&gt;<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletCollision/CollisionShapes/btSphereShape.h&gt;<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h&gt;<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h&gt;</p>\n<p>//==========================================<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletSoftBody/btSoftBody.h&gt;<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletSoftBody/btSoftBodyRigidBodyCollisionConfiguration.h&gt;<br>\n<span class=\"hashtag\">#include</span> &lt;Bullet/BulletSoftBody/btSoftRigidDynamicsWorld.h&gt;<br>\n<span class=\"hashtag\">#define</span> TEST_SOFTBODY<br>\n//==========================================</p>\n<p>extern ContactAddedCallback gContactAddedCallback;</p>\n<p>namespace Urho3D<br>\n{</p>\n<p>const char* PHYSICS_CATEGORY = \u201cPhysics\u201d;<br>\nextern const char* SUBSYSTEM_CATEGORY;</p>\n<p>static const int MAX_SOLVER_ITERATIONS = 256;<br>\nstatic const int DEFAULT_FPS = 60;<br>\nstatic const Vector3 DEFAULT_GRAVITY = Vector3(0.0f, -9.81f, 0.0f);</p>\n<p>static bool CompareRaycastResults(const PhysicsRaycastResult&amp; lhs, const PhysicsRaycastResult&amp; rhs)<br>\n{<br>\nreturn lhs.distance_ &lt; rhs.distance_;<br>\n}</p>\n<p>void InternalPreTickCallback(btDynamicsWorld* world, btScalar timeStep)<br>\n{<br>\nstatic_cast&lt;PhysicsWorld*&gt;(world-&gt;getWorldUserInfo())-&gt;PreStep(timeStep);<br>\n}</p>\n<p>void InternalTickCallback(btDynamicsWorld* world, btScalar timeStep)<br>\n{<br>\nstatic_cast&lt;PhysicsWorld*&gt;(world-&gt;getWorldUserInfo())-&gt;PostStep(timeStep);<br>\n}</p>\n<p>static bool CustomMaterialCombinerCallback(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, int partId0,<br>\nint index0, const btCollisionObjectWrapper* colObj1Wrap, int partId1, int index1)<br>\n{<br>\nbtAdjustInternalEdgeContacts(cp, colObj1Wrap, colObj0Wrap, partId1, index1);</p>\n<pre><code>cp.m_combinedFriction = colObj0Wrap-&gt;getCollisionObject()-&gt;getFriction() * colObj1Wrap-&gt;getCollisionObject()-&gt;getFriction();\ncp.m_combinedRestitution =\n    colObj0Wrap-&gt;getCollisionObject()-&gt;getRestitution() * colObj1Wrap-&gt;getCollisionObject()-&gt;getRestitution();\n\nreturn true;\n</code></pre>\n<p>}</p>\n<p>/// Callback for physics world queries.<br>\nstruct PhysicsQueryCallback : public btCollisionWorld::ContactResultCallback<br>\n{<br>\n/// Construct.<br>\nPhysicsQueryCallback(PODVector&lt;RigidBody*&gt;&amp; result, unsigned collisionMask) :<br>\nresult_(result),<br>\ncollisionMask_(collisionMask)<br>\n{<br>\n}</p>\n<pre><code>/// Add a contact result.\nvirtual btScalar addSingleResult(btManifoldPoint&amp;, const btCollisionObjectWrapper* colObj0Wrap, int, int,\n    const btCollisionObjectWrapper* colObj1Wrap, int, int)\n{\n    RigidBody* body = reinterpret_cast&lt;RigidBody*&gt;(colObj0Wrap-&gt;getCollisionObject()-&gt;getUserPointer());\n    if (body &amp;&amp; !result_.Contains(body) &amp;&amp; (body-&gt;GetCollisionLayer() &amp; collisionMask_))\n        result_.Push(body);\n    body = reinterpret_cast&lt;RigidBody*&gt;(colObj1Wrap-&gt;getCollisionObject()-&gt;getUserPointer());\n    if (body &amp;&amp; !result_.Contains(body) &amp;&amp; (body-&gt;GetCollisionLayer() &amp; collisionMask_))\n        result_.Push(body);\n    return 0.0f;\n}\n\n/// Found rigid bodies.\nPODVector&lt;RigidBody*&gt;&amp; result_;\n/// Collision mask for the query.\nunsigned collisionMask_;\n</code></pre>\n<p>};</p>\n<p>PhysicsWorld::PhysicsWorld(Context* context) :<br>\nComponent(context),<br>\ncollisionConfiguration_(0),<br>\ncollisionDispatcher_(0),<br>\nbroadphase_(0),<br>\nsolver_(0),<br>\nworld_(0),<br>\nfps_(DEFAULT_FPS),<br>\nmaxSubSteps_(0),<br>\ntimeAcc_(0.0f),<br>\nmaxNetworkAngularVelocity_(DEFAULT_MAX_NETWORK_ANGULAR_VELOCITY),<br>\ninterpolation_(true),<br>\ninternalEdge_(true),<br>\napplyingTransforms_(false),<br>\ndebugRenderer_(0),<br>\ndebugMode_(btIDebugDraw::DBG_DrawWireframe | btIDebugDraw::DBG_DrawConstraints | btIDebugDraw::DBG_DrawConstraintLimits)<br>\n{<br>\ngContactAddedCallback = CustomMaterialCombinerCallback;</p>\n<p>//===============================================<br>\n//    collisionConfiguration_ = new btDefaultCollisionConfiguration();<br>\n<span class=\"hashtag\">#ifndef</span> TEST_SOFTBODY<br>\ncollisionConfiguration_ = new btDefaultCollisionConfiguration();<br>\n<span class=\"hashtag\">#else</span><br>\ncollisionConfiguration_ = new btSoftBodyRigidBodyCollisionConfiguration();<br>\n<span class=\"hashtag\">#endif</span><br>\n//===============================================</p>\n<pre><code>collisionDispatcher_ = new btCollisionDispatcher(collisionConfiguration_);\nbroadphase_ = new btDbvtBroadphase();\nsolver_ = new btSequentialImpulseConstraintSolver();\n</code></pre>\n<p>//===============================================<br>\n//    world_ = new btDiscreteDynamicsWorld(collisionDispatcher_, broadphase_, solver_, collisionConfiguration_);<br>\n<span class=\"hashtag\">#ifndef</span> TEST_SOFTBODY<br>\nworld_ = new btDiscreteDynamicsWorld(collisionDispatcher_, broadphase_, solver_, collisionConfiguration_);<br>\n<span class=\"hashtag\">#else</span><br>\nworld_ = new btSoftRigidDynamicsWorld(collisionDispatcher_, broadphase_, solver_, collisionConfiguration_, NULL);<br>\n<span class=\"hashtag\">#endif</span><br>\n//===============================================</p>\n<pre><code>world_-&gt;setGravity(ToBtVector3(DEFAULT_GRAVITY));\nworld_-&gt;getDispatchInfo().m_useContinuous = true;\nworld_-&gt;getSolverInfo().m_splitImpulse = false; // Disable by default for performance\nworld_-&gt;setDebugDrawer(this);\nworld_-&gt;setInternalTickCallback(InternalPreTickCallback, static_cast&lt;void*&gt;(this), true);\nworld_-&gt;setInternalTickCallback(InternalTickCallback, static_cast&lt;void*&gt;(this), false);\n</code></pre>\n<p>//==========================================<br>\n<span class=\"hashtag\">#ifdef</span> TEST_SOFTBODY<br>\nm_softBodyWorldInfo = new btSoftBodyWorldInfo();<br>\nm_softBodyWorldInfo-&gt;m_dispatcher = collisionDispatcher_;<br>\nm_softBodyWorldInfo-&gt;m_broadphase = broadphase_;<br>\nm_softBodyWorldInfo-&gt;air_density = (btScalar)1.2;<br>\nm_softBodyWorldInfo-&gt;water_density = 0;<br>\nm_softBodyWorldInfo-&gt;water_offset = 0;<br>\nm_softBodyWorldInfo-&gt;water_normal = btVector3(0, 0, 0);<br>\nm_softBodyWorldInfo-&gt;m_gravity.setValue(0, -10, 0);<br>\nm_softBodyWorldInfo-&gt;m_sparsesdf.Initialize();</p>\n<pre><code>    softBodies_.Clear();\n#endif\n</code></pre>\n<p>//===========================================<br>\n}</p>\n<p>PhysicsWorld::~PhysicsWorld()<br>\n{<br>\nif (scene_)<br>\n{<br>\n// Force all remaining constraints, rigid bodies and collision shapes to release themselves<br>\nfor (PODVector&lt;Constraint*&gt;::Iterator i = constraints_.Begin(); i != constraints_.End(); ++i)<br>\n(*i)-&gt;ReleaseConstraint();</p>\n<pre><code>    for (PODVector&lt;RigidBody*&gt;::Iterator i = rigidBodies_.Begin(); i != rigidBodies_.End(); ++i)\n        (*i)-&gt;ReleaseBody();\n\n    for (PODVector&lt;CollisionShape*&gt;::Iterator i = collisionShapes_.Begin(); i != collisionShapes_.End(); ++i)\n        (*i)-&gt;ReleaseShape();\n</code></pre>\n<p>//====================================<br>\nfor (PODVector&lt;SoftBody*&gt;::Iterator i = softBodies_.Begin(); i != softBodies_.End(); ++i)<br>\n(*i)-&gt;ReleaseBody();<br>\n//====================================<br>\n}</p>\n<pre><code>delete world_;\nworld_ = 0;\n\ndelete solver_;\nsolver_ = 0;\n\ndelete broadphase_;\nbroadphase_ = 0;\n\ndelete collisionDispatcher_;\ncollisionDispatcher_ = 0;\n\ndelete collisionConfiguration_;\ncollisionConfiguration_ = 0;\n</code></pre>\n<p>//=================================<br>\nif (m_softBodyWorldInfo)<br>\n{<br>\nm_softBodyWorldInfo-&gt;m_dispatcher = 0;<br>\nm_softBodyWorldInfo-&gt;m_broadphase = 0;</p>\n<pre><code>    delete m_softBodyWorldInfo;\n    m_softBodyWorldInfo = 0;\n}\n</code></pre>\n<p>//=================================<br>\n}</p>\n<p>void PhysicsWorld::RegisterObject(Context* context)<br>\n{<br>\ncontext-&gt;RegisterFactory(SUBSYSTEM_CATEGORY);</p>\n<pre><code>MIXED_ACCESSOR_ATTRIBUTE(\"Gravity\", GetGravity, SetGravity, Vector3, DEFAULT_GRAVITY, AM_DEFAULT);\nATTRIBUTE(\"Physics FPS\", int, fps_, DEFAULT_FPS, AM_DEFAULT);\nATTRIBUTE(\"Max Substeps\", int, maxSubSteps_, 0, AM_DEFAULT);\nACCESSOR_ATTRIBUTE(\"Solver Iterations\", GetNumIterations, SetNumIterations, int, 10, AM_DEFAULT);\nATTRIBUTE(\"Net Max Angular Vel.\", float, maxNetworkAngularVelocity_, DEFAULT_MAX_NETWORK_ANGULAR_VELOCITY, AM_DEFAULT);\nATTRIBUTE(\"Interpolation\", bool, interpolation_, true, AM_FILE);\nATTRIBUTE(\"Internal Edge Utility\", bool, internalEdge_, true, AM_DEFAULT);\nACCESSOR_ATTRIBUTE(\"Split Impulse\", GetSplitImpulse, SetSplitImpulse, bool, false, AM_DEFAULT);\n</code></pre>\n<p>}</p>\n<p>bool PhysicsWorld::isVisible(const btVector3&amp; aabbMin, const btVector3&amp; aabbMax)<br>\n{<br>\nif (debugRenderer_)<br>\nreturn debugRenderer_-&gt;IsInside(BoundingBox(ToVector3(aabbMin), ToVector3(aabbMax)));<br>\nelse<br>\nreturn false;<br>\n}</p>\n<p>void PhysicsWorld::drawLine(const btVector3&amp; from, const btVector3&amp; to, const btVector3&amp; color)<br>\n{<br>\nif (debugRenderer_)<br>\ndebugRenderer_-&gt;AddLine(ToVector3(from), ToVector3(to), Color(color.x(), color.y(), color.z()), debugDepthTest_);<br>\n}</p>\n<p>void PhysicsWorld::DrawDebugGeometry(DebugRenderer* debug, bool depthTest)<br>\n{<br>\nif (debug)<br>\n{<br>\nPROFILE(PhysicsDrawDebug);</p>\n<pre><code>    debugRenderer_ = debug;\n    debugDepthTest_ = depthTest;\n    world_-&gt;debugDrawWorld();\n    debugRenderer_ = 0;\n}\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::reportErrorWarning(const char* warningString)<br>\n{<br>\nLOGWARNING(\"Physics: \" + String(warningString));<br>\n}</p>\n<p>void PhysicsWorld::drawContactPoint(const btVector3&amp; pointOnB, const btVector3&amp; normalOnB, btScalar distance, int lifeTime,<br>\nconst btVector3&amp; color)<br>\n{<br>\n}</p>\n<p>void PhysicsWorld::draw3dText(const btVector3&amp; location, const char* textString)<br>\n{<br>\n}</p>\n<p>void PhysicsWorld::Update(float timeStep)<br>\n{<br>\nPROFILE(UpdatePhysics);</p>\n<pre><code>float internalTimeStep = 1.0f / fps_;\nint maxSubSteps = (int)(timeStep * fps_) + 1;\nif (maxSubSteps_ &lt; 0)\n{\n    internalTimeStep = timeStep;\n    maxSubSteps = 1;\n}\nelse if (maxSubSteps_ &gt; 0)\n    maxSubSteps = Min(maxSubSteps, maxSubSteps_);\n\ndelayedWorldTransforms_.Clear();\n\nif (interpolation_)\n    world_-&gt;stepSimulation(timeStep, maxSubSteps, internalTimeStep);\nelse\n{\n    timeAcc_ += timeStep;\n    while (timeAcc_ &gt;= internalTimeStep &amp;&amp; maxSubSteps &gt; 0)\n    {\n        world_-&gt;stepSimulation(internalTimeStep, 0, internalTimeStep);\n        timeAcc_ -= internalTimeStep;\n        --maxSubSteps;\n    }\n}\n\n// Apply delayed (parented) world transforms now\nwhile (!delayedWorldTransforms_.Empty())\n{\n    for (HashMap&lt;RigidBody*, DelayedWorldTransform&gt;::Iterator i = delayedWorldTransforms_.Begin();\n         i != delayedWorldTransforms_.End(); ++i)\n    {\n        const DelayedWorldTransform&amp; transform = i-&gt;second_;\n\n        // If parent's transform has already been assigned, can proceed\n        if (!delayedWorldTransforms_.Contains(transform.parentRigidBody_))\n        {\n            transform.rigidBody_-&gt;ApplyWorldTransform(transform.worldPosition_, transform.worldRotation_);\n            delayedWorldTransforms_.Erase(i);\n        }\n    }\n}\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::UpdateCollisions()<br>\n{<br>\nworld_-&gt;performDiscreteCollisionDetection();<br>\n}</p>\n<p>void PhysicsWorld::SetFps(int fps)<br>\n{<br>\nfps_ = (unsigned)Clamp(fps, 1, 1000);</p>\n<pre><code>MarkNetworkUpdate();\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::SetGravity(const Vector3&amp; gravity)<br>\n{<br>\nworld_-&gt;setGravity(ToBtVector3(gravity));</p>\n<pre><code>MarkNetworkUpdate();\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::SetMaxSubSteps(int num)<br>\n{<br>\nmaxSubSteps_ = num;<br>\nMarkNetworkUpdate();<br>\n}</p>\n<p>void PhysicsWorld::SetNumIterations(int num)<br>\n{<br>\nnum = Clamp(num, 1, MAX_SOLVER_ITERATIONS);<br>\nworld_-&gt;getSolverInfo().m_numIterations = num;</p>\n<pre><code>MarkNetworkUpdate();\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::SetInterpolation(bool enable)<br>\n{<br>\ninterpolation_ = enable;<br>\n}</p>\n<p>void PhysicsWorld::SetInternalEdge(bool enable)<br>\n{<br>\ninternalEdge_ = enable;</p>\n<pre><code>MarkNetworkUpdate();\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::SetSplitImpulse(bool enable)<br>\n{<br>\nworld_-&gt;getSolverInfo().m_splitImpulse = enable;</p>\n<pre><code>MarkNetworkUpdate();\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::SetMaxNetworkAngularVelocity(float velocity)<br>\n{<br>\nmaxNetworkAngularVelocity_ = Clamp(velocity, 1.0f, 32767.0f);</p>\n<pre><code>MarkNetworkUpdate();\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::Raycast(PODVector&amp; result, const Ray&amp; ray, float maxDistance, unsigned collisionMask)<br>\n{<br>\nPROFILE(PhysicsRaycast);</p>\n<pre><code>if (maxDistance &gt;= M_INFINITY)\n    LOGWARNING(\"Infinite maxDistance in physics raycast is not supported\");\n\nbtCollisionWorld::AllHitsRayResultCallback\n    rayCallback(ToBtVector3(ray.origin_), ToBtVector3(ray.origin_ + maxDistance * ray.direction_));\nrayCallback.m_collisionFilterGroup = (short)0xffff;\nrayCallback.m_collisionFilterMask = (short)collisionMask;\n\nworld_-&gt;rayTest(rayCallback.m_rayFromWorld, rayCallback.m_rayToWorld, rayCallback);\n\nfor (int i = 0; i &lt; rayCallback.m_collisionObjects.size(); ++i)\n{\n    PhysicsRaycastResult newResult;\n    newResult.body_ = static_cast&lt;RigidBody*&gt;(rayCallback.m_collisionObjects[i]-&gt;getUserPointer());\n    newResult.position_ = ToVector3(rayCallback.m_hitPointWorld[i]);\n    newResult.normal_ = ToVector3(rayCallback.m_hitNormalWorld[i]);\n    newResult.distance_ = (newResult.position_ - ray.origin_).Length();\n    result.Push(newResult);\n}\n\nSort(result.Begin(), result.End(), CompareRaycastResults);\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::RaycastSingle(PhysicsRaycastResult&amp; result, const Ray&amp; ray, float maxDistance, unsigned collisionMask)<br>\n{<br>\nPROFILE(PhysicsRaycastSingle);</p>\n<pre><code>if (maxDistance &gt;= M_INFINITY)\n    LOGWARNING(\"Infinite maxDistance in physics raycast is not supported\");\n\nbtCollisionWorld::ClosestRayResultCallback\n    rayCallback(ToBtVector3(ray.origin_), ToBtVector3(ray.origin_ + maxDistance * ray.direction_));\nrayCallback.m_collisionFilterGroup = (short)0xffff;\nrayCallback.m_collisionFilterMask = (short)collisionMask;\n\nworld_-&gt;rayTest(rayCallback.m_rayFromWorld, rayCallback.m_rayToWorld, rayCallback);\n\nif (rayCallback.hasHit())\n{\n    result.position_ = ToVector3(rayCallback.m_hitPointWorld);\n    result.normal_ = ToVector3(rayCallback.m_hitNormalWorld);\n    result.distance_ = (result.position_ - ray.origin_).Length();\n    result.body_ = static_cast&lt;RigidBody*&gt;(rayCallback.m_collisionObject-&gt;getUserPointer());\n}\nelse\n{\n    result.position_ = Vector3::ZERO;\n    result.normal_ = Vector3::ZERO;\n    result.distance_ = M_INFINITY;\n    result.body_ = 0;\n}\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::SphereCast(PhysicsRaycastResult&amp; result, const Ray&amp; ray, float radius, float maxDistance, unsigned collisionMask)<br>\n{<br>\nPROFILE(PhysicsSphereCast);</p>\n<pre><code>if (maxDistance &gt;= M_INFINITY)\n    LOGWARNING(\"Infinite maxDistance in physics sphere cast is not supported\");\n\nbtSphereShape shape(radius);\n\nbtCollisionWorld::ClosestConvexResultCallback\n    convexCallback(ToBtVector3(ray.origin_), ToBtVector3(ray.origin_ + maxDistance * ray.direction_));\nconvexCallback.m_collisionFilterGroup = (short)0xffff;\nconvexCallback.m_collisionFilterMask = (short)collisionMask;\n\nworld_-&gt;convexSweepTest(&amp;shape, btTransform(btQuaternion::getIdentity(), convexCallback.m_convexFromWorld),\n    btTransform(btQuaternion::getIdentity(), convexCallback.m_convexToWorld), convexCallback);\n\nif (convexCallback.hasHit())\n{\n    result.body_ = static_cast&lt;RigidBody*&gt;(convexCallback.m_hitCollisionObject-&gt;getUserPointer());\n    result.position_ = ToVector3(convexCallback.m_hitPointWorld);\n    result.normal_ = ToVector3(convexCallback.m_hitNormalWorld);\n    result.distance_ = (result.position_ - ray.origin_).Length();\n}\nelse\n{\n    result.body_ = 0;\n    result.position_ = Vector3::ZERO;\n    result.normal_ = Vector3::ZERO;\n    result.distance_ = M_INFINITY;\n}\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::ConvexCast(PhysicsRaycastResult&amp; result, CollisionShape* shape, const Vector3&amp; startPos,<br>\nconst Quaternion&amp; startRot, const Vector3&amp; endPos, const Quaternion&amp; endRot, unsigned collisionMask)<br>\n{<br>\nif (!shape || !shape-&gt;GetCollisionShape())<br>\n{<br>\nLOGERROR(\u201cNull collision shape for convex cast\u201d);<br>\nresult.body_ = 0;<br>\nresult.position_ = Vector3::ZERO;<br>\nresult.normal_ = Vector3::ZERO;<br>\nresult.distance_ = M_INFINITY;<br>\nreturn;<br>\n}</p>\n<pre><code>// If shape is attached in a rigidbody, set its collision group temporarily to 0 to make sure it is not returned in the sweep result\nRigidBody* bodyComp = shape-&gt;GetComponent&lt;RigidBody&gt;();\nbtRigidBody* body = bodyComp ? bodyComp-&gt;GetBody() : (btRigidBody*)0;\nbtBroadphaseProxy* proxy = body ? body-&gt;getBroadphaseProxy() : (btBroadphaseProxy*)0;\nshort group = 0;\nif (proxy)\n{\n    group = proxy-&gt;m_collisionFilterGroup;\n    proxy-&gt;m_collisionFilterGroup = 0;\n}\n\n// Take the shape's offset position &amp; rotation into account\nNode* shapeNode = shape-&gt;GetNode();\nMatrix3x4 startTransform(startPos, startRot, shapeNode ? shapeNode-&gt;GetWorldScale() : Vector3::ONE);\nMatrix3x4 endTransform(endPos, endRot, shapeNode ? shapeNode-&gt;GetWorldScale() : Vector3::ONE);\nVector3 effectiveStartPos = startTransform * shape-&gt;GetPosition();\nVector3 effectiveEndPos = endTransform * shape-&gt;GetPosition();\nQuaternion effectiveStartRot = startRot * shape-&gt;GetRotation();\nQuaternion effectiveEndRot = endRot * shape-&gt;GetRotation();\n\nConvexCast(result, shape-&gt;GetCollisionShape(), effectiveStartPos, effectiveStartRot, effectiveEndPos, effectiveEndRot, collisionMask);\n\n// Restore the collision group\nif (proxy)\n    proxy-&gt;m_collisionFilterGroup = group;\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::ConvexCast(PhysicsRaycastResult&amp; result, btCollisionShape* shape, const Vector3&amp; startPos,<br>\nconst Quaternion&amp; startRot, const Vector3&amp; endPos, const Quaternion&amp; endRot, unsigned collisionMask)<br>\n{<br>\nif (!shape)<br>\n{<br>\nLOGERROR(\u201cNull collision shape for convex cast\u201d);<br>\nresult.body_ = 0;<br>\nresult.position_ = Vector3::ZERO;<br>\nresult.normal_ = Vector3::ZERO;<br>\nresult.distance_ = M_INFINITY;<br>\nreturn;<br>\n}</p>\n<pre><code>if (!shape-&gt;isConvex())\n{\n    LOGERROR(\"Can not use non-convex collision shape for convex cast\");\n    result.body_ = 0;\n    result.position_ = Vector3::ZERO;\n    result.normal_ = Vector3::ZERO;\n    result.distance_ = M_INFINITY;\n    return;\n}\n\nPROFILE(PhysicsConvexCast);\n\nbtCollisionWorld::ClosestConvexResultCallback convexCallback(ToBtVector3(startPos), ToBtVector3(endPos));\nconvexCallback.m_collisionFilterGroup = (short)0xffff;\nconvexCallback.m_collisionFilterMask = (short)collisionMask;\n\nworld_-&gt;convexSweepTest(static_cast&lt;btConvexShape*&gt;(shape), btTransform(ToBtQuaternion(startRot),\n        convexCallback.m_convexFromWorld), btTransform(ToBtQuaternion(endRot), convexCallback.m_convexToWorld),\n    convexCallback);\n\nif (convexCallback.hasHit())\n{\n    result.body_ = static_cast&lt;RigidBody*&gt;(convexCallback.m_hitCollisionObject-&gt;getUserPointer());\n    result.position_ = ToVector3(convexCallback.m_hitPointWorld);\n    result.normal_ = ToVector3(convexCallback.m_hitNormalWorld);\n    result.distance_ = (result.position_ - startPos).Length();\n}\nelse\n{\n    result.body_ = 0;\n    result.position_ = Vector3::ZERO;\n    result.normal_ = Vector3::ZERO;\n    result.distance_ = M_INFINITY;\n}\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::RemoveCachedGeometry(Model* model)<br>\n{<br>\nfor (HashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr &gt;::Iterator i = triMeshCache_.Begin();<br>\ni != triMeshCache_.End()<img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=5\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"><br>\n{<br>\nHashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr &gt;::Iterator current = i++;<br>\nif (current-&gt;first_.first_ == model)<br>\ntriMeshCache_.Erase(current);<br>\n}<br>\nfor (HashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr &gt;::Iterator i = convexCache_.Begin();<br>\ni != convexCache_.End()<img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=5\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"><br>\n{<br>\nHashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr &gt;::Iterator current = i++;<br>\nif (current-&gt;first_.first_ == model)<br>\nconvexCache_.Erase(current);<br>\n}<br>\n}</p>\n<p>void PhysicsWorld::GetRigidBodies(PODVector&lt;RigidBody*&gt;&amp; result, const Sphere&amp; sphere, unsigned collisionMask)<br>\n{<br>\nPROFILE(PhysicsSphereQuery);</p>\n<pre><code>result.Clear();\n\nbtSphereShape sphereShape(sphere.radius_);\nbtRigidBody* tempRigidBody = new btRigidBody(1.0f, 0, &amp;sphereShape);\ntempRigidBody-&gt;setWorldTransform(btTransform(btQuaternion::getIdentity(), ToBtVector3(sphere.center_)));\n// Need to activate the temporary rigid body to get reliable results from static, sleeping objects\ntempRigidBody-&gt;activate();\nworld_-&gt;addRigidBody(tempRigidBody);\n\nPhysicsQueryCallback callback(result, collisionMask);\nworld_-&gt;contactTest(tempRigidBody, callback);\n\nworld_-&gt;removeRigidBody(tempRigidBody);\ndelete tempRigidBody;\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::GetRigidBodies(PODVector&lt;RigidBody*&gt;&amp; result, const BoundingBox&amp; box, unsigned collisionMask)<br>\n{<br>\nPROFILE(PhysicsBoxQuery);</p>\n<pre><code>result.Clear();\n\nbtBoxShape boxShape(ToBtVector3(box.HalfSize()));\nbtRigidBody* tempRigidBody = new btRigidBody(1.0f, 0, &amp;boxShape);\ntempRigidBody-&gt;setWorldTransform(btTransform(btQuaternion::getIdentity(), ToBtVector3(box.Center())));\ntempRigidBody-&gt;activate();\nworld_-&gt;addRigidBody(tempRigidBody);\n\nPhysicsQueryCallback callback(result, collisionMask);\nworld_-&gt;contactTest(tempRigidBody, callback);\n\nworld_-&gt;removeRigidBody(tempRigidBody);\ndelete tempRigidBody;\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::GetRigidBodies(PODVector&lt;RigidBody*&gt;&amp; result, const RigidBody* body)<br>\n{<br>\nPROFILE(GetCollidingBodies);</p>\n<pre><code>result.Clear();\n\nfor (HashMap&lt;Pair&lt;WeakPtr&lt;RigidBody&gt;, WeakPtr&lt;RigidBody&gt; &gt;, btPersistentManifold*&gt;::Iterator i = currentCollisions_.Begin();\n     i != currentCollisions_.End(); ++i)\n{\n    if (i-&gt;first_.first_ == body)\n        result.Push(i-&gt;first_.second_);\n    else if (i-&gt;first_.second_ == body)\n        result.Push(i-&gt;first_.first_);\n}\n</code></pre>\n<p>}</p>\n<p>Vector3 PhysicsWorld::GetGravity() const<br>\n{<br>\nreturn ToVector3(world_-&gt;getGravity());<br>\n}</p>\n<p>int PhysicsWorld::GetNumIterations() const<br>\n{<br>\nreturn world_-&gt;getSolverInfo().m_numIterations;<br>\n}</p>\n<p>bool PhysicsWorld::GetSplitImpulse() const<br>\n{<br>\nreturn world_-&gt;getSolverInfo().m_splitImpulse != 0;<br>\n}</p>\n<p>void PhysicsWorld::AddRigidBody(RigidBody* body)<br>\n{<br>\nrigidBodies_.Push(body);<br>\n}</p>\n<p>void PhysicsWorld::RemoveRigidBody(RigidBody* body)<br>\n{<br>\nrigidBodies_.Remove(body);<br>\n// Remove possible dangling pointer from the delayedWorldTransforms structure<br>\ndelayedWorldTransforms_.Erase(body);<br>\n}</p>\n<p>//===================================<br>\nvoid PhysicsWorld::AddSoftBody(SoftBody* body)<br>\n{<br>\nsoftBodies_.Push(body);<br>\n}</p>\n<p>void PhysicsWorld::RemoveSoftBody(SoftBody* body)<br>\n{<br>\nsoftBodies_.Remove(body);<br>\n}<br>\n//===================================</p>\n<p>void PhysicsWorld::AddCollisionShape(CollisionShape* shape)<br>\n{<br>\ncollisionShapes_.Push(shape);<br>\n}</p>\n<p>void PhysicsWorld::RemoveCollisionShape(CollisionShape* shape)<br>\n{<br>\ncollisionShapes_.Remove(shape);<br>\n}</p>\n<p>void PhysicsWorld::AddConstraint(Constraint* constraint)<br>\n{<br>\nconstraints_.Push(constraint);<br>\n}</p>\n<p>void PhysicsWorld::RemoveConstraint(Constraint* constraint)<br>\n{<br>\nconstraints_.Remove(constraint);<br>\n}</p>\n<p>void PhysicsWorld::AddDelayedWorldTransform(const DelayedWorldTransform&amp; transform)<br>\n{<br>\ndelayedWorldTransforms_[transform.rigidBody_] = transform;<br>\n}</p>\n<p>void PhysicsWorld::DrawDebugGeometry(bool depthTest)<br>\n{<br>\nDebugRenderer* debug = GetComponent();<br>\nDrawDebugGeometry(debug, depthTest);<br>\n}</p>\n<p>void PhysicsWorld::SetDebugRenderer(DebugRenderer* debug)<br>\n{<br>\ndebugRenderer_ = debug;<br>\n}</p>\n<p>void PhysicsWorld::SetDebugDepthTest(bool enable)<br>\n{<br>\ndebugDepthTest_ = enable;<br>\n}</p>\n<p>void PhysicsWorld::CleanupGeometryCache()<br>\n{<br>\n// Remove cached shapes whose only reference is the cache itself<br>\nfor (HashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr &gt;::Iterator i = triMeshCache_.Begin();<br>\ni != triMeshCache_.End()<img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=5\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"><br>\n{<br>\nHashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr &gt;::Iterator current = i++;<br>\nif (current-&gt;second_.Refs() == 1)<br>\ntriMeshCache_.Erase(current);<br>\n}<br>\nfor (HashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr &gt;::Iterator i = convexCache_.Begin();<br>\ni != convexCache_.End()<img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=5\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"><br>\n{<br>\nHashMap&lt;Pair&lt;Model*, unsigned&gt;, SharedPtr &gt;::Iterator current = i++;<br>\nif (current-&gt;second_.Refs() == 1)<br>\nconvexCache_.Erase(current);<br>\n}<br>\n}</p>\n<p>void PhysicsWorld::OnSceneSet(Scene* scene)<br>\n{<br>\n// Subscribe to the scene subsystem update, which will trigger the physics simulation step<br>\nif (scene)<br>\n{<br>\nscene_ = GetScene();<br>\nSubscribeToEvent(scene_, E_SCENESUBSYSTEMUPDATE, HANDLER(PhysicsWorld, HandleSceneSubsystemUpdate));<br>\n}<br>\nelse<br>\nUnsubscribeFromEvent(E_SCENESUBSYSTEMUPDATE);<br>\n}</p>\n<p>void PhysicsWorld::HandleSceneSubsystemUpdate(StringHash eventType, VariantMap&amp; eventData)<br>\n{<br>\nusing namespace SceneSubsystemUpdate;</p>\n<pre><code>Update(eventData[P_TIMESTEP].GetFloat());\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::PreStep(float timeStep)<br>\n{<br>\n// Send pre-step event<br>\nusing namespace PhysicsPreStep;</p>\n<pre><code>VariantMap&amp; eventData = GetEventDataMap();\neventData[P_WORLD] = this;\neventData[P_TIMESTEP] = timeStep;\nSendEvent(E_PHYSICSPRESTEP, eventData);\n\n// Start profiling block for the actual simulation step\n</code></pre>\n<p><span class=\"hashtag\">#ifdef</span> URHO3D_PROFILING<br>\nProfiler* profiler = GetSubsystem();<br>\nif (profiler)<br>\nprofiler-&gt;BeginBlock(\u201cStepSimulation\u201d);<br>\n<span class=\"hashtag\">#endif</span><br>\n}</p>\n<p>void PhysicsWorld::PostStep(float timeStep)<br>\n{<br>\n<span class=\"hashtag\">#ifdef</span> URHO3D_PROFILING<br>\nProfiler* profiler = GetSubsystem();<br>\nif (profiler)<br>\nprofiler-&gt;EndBlock();<br>\n<span class=\"hashtag\">#endif</span></p>\n<pre><code>SendCollisionEvents();\n\n// Send post-step event\nusing namespace PhysicsPostStep;\n\nVariantMap&amp; eventData = GetEventDataMap();\neventData[P_WORLD] = this;\neventData[P_TIMESTEP] = timeStep;\nSendEvent(E_PHYSICSPOSTSTEP, eventData);\n</code></pre>\n<p>}</p>\n<p>void PhysicsWorld::SendCollisionEvents()<br>\n{<br>\nPROFILE(SendCollisionEvents);</p>\n<pre><code>currentCollisions_.Clear();\nphysicsCollisionData_.Clear();\nnodeCollisionData_.Clear();\n\nint numManifolds = collisionDispatcher_-&gt;getNumManifolds();\n\nif (numManifolds)\n{\n    physicsCollisionData_[PhysicsCollision::P_WORLD] = this;\n\n    for (int i = 0; i &lt; numManifolds; ++i)\n    {\n        btPersistentManifold* contactManifold = collisionDispatcher_-&gt;getManifoldByIndexInternal(i);\n        // First check that there are actual contacts, as the manifold exists also when objects are close but not touching\n        if (!contactManifold-&gt;getNumContacts())\n            continue;\n\n        const btCollisionObject* objectA = contactManifold-&gt;getBody0();\n        const btCollisionObject* objectB = contactManifold-&gt;getBody1();\n\n        RigidBody* bodyA = static_cast&lt;RigidBody*&gt;(objectA-&gt;getUserPointer());\n        RigidBody* bodyB = static_cast&lt;RigidBody*&gt;(objectB-&gt;getUserPointer());\n        // If it's not a rigidbody, maybe a ghost object\n        if (!bodyA || !bodyB)\n            continue;\n\n        // Skip collision event signaling if both objects are static, or if collision event mode does not match\n        if (bodyA-&gt;GetMass() == 0.0f &amp;&amp; bodyB-&gt;GetMass() == 0.0f)\n            continue;\n        if (bodyA-&gt;GetCollisionEventMode() == COLLISION_NEVER || bodyB-&gt;GetCollisionEventMode() == COLLISION_NEVER)\n            continue;\n        if (bodyA-&gt;GetCollisionEventMode() == COLLISION_ACTIVE &amp;&amp; bodyB-&gt;GetCollisionEventMode() == COLLISION_ACTIVE &amp;&amp;\n            !bodyA-&gt;IsActive() &amp;&amp; !bodyB-&gt;IsActive())\n            continue;\n\n        WeakPtr&lt;RigidBody&gt; bodyWeakA(bodyA);\n        WeakPtr&lt;RigidBody&gt; bodyWeakB(bodyB);\n\n        Pair&lt;WeakPtr&lt;RigidBody&gt;, WeakPtr&lt;RigidBody&gt; &gt; bodyPair;\n        if (bodyA &lt; bodyB)\n            bodyPair = MakePair(bodyWeakA, bodyWeakB);\n        else\n            bodyPair = MakePair(bodyWeakB, bodyWeakA);\n\n        // First only store the collision pair as weak pointers and the manifold pointer, so user code can safely destroy\n        // objects during collision event handling\n        currentCollisions_[bodyPair] = contactManifold;\n    }\n\n    for (HashMap&lt;Pair&lt;WeakPtr&lt;RigidBody&gt;, WeakPtr&lt;RigidBody&gt; &gt;, btPersistentManifold*&gt;::Iterator i = currentCollisions_.Begin();\n         i != currentCollisions_.End(); ++i)\n    {\n        RigidBody* bodyA = i-&gt;first_.first_;\n        RigidBody* bodyB = i-&gt;first_.second_;\n        if (!bodyA || !bodyB)\n            continue;\n\n        btPersistentManifold* contactManifold = i-&gt;second_;\n\n        Node* nodeA = bodyA-&gt;GetNode();\n        Node* nodeB = bodyB-&gt;GetNode();\n        WeakPtr&lt;Node&gt; nodeWeakA(nodeA);\n        WeakPtr&lt;Node&gt; nodeWeakB(nodeB);\n\n        bool trigger = bodyA-&gt;IsTrigger() || bodyB-&gt;IsTrigger();\n        bool newCollision = !previousCollisions_.Contains(i-&gt;first_);\n\n        physicsCollisionData_[PhysicsCollision::P_NODEA] = nodeA;\n        physicsCollisionData_[PhysicsCollision::P_NODEB] = nodeB;\n        physicsCollisionData_[PhysicsCollision::P_BODYA] = bodyA;\n        physicsCollisionData_[PhysicsCollision::P_BODYB] = bodyB;\n        physicsCollisionData_[PhysicsCollision::P_TRIGGER] = trigger;\n\n        contacts_.Clear();\n\n        for (int j = 0; j &lt; contactManifold-&gt;getNumContacts(); ++j)\n        {\n            btManifoldPoint&amp; point = contactManifold-&gt;getContactPoint(j);\n            contacts_.WriteVector3(ToVector3(point.m_positionWorldOnB));\n            contacts_.WriteVector3(ToVector3(point.m_normalWorldOnB));\n            contacts_.WriteFloat(point.m_distance1);\n            contacts_.WriteFloat(point.m_appliedImpulse);\n        }\n\n        physicsCollisionData_[PhysicsCollision::P_CONTACTS] = contacts_.GetBuffer();\n\n        // Send separate collision start event if collision is new\n        if (newCollision)\n        {\n            SendEvent(E_PHYSICSCOLLISIONSTART, physicsCollisionData_);\n            // Skip rest of processing if either of the nodes or bodies is removed as a response to the event\n            if (!nodeWeakA || !nodeWeakB || !i-&gt;first_.first_ || !i-&gt;first_.second_)\n                continue;\n        }\n\n        // Then send the ongoing collision event\n        SendEvent(E_PHYSICSCOLLISION, physicsCollisionData_);\n        if (!nodeWeakA || !nodeWeakB || !i-&gt;first_.first_ || !i-&gt;first_.second_)\n            continue;\n\n        nodeCollisionData_[NodeCollision::P_BODY] = bodyA;\n        nodeCollisionData_[NodeCollision::P_OTHERNODE] = nodeB;\n        nodeCollisionData_[NodeCollision::P_OTHERBODY] = bodyB;\n        nodeCollisionData_[NodeCollision::P_TRIGGER] = trigger;\n        nodeCollisionData_[NodeCollision::P_CONTACTS] = contacts_.GetBuffer();\n\n        if (newCollision)\n        {\n            nodeA-&gt;SendEvent(E_NODECOLLISIONSTART, nodeCollisionData_);\n            if (!nodeWeakA || !nodeWeakB || !i-&gt;first_.first_ || !i-&gt;first_.second_)\n                continue;\n        }\n\n        nodeA-&gt;SendEvent(E_NODECOLLISION, nodeCollisionData_);\n        if (!nodeWeakA || !nodeWeakB || !i-&gt;first_.first_ || !i-&gt;first_.second_)\n            continue;\n\n        contacts_.Clear();\n        for (int j = 0; j &lt; contactManifold-&gt;getNumContacts(); ++j)\n        {\n            btManifoldPoint&amp; point = contactManifold-&gt;getContactPoint(j);\n            contacts_.WriteVector3(ToVector3(point.m_positionWorldOnB));\n            contacts_.WriteVector3(-ToVector3(point.m_normalWorldOnB));\n            contacts_.WriteFloat(point.m_distance1);\n            contacts_.WriteFloat(point.m_appliedImpulse);\n        }\n\n        nodeCollisionData_[NodeCollision::P_BODY] = bodyB;\n        nodeCollisionData_[NodeCollision::P_OTHERNODE] = nodeA;\n        nodeCollisionData_[NodeCollision::P_OTHERBODY] = bodyA;\n        nodeCollisionData_[NodeCollision::P_CONTACTS] = contacts_.GetBuffer();\n\n        if (newCollision)\n        {\n            nodeB-&gt;SendEvent(E_NODECOLLISIONSTART, nodeCollisionData_);\n            if (!nodeWeakA || !nodeWeakB || !i-&gt;first_.first_ || !i-&gt;first_.second_)\n                continue;\n        }\n\n        nodeB-&gt;SendEvent(E_NODECOLLISION, nodeCollisionData_);\n    }\n}\n\n// Send collision end events as applicable\n{\n    physicsCollisionData_[PhysicsCollisionEnd::P_WORLD] = this;\n\n    for (HashMap&lt;Pair&lt;WeakPtr&lt;RigidBody&gt;, WeakPtr&lt;RigidBody&gt; &gt;, btPersistentManifold*&gt;::Iterator\n             i = previousCollisions_.Begin(); i != previousCollisions_.End(); ++i)\n    {\n        if (!currentCollisions_.Contains(i-&gt;first_))\n        {\n            RigidBody* bodyA = i-&gt;first_.first_;\n            RigidBody* bodyB = i-&gt;first_.second_;\n            if (!bodyA || !bodyB)\n                continue;\n\n            bool trigger = bodyA-&gt;IsTrigger() || bodyB-&gt;IsTrigger();\n\n            // Skip collision event signaling if both objects are static, or if collision event mode does not match\n            if (bodyA-&gt;GetMass() == 0.0f &amp;&amp; bodyB-&gt;GetMass() == 0.0f)\n                continue;\n            if (bodyA-&gt;GetCollisionEventMode() == COLLISION_NEVER || bodyB-&gt;GetCollisionEventMode() == COLLISION_NEVER)\n                continue;\n            if (bodyA-&gt;GetCollisionEventMode() == COLLISION_ACTIVE &amp;&amp; bodyB-&gt;GetCollisionEventMode() == COLLISION_ACTIVE &amp;&amp;\n                !bodyA-&gt;IsActive() &amp;&amp; !bodyB-&gt;IsActive())\n                continue;\n\n            Node* nodeA = bodyA-&gt;GetNode();\n            Node* nodeB = bodyB-&gt;GetNode();\n            WeakPtr&lt;Node&gt; nodeWeakA(nodeA);\n            WeakPtr&lt;Node&gt; nodeWeakB(nodeB);\n\n            physicsCollisionData_[PhysicsCollisionEnd::P_BODYA] = bodyA;\n            physicsCollisionData_[PhysicsCollisionEnd::P_BODYB] = bodyB;\n            physicsCollisionData_[PhysicsCollisionEnd::P_NODEA] = nodeA;\n            physicsCollisionData_[PhysicsCollisionEnd::P_NODEB] = nodeB;\n            physicsCollisionData_[PhysicsCollisionEnd::P_TRIGGER] = trigger;\n\n            SendEvent(E_PHYSICSCOLLISIONEND, physicsCollisionData_);\n            // Skip rest of processing if either of the nodes or bodies is removed as a response to the event\n            if (!nodeWeakA || !nodeWeakB || !i-&gt;first_.first_ || !i-&gt;first_.second_)\n                continue;\n\n            nodeCollisionData_[NodeCollisionEnd::P_BODY] = bodyA;\n            nodeCollisionData_[NodeCollisionEnd::P_OTHERNODE] = nodeB;\n            nodeCollisionData_[NodeCollisionEnd::P_OTHERBODY] = bodyB;\n            nodeCollisionData_[NodeCollisionEnd::P_TRIGGER] = trigger;\n\n            nodeA-&gt;SendEvent(E_NODECOLLISIONEND, nodeCollisionData_);\n            if (!nodeWeakA || !nodeWeakB || !i-&gt;first_.first_ || !i-&gt;first_.second_)\n                continue;\n\n            nodeCollisionData_[NodeCollisionEnd::P_BODY] = bodyB;\n            nodeCollisionData_[NodeCollisionEnd::P_OTHERNODE] = nodeA;\n            nodeCollisionData_[NodeCollisionEnd::P_OTHERBODY] = bodyA;\n\n            nodeB-&gt;SendEvent(E_NODECOLLISIONEND, nodeCollisionData_);\n        }\n    }\n}\n\npreviousCollisions_ = currentCollisions_;\n</code></pre>\n<p>}</p>\n<p>void RegisterPhysicsLibrary(Context* context)<br>\n{<br>\nCollisionShape::RegisterObject(context);<br>\nRigidBody::RegisterObject(context);<br>\nConstraint::RegisterObject(context);<br>\nPhysicsWorld::RegisterObject(context);<br>\nSoftBody::RegisterObject(context); // Register softbody ============================<br>\n}</p>\n<p>}<br>\n[/code][/spoiler]</p>", "post_number": 11, "post_type": 1, "updated_at": "2017-01-02T01:06:53.439Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 12, "reads": 81, "readers_count": 80, "score": 76.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Contributor", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": true, "admin": false, "staff": true, "user_id": 9, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7564, "name": "", "username": "codingmonkey", "avatar_template": "/user_avatar/discourse.urho3d.io/codingmonkey/{size}/119_2.png", "created_at": "2015-09-03T15:44:38.000Z", "cooked": "<p>Great work man! Thanks.<br>\nNext step I guess is using vertexes group for pinning and use vertex.color for btSoftBody.m_node stiffness ?<br>\nalso maybe add air vector for interface SoftBody component ?</p>\n<p>did you trying to do stress test with high count of SB component on desktop pc ? how many fps you are got with 1000 SB in scene ?)</p>", "post_number": 12, "post_type": 1, "updated_at": "2017-01-02T01:06:55.036Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 36, "readers_count": 35, "score": 12.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 148, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7565, "name": "", "username": "Mike", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png", "created_at": "2015-09-03T16:08:25.000Z", "cooked": "<p>Thanks, the most important thing that is missing is the ability to sync body and node positions, and for now I\u2019m stuck with this. Any help is welcome.</p>", "post_number": 13, "post_type": 1, "updated_at": "2017-01-02T01:06:55.101Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 2, "reads": 39, "readers_count": 38, "score": 17.8, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Contributor", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": true, "admin": false, "staff": true, "user_id": 9, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7567, "name": "", "username": "codingmonkey", "avatar_template": "/user_avatar/discourse.urho3d.io/codingmonkey/{size}/119_2.png", "created_at": "2015-09-03T16:32:53.000Z", "cooked": "<p>I think that you need change this<br>\nclass URHO3D_API SoftBody : public Component<br>\nto this<br>\nclass URHO3D_API SoftBody : public Component, public btMotionState</p>\n<p>in this case you are got two virtual functions</p>\n<p><code>/// Return initial world transform to Bullet.\n virtual void getWorldTransform(btTransform&amp; worldTrans) const;\n/// Update world transform from Bullet.\n virtual void setWorldTransform(const btTransform&amp; worldTrans);\n</code></p>\n<p>I\u2019m also stuck but with implementing who will be rendered simulated cloth? SB by it\u2019s own or it will be just put processed cloth into other drawable, maybe StaticModel like in yours implementation.</p>\n<p>My current implementation of SB but I do not tested it yet and don\u2019t know works it or no )<br>\nSoftBody.h</p>\n<div class=\"spoiler\">\n<p><a href=\"http://pastebin.com/QEby4QeN\">http://pastebin.com/QEby4QeN</a></p>\n</div>\n<p>SoftBody.cpp</p>\n<div class=\"spoiler\">\n<p><a href=\"http://pastebin.com/jZR4dd8t\">http://pastebin.com/jZR4dd8t</a></p>\n</div>", "post_number": 14, "post_type": 1, "updated_at": "2017-03-17T18:59:30.130Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 3, "reads": 43, "readers_count": 42, "score": 23.6, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 2, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "http://pastebin.com/QEby4QeN", "internal": false, "reflection": false, "title": "[C++] // // Copyright (c) 2008-2015 the Urho3D project. // // Permission is hereby - Pastebin.com", "clicks": 7}, {"url": "http://pastebin.com/jZR4dd8t", "internal": false, "reflection": false, "title": "[C++] // // Copyright (c) 2008-2015 the Urho3D project. // // Permission is hereby - Pastebin.com", "clicks": 3}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 148, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7581, "name": "", "username": "codingmonkey", "avatar_template": "/user_avatar/discourse.urho3d.io/codingmonkey/{size}/119_2.png", "created_at": "2015-09-04T17:46:58.000Z", "cooked": "<p>I rewrite some parts of my implementation of SB and it\u2019s all most like Mike\u2019s SB with staticmodel + softbody.<br>\nIt still have a few weird problems, by I try solve it one by one.<br>\nAnd main problem is:<br>\nI do not understand why my SB falling though floor plane and do not bounced from it.<br>\nI tried various collision flags for SB body in component.<br>\nbody_-&gt;m_cfg.collisions = btSoftBody::fCollision::CL_RS + btSoftBody::fCollision::CL_SS;<br>\nand various CollisionShapes for plane<br>\nbut in still no working properly</p>\n<p>there is my current test code</p>\n<div class=\"spoiler\">\n<p><a href=\"http://pastebin.com/0B0YWfjv\">http://pastebin.com/0B0YWfjv</a></p>\n</div>\n<p>and this is some changes that I made for physics<br>\n<a href=\"https://github.com/MonkeyFirst/Urho3D/tree/sbtest\">github.com/MonkeyFirst/Urho3D/tree/sbtest</a></p>\n<p>now I have worked manual pinnig and sphere.mdl are now hangs on this vertex and do not fall down but still collision with RigidBody not working</p>", "post_number": 15, "post_type": 1, "updated_at": "2017-03-17T19:00:44.417Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 3, "reads": 41, "readers_count": 40, "score": 23.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 2, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "https://github.com/MonkeyFirst/Urho3D/tree/sbtest", "internal": false, "reflection": false, "clicks": 10}, {"url": "http://pastebin.com/0B0YWfjv", "internal": false, "reflection": false, "title": "[C++] #include \"Common.h\" class MyApp : public Application { public: \tSharedPtr< - Pastebin.com", "clicks": 6}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 148, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7605, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-09-06T12:37:32.000Z", "cooked": "<p>I downloaded your branch tag. I\u2019ll try to reproduce this bug today.</p>", "post_number": 16, "post_type": 1, "updated_at": "2017-01-02T01:06:58.066Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 38, "readers_count": 37, "score": 12.6, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7609, "name": "", "username": "codingmonkey", "avatar_template": "/user_avatar/discourse.urho3d.io/codingmonkey/{size}/119_2.png", "created_at": "2015-09-06T14:04:23.000Z", "cooked": "<p>Currently I found issue why sphere falling though floor plane.<br>\nThe problem lays in case of different placement of the physic body_ and his graphic representation - StaticModel.<br>\nIf body_ lay on plane(floor) at some moment but his StaticModel still placed in air, but if we create some other colliders and push they into empty space where placed non-visible physic body_ - StaticModel began move.<br>\nit\u2019s all very complicated.</p>\n<p>I found some useful examples with Ogre\u2019s SofBody<br>\nand get some methods from this topics: <a href=\"http://bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=9&amp;t=3428&amp;sid=6b8eba4bcf2c6152eb7098c9bd045dca\">bulletphysics.org/Bullet/phpBB3/ \u2026 c9bd045dca</a></p>\n<p>I do not understand if I create SB from original mesh (with dupVerts, from as it is)<br>\nbtSoftBodyWorldInfo* softBodyWorldInfo_ = GetPhysicsWorld()-&gt;GetSoftBodyWorld();<br>\nbody_ = btSoftBodyHelpers::CreateFromTriMesh(*softBodyWorldInfo_, vertices[0], &amp;indexes[0], ntriangles);</p>\n<p>Is it still need to do SB-&gt;appendLink() and SB-&gt;appendFace() after creation or no ?</p>\n<p>Also Bullent provides the btTriangleIndexVertexArray, and I don\u2019t know maybe needed use it for create mesh and only then pass it in  btSoftBodyHelpers::CreateFromTriMesh ?</p>", "post_number": 17, "post_type": 1, "updated_at": "2017-01-02T01:06:58.357Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 5, "reads": 42, "readers_count": 41, "score": 33.4, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "http://bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=9&t=3428&sid=6b8eba4bcf2c6152eb7098c9bd045dca", "internal": false, "reflection": false, "title": "Real-Time Physics Simulation Forum \u2022 View topic - btSoftBodyHelpers::CreateFromTriMesh - Ogre version?", "clicks": 3}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 148, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7618, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-09-06T20:33:03.000Z", "cooked": "<p>Good to hear that you worked it out.  I got your code working but the physics behavior is very different than my original - the mushroom caps get flattened whey the model hits the ground for some reason.</p>\n<p>In regards to the renderables and softbody vertex buffer, both need to use the same vertex buffer, otherwise, you\u2019ll see a mismatch.</p>\n<p>Steps to use the vertex buffer would be:</p>\n<ol>\n<li>clone the model. the original model\u2019s verts/index buffer should not be used in case the model is instanced several times in the scene.</li>\n<li>remove duplicate verts/indeces from the cloned model\u2019s verts buffer (this should be moved to the VertexBuffer class eventually) -&gt; new verts and index buffer</li>\n<li>assign the new verts/index buffer to the StaticModelt-&gt;SetModel( cloneModel );</li>\n<li>create softbody from the same verts/index buffer which creates appLinks and Faces</li>\n</ol>\n<p>Awesome job with the PhysicsWorld and SoftBody class updates.</p>\n<p>edit: I had the same exact problem with the softbody not becoming active and had to call 1) SetMass() to place the softbody into the world and then 2) manually call Activate() to activate the body.</p>", "post_number": 18, "post_type": 1, "updated_at": "2017-01-02T01:06:58.948Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 48, "readers_count": 47, "score": 9.6, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7648, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-09-08T03:05:52.000Z", "cooked": "<p>I figured out what was causing the differences in physics behavior from my sample code to what I built from your branch tag. I\u2019ll list them:<br>\na) calling setInterpolationWorldTransform() causes the object to be placed offset from the position specified and sometimes got buried in the ground - I changed this to setTransform() and the object is placed where I specified.<br>\nb) whenever setTotalMass() is called, a call to setPose() must be called as the object\u2019s face mass/inverse mass is dependent on totalMass<br>\nc) higher the mass of the object, harder for colliding objects to penetrate the softbody and the colliding objects bounce off at faster velocity, lesser mass would cause objects to penetrate more easily. - changed it to mass of 50 and colliders didn\u2019t penetrate on the caps.</p>", "post_number": 19, "post_type": 1, "updated_at": "2017-01-02T01:07:01.081Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 14, "reads": 49, "readers_count": 48, "score": 79.8, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7912, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-09-20T21:22:53.000Z", "cooked": "<p>Uploaded a progress video, see the OP.</p>", "post_number": 20, "post_type": 1, "updated_at": "2017-01-02T01:07:19.841Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 4, "reads": 50, "readers_count": 49, "score": 30.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7940, "name": "", "username": "George", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/71e660/{size}.png", "created_at": "2015-09-22T06:55:27.000Z", "cooked": "<p>Hi,<br>\nThis looks good. Works great.</p>\n<p>I found a few issues.<br>\nLoading Jack.mdl will cause an error.<br>\nMushroom disappear at numeric angles.<br>\nLarge performance reduction when loading teapot.</p>\n<p>disjointed vertices edges as vertices deform.<br>\nRegards</p>", "post_number": 21, "post_type": 1, "updated_at": "2017-01-02T01:07:21.791Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 2, "reads": 45, "readers_count": 44, "score": 19.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 281, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 7960, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2015-09-23T17:20:34.000Z", "cooked": "<p>I will have to merge my changes to codemonkey\u2019s branch eventually, but my changes won\u2019t fix:<br>\n-performance issue with high poly count like teapot<br>\n-issues with skinned mesh, which also results in performance hit.</p>\n<p>It can however, load jack.mdl, and fix disjointed verts or duplicate verts.<br>\nFrankly, while softbody dynamics look cool, I\u2019m not sure if it\u2019s even applicable for games due to performance reasons.</p>", "post_number": 22, "post_type": 1, "updated_at": "2017-01-02T01:07:23.225Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 46, "readers_count": 45, "score": 14.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 13091, "name": "", "username": "suncore", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/e9c0ed/{size}.png", "created_at": "2016-08-06T16:18:21.000Z", "cooked": "<p>Hi! I\u2019m trying to get started on softbody physics, but it\u2019s difficult since I\u2019m not really familiar with the codebase (Urho3d).<br>\nSo what happened to this work? Is there a branch on github I can look at?</p>\n<p>\u2013 Henrik</p>", "post_number": 23, "post_type": 1, "updated_at": "2017-01-02T01:13:34.195Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 2, "reads": 42, "readers_count": 41, "score": 18.4, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 523, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 13094, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2016-08-06T16:54:55.000Z", "cooked": "<p>I was using codingmonkey\u2019s repo, <a href=\"https://github.com/MonkeyFirst/Urho3D/tree/sbtest\" data-bbcode=\"true\">https://github.com/MonkeyFirst/Urho3D/tree/sbtest</a></p>", "post_number": 24, "post_type": 1, "updated_at": "2017-01-02T01:13:34.431Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 40, "readers_count": 39, "score": 13.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "https://github.com/MonkeyFirst/Urho3D/tree/sbtest", "internal": false, "reflection": false, "clicks": 20}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 13095, "name": "", "username": "suncore", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/e9c0ed/{size}.png", "created_at": "2016-08-06T17:00:32.000Z", "cooked": "<p>Thanks, but that link does not work any more.</p>", "post_number": 25, "post_type": 1, "updated_at": "2017-01-02T01:13:34.508Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 43, "readers_count": 42, "score": 13.6, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 523, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 13105, "name": "", "username": "codingmonkey", "avatar_template": "/user_avatar/discourse.urho3d.io/codingmonkey/{size}/119_2.png", "created_at": "2016-08-07T07:19:12.000Z", "cooked": "<blockquote>\n<p>I was using codingmonkey\u2019s</p>\n</blockquote>\n<p>)) but i remember when I start to figure out with this SB I\u2019m use your code and mike\u2019s code and ogre\u2019s forum  <img src=\"https://emoji.discourse-cdn.com/twitter/smiley.png?v=5\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\"></p>\n<blockquote>\n<p>Thanks, but that link does not work any more.</p>\n</blockquote>\n<p>Yes, probably i also dont have it even on my hdd (<br>\nbut all code changes (sources) are in this theme - hided by code/spoilers tag.<br>\nI also remember last bug with my SB: i have huge offset between visual SB representation and it physic representation.</p>", "post_number": 26, "post_type": 1, "updated_at": "2017-03-17T19:56:37.707Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 49, "readers_count": 48, "score": 9.8, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 2, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 148, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 13159, "name": "Arnis Lielturks", "username": "Miegamicis", "avatar_template": "/user_avatar/discourse.urho3d.io/miegamicis/{size}/2547_2.png", "created_at": "2016-08-10T12:19:41.000Z", "cooked": "<p>This looks interesting. Will give it a go  <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"></p>", "post_number": 27, "post_type": 1, "updated_at": "2017-01-02T01:13:39.080Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 50, "readers_count": 49, "score": 10.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "Arnis Lielturks", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "Core Developer", "title_is_group": false, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 444, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 14182, "name": "", "username": "sabotage3d", "avatar_template": "/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png", "created_at": "2016-10-21T20:35:24.000Z", "cooked": "<p>Hey guys have anyone tried the tetra based solids?</p>", "post_number": 28, "post_type": 1, "updated_at": "2017-01-02T01:14:54.497Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 54, "readers_count": 53, "score": 10.8, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 151, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 14188, "name": "Sir Nate", "username": "Sir_Nate", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/ba9def/{size}.png", "created_at": "2016-10-22T04:08:19.000Z", "cooked": "<p>Just wondering if the \u201cRemove Doubles\u201d operator in Blender has a flaw that makes it not work for this case (I think it may have been added in a newer version of Blender, so perhaps that is why you wrote the mesh pruning algorithm)? (You just have to select the whole mesh in edit mode, and then Ctrl-V (or Mesh&gt;Vertices) and select Remove Doubles, or just press space and type \u201cRemove Doubles\u201d)</p>", "post_number": 29, "post_type": 1, "updated_at": "2017-01-02T01:14:54.956Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 54, "readers_count": 53, "score": 10.8, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "Sir Nate", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 242, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 14200, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2016-10-23T14:41:16.000Z", "cooked": "<aside class=\"quote no-group\" data-username=\"Sir Nate\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n Sir Nate:</div>\n<blockquote>\n<p>Just wondering if the \u201cRemove Doubles\u201d operator in Blender has a flaw that makes it not work for this case (I think it may have been added in a newer version of Blender, so perhaps that is why you wrote the mesh pruning algorithm)? (You just have to select the whole mesh in edit mode, and then Ctrl-V (or Mesh&gt;Vertices) and select Remove Doubles, or just press space and type \u201cRemove Doubles\u201d)</p>\n</blockquote>\n</aside>\n<p>That\u2019s not the problem. You can have a perfect model w/o any duplicate verts in a 3D modeling tool and you\u2019ll still get this problem.<br>\nThe duplicate verts problem occurs whenever you apply a UV map to a 3D model (but not a 2D model).</p>\n<p>Look at this image:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"http://i.imgur.com/c3NlP7z.jpg\" title=\"\"><img src=\"http://i.imgur.com/c3NlP7z.jpg\" alt=\"\" width=\"666\" height=\"500\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#far-image\"></use></svg><span class=\"filename\"></span><span class=\"informations\">800\u00d7600</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use xlink:href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>The vertex V1 in the pic depicts having a UV pair, and this occurs if a vertex happen to be mapped to a uv point on the edge of the uv map. And when the entire column/row of verts become mapped to uv points on the edge, you\u2019ll get what looks like a tearing problem in softbody.</p>", "post_number": 30, "post_type": 1, "updated_at": "2017-01-02T01:14:55.810Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 1, "incoming_link_count": 0, "reads": 61, "readers_count": 60, "score": 12.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "http://i.imgur.com/c3NlP7z.jpg", "internal": false, "reflection": false, "title": "c3NlP7z.jpg", "clicks": 0}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 14207, "name": "", "username": "sabotage3d", "avatar_template": "/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png", "created_at": "2016-10-23T22:31:34.000Z", "cooked": "<p>Well the idea is to have a cage sim mesh to deform the render mesh, then you won\u2019t have to remove duplicate verts.</p>", "post_number": 31, "post_type": 1, "updated_at": "2017-01-02T01:14:56.309Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 2, "reads": 62, "readers_count": 61, "score": 22.4, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 151, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 24055, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2018-04-04T21:17:17.280Z", "cooked": "<p>latest repo: <a href=\"https://github.com/Lumak/Urho3D-SoftBody\">https://github.com/Lumak/Urho3D-SoftBody</a></p>\n<p>I\u2019ll also add the link to the latest vid if anyone missed it:<br>\n</p><div class=\"lazyYT\" data-youtube-id=\"SvdpjhA-Mq8\" data-youtube-title=\"Urho3D SoftBody\" data-width=\"480\" data-height=\"270\" data-parameters=\"feature=oembed&amp;wmode=opaque\"></div>", "post_number": 32, "post_type": 1, "updated_at": "2018-04-04T21:34:35.083Z", "reply_count": 1, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 57, "readers_count": 56, "score": 156.4, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 2, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "https://github.com/Lumak/Urho3D-SoftBody", "internal": false, "reflection": false, "title": "GitHub - Lumak/Urho3D-SoftBody: Bullet Physics SoftBody implementation.", "clicks": 43}, {"url": "https://www.youtube.com/watch?v=SvdpjhA-Mq8", "internal": false, "reflection": false, "title": "YouTube", "clicks": 0}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "count": 7}], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32213, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2019-08-07T15:15:59.502Z", "cooked": "<p>Repo updated with performance enhancement and initial stick position.</p>", "post_number": 33, "post_type": 1, "updated_at": "2019-08-07T15:15:59.502Z", "reply_count": 1, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 41, "readers_count": 40, "score": 118.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "count": 5}], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32214, "name": "", "username": "elix22", "avatar_template": "/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png", "created_at": "2019-08-07T16:16:55.826Z", "cooked": "<p>Welcome back <img src=\"https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=9\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\"><br>\n\u2026</p>", "post_number": 34, "post_type": 1, "updated_at": "2019-08-07T16:16:55.826Z", "reply_count": 0, "reply_to_post_number": 33, "quote_count": 0, "incoming_link_count": 0, "reads": 40, "readers_count": 39, "score": 8.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "Lumak", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png"}, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 809, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32215, "name": "suppagam", "username": "suppagam", "avatar_template": "/user_avatar/discourse.urho3d.io/suppagam/{size}/2396_2.png", "created_at": "2019-08-07T16:18:28.981Z", "cooked": "<p><a class=\"mention\" href=\"/u/lumak\">@Lumak</a> is the best Urho3D coder around. <img src=\"https://emoji.discourse-cdn.com/twitter/heart_eyes.png?v=9\" title=\":heart_eyes:\" class=\"emoji\" alt=\":heart_eyes:\"></p>", "post_number": 35, "post_type": 1, "updated_at": "2019-08-07T16:18:28.981Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 40, "readers_count": 39, "score": 38.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "suppagam", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "count": 2}], "moderator": false, "admin": false, "staff": false, "user_id": 1204, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32292, "name": "Thomas Trocha", "username": "dertom", "avatar_template": "/user_avatar/discourse.urho3d.io/dertom/{size}/1815_2.png", "created_at": "2019-08-09T14:56:36.350Z", "cooked": "<p>I wonder why this never found its way into the engine!?</p>", "post_number": 36, "post_type": 1, "updated_at": "2019-08-09T14:58:23.715Z", "reply_count": 2, "reply_to_post_number": 32, "quote_count": 0, "incoming_link_count": 0, "reads": 39, "readers_count": 38, "score": 32.8, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "Thomas Trocha", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "Lumak", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png"}, "bookmarked": false, "actions_summary": [{"id": 2, "count": 1}], "moderator": false, "admin": false, "staff": false, "user_id": 1038, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32295, "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "username": "Modanung", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png", "created_at": "2019-08-09T19:55:02.826Z", "cooked": "<p>Because you never added it. <img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=9\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"></p>", "post_number": 37, "post_type": 1, "updated_at": "2019-08-09T19:55:02.826Z", "reply_count": 0, "reply_to_post_number": 36, "quote_count": 0, "incoming_link_count": 0, "reads": 37, "readers_count": 36, "score": 7.4, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "", "reply_to_user": {"username": "dertom", "name": "Thomas Trocha", "avatar_template": "/user_avatar/discourse.urho3d.io/dertom/{size}/1815_2.png"}, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 192, "hidden": false, "trust_level": 0, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "user_suspended": true, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32373, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2019-08-11T14:07:38.883Z", "cooked": "<p>Softbody will not make it into the engine for two reasons:</p>\n<ul>\n<li>does not follow engine\u2019s model-node implementation, i.e. due to performance issues softbody nodes are in world space, Urho3D nodes set at origin, and renderable geometry kept in world space. To conform to the engine\u2019s model-node convention, the renderable geometry need to be converted to local space.</li>\n<li>feature incomplete. You can see the Bullet\u2019s softbody example and see all that\u2019s missing. What\u2019s added in my repo are what\u2019s mentioned/discussed in the thread.</li>\n</ul>", "post_number": 38, "post_type": 1, "updated_at": "2019-08-11T15:09:07.400Z", "reply_count": 0, "reply_to_post_number": 36, "quote_count": 0, "incoming_link_count": 1, "reads": 36, "readers_count": 35, "score": 42.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 3, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "dertom", "name": "Thomas Trocha", "avatar_template": "/user_avatar/discourse.urho3d.io/dertom/{size}/1815_2.png"}, "bookmarked": false, "actions_summary": [{"id": 2, "count": 2}], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32375, "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "username": "Modanung", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png", "created_at": "2019-08-11T14:22:14.786Z", "cooked": "<p>Maybe we should create a branch for this in the main repo?</p>", "post_number": 39, "post_type": 1, "updated_at": "2019-08-11T14:22:14.786Z", "reply_count": 1, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 36, "readers_count": 35, "score": 12.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "", "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 192, "hidden": false, "trust_level": 0, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "user_suspended": true, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32377, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2019-08-11T15:00:50.770Z", "cooked": "<p>I think softbody is a niche feature, something that\u2019s not commonly used in games \u2013 this might be a third reason for not making it into the engine.</p>", "post_number": 40, "post_type": 1, "updated_at": "2019-08-11T15:00:50.770Z", "reply_count": 0, "reply_to_post_number": 39, "quote_count": 0, "incoming_link_count": 0, "reads": 36, "readers_count": 35, "score": 7.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32378, "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "username": "Modanung", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png", "created_at": "2019-08-11T15:09:47.973Z", "cooked": "<p>Indeed it may be entering the grey area of keeping the engine <em>lightweight</em>. But Bullet <em>is</em> delivered in its entirety with Urho and I think its soft body functionality can be considered on par with the <code>RaycastVehicle</code> <span class=\"spoiler\">- which was also not added by <a class=\"mention\" href=\"/u/cadaver\">@Cadaver</a> -</span> when looking at how often they are generally used in games.</p>\n<p>Who <em>doesn\u2019t</em> want a dune buggy adorned with waving worn rags and swaying antennae? <img src=\"https://emoji.discourse-cdn.com/twitter/wink.png?v=9\" title=\":wink:\" class=\"emoji\" alt=\":wink:\"><br>\nI\u2019ll turn that into a nice sample when it can be done using only default Urho components. <img src=\"https://emoji.discourse-cdn.com/twitter/cake.png?v=9\" title=\":cake:\" class=\"emoji\" alt=\":cake:\"></p>\n<details>\n<summary>\nImpression</summary>\n<p><img src=\"https://global.discourse-cdn.com/standard17/uploads/urho3d/original/2X/2/214d1888ff99e872bd7e7afec6a025b766f6897f.png\" alt=\"Impression\" data-base62-sha1=\"4KAVSLijy5kzxkhS8fuqhNssAc7\" width=\"555\" height=\"415\"></p>\n</details>", "post_number": 41, "post_type": 1, "updated_at": "2019-08-11T17:45:16.757Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 4, "reads": 34, "readers_count": 33, "score": 41.8, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 4, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "", "bookmarked": false, "actions_summary": [{"id": 2, "count": 1}], "moderator": false, "admin": false, "staff": false, "user_id": 192, "hidden": false, "trust_level": 0, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "user_suspended": true, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32386, "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "username": "Modanung", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png", "created_at": "2019-08-11T16:02:24.555Z", "cooked": "<p>Let me put it this way:</p>\n<h4>Should Bullet\u2019s soft body physics features be exposed through default engine components?</h4>\n<div class=\"poll\" data-poll-status=\"open\" data-poll-public=\"true\" data-poll-results=\"always\" data-poll-type=\"regular\" data-poll-name=\"poll\">\n<div>\n<div class=\"poll-container\">\n<ul>\n<li data-poll-option-id=\"f193d6eabf4d1fbf3458cdd5d977fe24\">Yes, I would like that</li>\n<li data-poll-option-id=\"e1db3eb42c9b614b7f5267b2b451c886\">No, it is too niche for Urho</li>\n</ul>\n</div>\n<div class=\"poll-info\">\n<p>\n<span class=\"info-number\">0</span>\n<span class=\"info-label\">voters</span>\n</p>\n</div>\n</div>\n</div>\n<p>Welcome to the forums, <a class=\"mention\" href=\"/u/bejer\">@bejer</a>! <img src=\"https://emoji.discourse-cdn.com/twitter/confetti_ball.png?v=9\" title=\":confetti_ball:\" class=\"emoji\" alt=\":confetti_ball:\"> <img src=\"https://emoji.discourse-cdn.com/twitter/slightly_smiling_face.png?v=9\" title=\":slightly_smiling_face:\" class=\"emoji\" alt=\":slightly_smiling_face:\"></p>", "post_number": 42, "post_type": 1, "updated_at": "2019-08-11T17:43:47.862Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 32, "readers_count": 31, "score": 21.4, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 3, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "", "bookmarked": false, "actions_summary": [{"id": 2, "count": 1}], "moderator": false, "admin": false, "staff": false, "user_id": 192, "hidden": false, "trust_level": 0, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "user_suspended": true, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false, "polls": [{"name": "poll", "type": "regular", "status": "open", "public": true, "results": "always", "options": [{"id": "f193d6eabf4d1fbf3458cdd5d977fe24", "html": "Yes, I would like that", "votes": 12}, {"id": "e1db3eb42c9b614b7f5267b2b451c886", "html": "No, it is too niche for Urho", "votes": 0}], "voters": 12, "preloaded_voters": {"f193d6eabf4d1fbf3458cdd5d977fe24": [{"id": 192, "username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png", "title": ""}, {"id": 1209, "username": "bejer", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/b/cc9497/{size}.png", "title": null}, {"id": 628, "username": "SirNate0", "name": "SirNate0", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png", "title": null}, {"id": 1038, "username": "dertom", "name": "Thomas Trocha", "avatar_template": "/user_avatar/discourse.urho3d.io/dertom/{size}/1815_2.png", "title": null}, {"id": 1204, "username": "suppagam", "name": "suppagam", "avatar_template": "/user_avatar/discourse.urho3d.io/suppagam/{size}/2396_2.png", "title": null}, {"id": 627, "username": "George1", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/9e8a1a/{size}.png", "title": null}, {"id": 653, "username": "extobias", "name": "tobias alarcon", "avatar_template": "/user_avatar/discourse.urho3d.io/extobias/{size}/2836_2.png", "title": null}, {"id": 571, "username": "trillian", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/trillian/{size}/2350_2.png", "title": ""}, {"id": 473, "username": "rbnpontes", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/rbnpontes/{size}/1207_2.png", "title": null}, {"id": 935, "username": "Omid", "name": "Omid", "avatar_template": "/user_avatar/discourse.urho3d.io/omid/{size}/1314_2.png", "title": null}, {"id": 660, "username": "johnnycable", "name": "kabu", "avatar_template": "/user_avatar/discourse.urho3d.io/johnnycable/{size}/788_2.png", "title": null}, {"id": 1324, "username": "CatPawns", "name": "Cat Pawns", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/c/71e660/{size}.png", "title": null}]}, "chart_type": "bar", "title": null}]}, {"id": 32391, "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "username": "Modanung", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png", "created_at": "2019-08-11T16:42:06.695Z", "cooked": "<p>Let me remind you: There is also the <em>Urho3D-Components</em> repository for extras.</p>\n<aside class=\"onebox whitelistedgeneric\">\n  <header class=\"source\">\n      <img src=\"https://github.githubassets.com/favicon.ico\" class=\"site-icon\" width=\"32\" height=\"32\">\n      <a href=\"https://github.com/urho3d/Urho3D-Components\" target=\"_blank\" rel=\"nofollow noopener\">GitHub</a>\n  </header>\n  <article class=\"onebox-body\">\n    <img src=\"https://avatars1.githubusercontent.com/u/5592833?s=400&amp;amp;v=4\" class=\"thumbnail onebox-avatar\" width=\"400\" height=\"400\">\n\n<h3><a href=\"https://github.com/urho3d/Urho3D-Components\" target=\"_blank\" rel=\"nofollow noopener\">urho3d/Urho3D-Components</a></h3>\n\n<p>Central repository for various community components and subsystems - urho3d/Urho3D-Components</p>\n\n\n  </article>\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>Maybe it could grow on a branch there and be merged into <em>its</em> master first, and possibly into core later.<br>\nThis route may increase the chance of the <a href=\"https://en.wikipedia.org/wiki/Relay_race\" rel=\"nofollow noopener\">baton being passed</a> until the component is ready for core.</p>", "post_number": 43, "post_type": 1, "updated_at": "2019-08-13T10:16:09.221Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 0, "reads": 35, "readers_count": 34, "score": 37.0, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 4, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "link_counts": [{"url": "https://github.com/urho3d/Urho3D-Components", "internal": false, "reflection": false, "title": "GitHub - urho3d/Urho3D-Components: Central repository for various community components and subsystems", "clicks": 6}, {"url": "https://en.wikipedia.org/wiki/Relay_race", "internal": false, "reflection": false, "title": "Relay race - Wikipedia", "clicks": 1}], "read": true, "user_title": "", "bookmarked": false, "actions_summary": [{"id": 2, "count": 2}], "moderator": false, "admin": false, "staff": false, "user_id": 192, "hidden": false, "trust_level": 0, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "user_suspended": true, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32443, "name": "Jonathan", "username": "Sinoid", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/f19dbf/{size}.png", "created_at": "2019-08-12T20:22:40.895Z", "cooked": "<p>Doesn\u2019t serialize/deserialize (probably crashes by the looks of it), mesh links aren\u2019t setup particularly well - shapes will invert themselves easily since there are no <em>drumhead</em> links, the mesh canonicalization is sketchy, and there are helper methods that belong in a sample and not the class itself.</p>\n<p>The first is a serious reason to not have been brought into master (<strong>everything</strong> serializes and deserializes in some fashion), the 2nd is technical and arguable if it should even try, and the latter two are <em>meh</em>. That\u2019s just a quick skim read of it, there\u2019s probably more - a lot more if counting the quirky unreliability of Bullet to not be crazy or incompetent.</p>", "post_number": 44, "post_type": 1, "updated_at": "2019-08-12T20:22:40.895Z", "reply_count": 1, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 33, "readers_count": 32, "score": 16.6, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "Jonathan", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 669, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32563, "name": "", "username": "Lumak", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "created_at": "2019-08-14T12:25:41.563Z", "cooked": "<p>I never know if you\u2019re drunk and/or high when you post anything on the forum, but let me tell you that I\u2019m not into listening to your canonical BS on any topic.</p>\n<p>When I found Urho3D, I reviewed your lightmapper repo thinking I could learn something since you spoke of yourself as if you were a graphics guru. And I have to admit it looked great on the surface, BUT I soon realized you over complicate and over engineer your work which result in poor performance and poor results. I suspect you wouldn\u2019t know what an elegant solution is if it hit you in the face.</p>", "post_number": 45, "post_type": 1, "updated_at": "2019-08-14T12:25:41.563Z", "reply_count": 1, "reply_to_post_number": 44, "quote_count": 0, "incoming_link_count": 3, "reads": 31, "readers_count": 30, "score": 26.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": null, "reply_to_user": {"username": "Sinoid", "name": "Jonathan", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/f19dbf/{size}.png"}, "bookmarked": false, "actions_summary": [], "moderator": false, "admin": false, "staff": false, "user_id": 256, "hidden": false, "trust_level": 2, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}, {"id": 32564, "name": "Leith Ketchell", "username": "Leith", "avatar_template": "/user_avatar/discourse.urho3d.io/leith/{size}/2384_2.png", "created_at": "2019-08-14T12:37:44.450Z", "cooked": "<p>Be calm friend, there is nothing about the topic (softbody) that can be done optimally (simply yes, optimally never). Let\u2019s not get off topic. It\u2019s a bad habit we apparently share.<br>\nI have some ideas for optimizing softbodies, if you care to hear about it.</p>", "post_number": 46, "post_type": 1, "updated_at": "2019-08-14T12:46:15.208Z", "reply_count": 0, "reply_to_post_number": 45, "quote_count": 0, "incoming_link_count": 2, "reads": 31, "readers_count": 30, "score": 31.2, "yours": false, "topic_id": 1319, "topic_slug": "bullets-softbody-physics-example", "display_username": "Leith Ketchell", "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_bg_color": null, "flair_color": null, "version": 2, "can_edit": false, "can_delete": false, "can_recover": false, "can_wiki": false, "read": true, "user_title": "suspended user", "title_is_group": false, "reply_to_user": {"username": "Lumak", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png"}, "bookmarked": false, "actions_summary": [{"id": 2, "count": 1}], "moderator": false, "admin": false, "staff": false, "user_id": 1098, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "user_suspended": true, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false}], "stream": [7469, 7471, 7473, 7474, 7479, 7484, 7486, 7527, 7531, 7543, 7544, 7564, 7565, 7567, 7581, 7605, 7609, 7618, 7648, 7912, 7940, 7960, 13091, 13094, 13095, 13105, 13159, 14182, 14188, 14200, 14207, 24055, 32213, 32214, 32215, 32292, 32295, 32373, 32375, 32377, 32378, 32386, 32391, 32443, 32563, 32564]}, "timeline_lookup": [[1, 2641], [4, 2640], [8, 2639], [10, 2638], [15, 2636], [16, 2635], [18, 2634], [19, 2633], [20, 2620], [21, 2619], [22, 2617], [23, 2300], [24, 2299], [27, 2296], [28, 2223], [30, 2222], [31, 2221], [32, 1693], [33, 1204], [36, 1202], [37, 1201], [38, 1200], [44, 1198], [45, 1197]], "tags_descriptions": {}, "id": 1319, "title": "Bullet's SoftBody physics example", "fancy_title": "Bullet&rsquo;s SoftBody physics example", "posts_count": 46, "created_at": "2015-08-31T14:42:06.000Z", "views": 6470, "reply_count": 7, "like_count": 28, "last_posted_at": "2019-08-14T12:37:44.450Z", "visible": true, "closed": false, "archived": false, "has_summary": false, "archetype": "regular", "slug": "bullets-softbody-physics-example", "category_id": 13, "word_count": 8318, "deleted_at": null, "user_id": 256, "featured_link": null, "pinned_globally": false, "pinned_at": null, "pinned_until": null, "image_url": null, "slow_mode_seconds": 0, "draft": null, "draft_key": "topic_1319", "draft_sequence": null, "unpinned": null, "pinned": false, "current_post_number": 1, "highest_post_number": 46, "deleted_by": null, "actions_summary": [{"id": 4, "count": 0, "hidden": false, "can_act": false}, {"id": 8, "count": 0, "hidden": false, "can_act": false}, {"id": 7, "count": 0, "hidden": false, "can_act": false}], "chunk_size": 20, "bookmarked": false, "bookmarks": [], "topic_timer": null, "message_bus_last_id": 0, "participant_count": 17, "show_read_indicator": false, "thumbnails": null, "slow_mode_enabled_until": null, "tags_disable_ads": false, "details": {"can_edit": false, "notification_level": 1, "participants": [{"id": 256, "username": "Lumak", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png", "post_count": 15, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 148, "username": "codingmonkey", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/codingmonkey/{size}/119_2.png", "post_count": 6, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 192, "username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png", "post_count": 5, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 0}, {"id": 9, "username": "Mike", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/m/58f4c7/{size}.png", "post_count": 5, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "moderator": true, "trust_level": 2}, {"id": 523, "username": "suncore", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/e9c0ed/{size}.png", "post_count": 2, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 1}, {"id": 151, "username": "sabotage3d", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/sabotage3d/{size}/87_2.png", "post_count": 2, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 444, "username": "Miegamicis", "name": "Arnis Lielturks", "avatar_template": "/user_avatar/discourse.urho3d.io/miegamicis/{size}/2547_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 669, "username": "Sinoid", "name": "Jonathan", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/f19dbf/{size}.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 809, "username": "elix22", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 1038, "username": "dertom", "name": "Thomas Trocha", "avatar_template": "/user_avatar/discourse.urho3d.io/dertom/{size}/1815_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 1098, "username": "Leith", "name": "Leith Ketchell", "avatar_template": "/user_avatar/discourse.urho3d.io/leith/{size}/2384_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 1}, {"id": 1204, "username": "suppagam", "name": "suppagam", "avatar_template": "/user_avatar/discourse.urho3d.io/suppagam/{size}/2396_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 54, "username": "rasteron", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/rasteron/{size}/55_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 2}, {"id": 140, "username": "practicing01", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/p/b5e925/{size}.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 1}, {"id": 242, "username": "Sir_Nate", "name": "Sir Nate", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/ba9def/{size}.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 1}, {"id": 281, "username": "George", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/71e660/{size}.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 1}, {"id": 284, "username": "dragonCASTjosh", "name": "", "avatar_template": "/user_avatar/discourse.urho3d.io/dragoncastjosh/{size}/774_2.png", "post_count": 1, "primary_group_name": null, "flair_name": null, "flair_url": null, "flair_color": null, "flair_bg_color": null, "trust_level": 3}], "created_by": {"id": 256, "username": "Lumak", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png"}, "last_poster": {"id": 1098, "username": "Leith", "name": "Leith Ketchell", "avatar_template": "/user_avatar/discourse.urho3d.io/leith/{size}/2384_2.png"}, "links": [{"url": "https://github.com/Lumak/Urho3D-SoftBody", "title": "GitHub - Lumak/Urho3D-SoftBody: Bullet Physics SoftBody implementation.", "internal": false, "attachment": false, "reflection": false, "clicks": 201, "user_id": 256, "domain": "github.com", "root_domain": "github.com"}, {"url": "https://github.com/MonkeyFirst/Urho3D/tree/sbtest", "title": null, "internal": false, "attachment": false, "reflection": false, "clicks": 30, "user_id": 148, "domain": "github.com", "root_domain": "github.com"}, {"url": "http://pastebin.com/QEby4QeN", "title": "[C++] // // Copyright (c) 2008-2015 the Urho3D project. // // Permission is hereby - Pastebin.com", "internal": false, "attachment": false, "reflection": false, "clicks": 7, "user_id": 148, "domain": "pastebin.com", "root_domain": "pastebin.com"}, {"url": "http://www.nvidia.com/object/nvtristrip_library.html", "title": "NvTriStrip Library | NVIDIA", "internal": false, "attachment": false, "reflection": false, "clicks": 6, "user_id": 256, "domain": "www.nvidia.com", "root_domain": "nvidia.com"}, {"url": "http://pastebin.com/0B0YWfjv", "title": "[C++] #include \"Common.h\" class MyApp : public Application { public: \tSharedPtr< - Pastebin.com", "internal": false, "attachment": false, "reflection": false, "clicks": 6, "user_id": 148, "domain": "pastebin.com", "root_domain": "pastebin.com"}, {"url": "https://discourse.urho3d.io/t/wind-and-clothes/4083/4", "title": "Wind and clothes", "internal": true, "attachment": false, "reflection": true, "clicks": 6, "user_id": 484, "domain": "discourse.urho3d.io", "root_domain": "urho3d.io"}, {"url": "https://github.com/urho3d/Urho3D-Components", "title": "GitHub - urho3d/Urho3D-Components: Central repository for various community components and subsystems", "internal": false, "attachment": false, "reflection": false, "clicks": 6, "user_id": 192, "domain": "github.com", "root_domain": "github.com"}, {"url": "http://discourse.urho3d.io/t/soft-body-physics/1313/9", "title": "Soft Body Physics", "internal": true, "attachment": false, "reflection": true, "clicks": 4, "user_id": 256, "domain": "discourse.urho3d.io", "root_domain": "urho3d.io"}, {"url": "http://bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=9&t=3428&sid=6b8eba4bcf2c6152eb7098c9bd045dca", "title": "Real-Time Physics Simulation Forum \u2022 View topic - btSoftBodyHelpers::CreateFromTriMesh - Ogre version?", "internal": false, "attachment": false, "reflection": false, "clicks": 3, "user_id": 148, "domain": "bulletphysics.org", "root_domain": "bulletphysics.org"}, {"url": "http://pastebin.com/jZR4dd8t", "title": "[C++] // // Copyright (c) 2008-2015 the Urho3D project. // // Permission is hereby - Pastebin.com", "internal": false, "attachment": false, "reflection": false, "clicks": 3, "user_id": 148, "domain": "pastebin.com", "root_domain": "pastebin.com"}, {"url": "https://en.wikipedia.org/wiki/Relay_race", "title": "Relay race - Wikipedia", "internal": false, "attachment": false, "reflection": false, "clicks": 1, "user_id": 192, "domain": "en.wikipedia.org", "root_domain": "wikipedia.org"}, {"url": "http://discourse.urho3d.io/t/adding-vertex-weights-to-the-model-file/3432", "title": "Adding vertex weights to the model file", "internal": true, "attachment": false, "reflection": true, "clicks": 1, "user_id": 793, "domain": "discourse.urho3d.io", "root_domain": "urho3d.io"}, {"url": "https://www.youtube.com/watch?v=XkLMAZWaVB8", "title": "Urho3D SoftBody Demo", "internal": false, "attachment": false, "reflection": false, "clicks": 1, "user_id": 256, "domain": "www.youtube.com", "root_domain": "youtube.com"}]}, "suggested_topics": [{"id": 7099, "title": ":fallen_leaf: Polynomials & Harmonics", "fancy_title": ":fallen_leaf: Polynomials &amp; Harmonics", "slug": "polynomials-harmonics", "posts_count": 6, "reply_count": 0, "highest_post_number": 7, "image_url": null, "created_at": "2021-12-13T05:06:04.641Z", "last_posted_at": "2021-12-27T23:27:39.489Z", "bumped": true, "bumped_at": "2021-12-27T23:27:39.489Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "unicode_title": "\ud83c\udf42 Polynomials & Harmonics", "tags_descriptions": {}, "like_count": 6, "views": 392, "category_id": 13, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": "latest single", "description": "Original Poster, Most Recent Poster", "user": {"id": 192, "username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]}, {"id": 7103, "title": ":test_tube: DebugRenderer as GUI", "fancy_title": ":test_tube: DebugRenderer as GUI", "slug": "debugrenderer-as-gui", "posts_count": 4, "reply_count": 1, "highest_post_number": 4, "image_url": null, "created_at": "2021-12-17T02:25:06.606Z", "last_posted_at": "2021-12-18T01:09:27.738Z", "bumped": true, "bumped_at": "2021-12-18T01:09:27.738Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "unicode_title": "\ud83e\uddea DebugRenderer as GUI", "tags_descriptions": {}, "like_count": 4, "views": 267, "category_id": 13, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": "latest", "description": "Original Poster, Most Recent Poster", "user": {"id": 192, "username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}, {"extras": null, "description": "Frequent Poster", "user": {"id": 861, "username": "GodMan", "name": "", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]}, {"id": 7110, "title": "Resource fetch define", "fancy_title": "Resource fetch define", "slug": "resource-fetch-define", "posts_count": 2, "reply_count": 0, "highest_post_number": 2, "image_url": null, "created_at": "2021-12-27T12:28:55.126Z", "last_posted_at": "2021-12-27T17:00:37.699Z", "bumped": true, "bumped_at": "2021-12-27T17:00:37.699Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "tags_descriptions": {}, "like_count": 7, "views": 184, "category_id": 13, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": null, "description": "Original Poster", "user": {"id": 192, "username": "Modanung", "name": "\u9b54\u5927\u519c \ud835\udf8d\ud835\udf8e\ud835\udf73 \u73fe\u62db\u870d", "avatar_template": "/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}, {"extras": "latest", "description": "Most Recent Poster", "user": {"id": 1304, "username": "lebrewer", "name": "lebrewer", "avatar_template": "/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]}, {"id": 7120, "title": "Log Error Once Macro", "fancy_title": "Log Error Once Macro", "slug": "log-error-once-macro", "posts_count": 1, "reply_count": 0, "highest_post_number": 1, "image_url": null, "created_at": "2022-01-04T02:24:37.857Z", "last_posted_at": "2022-01-04T02:24:37.925Z", "bumped": true, "bumped_at": "2022-01-04T02:24:37.925Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "tags_descriptions": {}, "like_count": 3, "views": 143, "category_id": 13, "featured_link": null, "has_accepted_answer": false, "posters": [{"extras": "latest single", "description": "Original Poster, Most Recent Poster", "user": {"id": 628, "username": "SirNate0", "name": "SirNate0", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]}, {"id": 7181, "title": "StaticModelGroup - Are ShaderParameters Shared?", "fancy_title": "StaticModelGroup - Are ShaderParameters Shared?", "slug": "staticmodelgroup-are-shaderparameters-shared", "posts_count": 3, "reply_count": 1, "highest_post_number": 3, "image_url": null, "created_at": "2022-02-02T09:31:19.658Z", "last_posted_at": "2022-02-02T17:06:24.059Z", "bumped": true, "bumped_at": "2022-02-02T17:06:24.059Z", "archetype": "regular", "unseen": false, "pinned": false, "unpinned": null, "visible": true, "closed": false, "archived": false, "bookmarked": null, "liked": null, "tags_descriptions": {}, "like_count": 2, "views": 120, "category_id": 10, "featured_link": null, "has_accepted_answer": true, "posters": [{"extras": "latest", "description": "Original Poster, Most Recent Poster", "user": {"id": 1334, "username": "najak3d", "name": "Brian Knox", "avatar_template": "https://avatars.discourse-cdn.com/v4/letter/n/6a8cbe/{size}.png"}}, {"extras": null, "description": "Frequent Poster, Accepted Answer", "user": {"id": 631, "username": "JTippetts1", "name": "J Tippetts", "avatar_template": "/user_avatar/discourse.urho3d.io/jtippetts1/{size}/96_2.png"}}]}]}