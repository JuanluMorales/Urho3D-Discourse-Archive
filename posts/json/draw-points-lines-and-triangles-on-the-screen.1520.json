{"post_stream":{"posts":[{"id":8686,"name":"","username":"freegodsoul","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/f/71c47a/{size}.png","created_at":"2015-11-22T12:13:38.000Z","cooked":"\u003cp\u003eHello! I have two questions:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWhat is the best way to draw debug data, such as points, lines and triangles in screen (or UI) space?\u003c/li\u003e\n\u003cli\u003eHow to draw custom geometry as a part of UI?\u003c/li\u003e\n\u003c/ol\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T01:08:14.914Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":128,"reads":22,"readers_count":21,"score":644.4,"yours":false,"topic_id":1520,"topic_slug":"draw-points-lines-and-triangles-on-the-screen","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":339,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":8687,"name":"","username":"Sasha7b9o","avatar_template":"/user_avatar/discourse.urho3d.io/sasha7b9o/{size}/169_2.png","created_at":"2015-11-22T12:51:14.000Z","cooked":"\u003cp\u003eI wrote such bicycle:\u003c/p\u003e\n\u003cp\u003e[code]\u003cspan class=\"hashtag\"\u003e#pragma\u003c/span\u003e once\u003c/p\u003e\n\u003cp\u003eclass lImage : public Image\u003cbr\u003e\n{\u003cbr\u003e\nURHO3D_OBJECT(lImage, Image);\u003cbr\u003e\npublic:\u003cbr\u003e\nlImage(Context *context = gContext);\u003cbr\u003e\n~lImage();\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estatic void RegisterObject(Context *context = gContext);\n\nvoid SetSize(int width, int height);\nvoid SetPoint(int x, int y, const Color\u0026amp; color);\nvoid DrawLine(int x0, int y0, int x1, int y1, const Color \u0026amp;color);\nvoid DrawRectangle(int x, int y, int width, int height, const Color \u0026amp;color);\nvoid FillRectangle(int x, int y, int width, int height, const Color \u0026amp;color);\nvoid FillRegion(int x, int y, const Color \u0026amp;color);\nvoid FillRegion(int x, int y, const Color \u0026amp;color, const Color \u0026amp;colorBound);\nvoid CopyImage(int x, int y, lImage \u0026amp;image);      // Those points which have transparency more than 0.5 are copied\nvoid DrawPolyline(const Color \u0026amp;color, int numPoints, int *xy);\nvoid DrawCircle(float x, float y, float radius, const Color \u0026amp;color, float step = 1.0f);\nIntVector2 GetHotSpot() const;\nvoid SetHotSpot(int x, int y);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eprivate:\u003cbr\u003e\nlImage\u0026amp; operator=(const lImage\u0026amp;)\u003cbr\u003e\n{};\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evoid Replace4Points(int x, int y, const Color \u0026amp;color);\nvoid Replace4PointsBound(int x, int y, const Color \u0026amp;color);\n\nColor replacedColor;\nColor boundingColor;\nIntVector2 hotSpot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;stdafx.h\u0026gt;\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e “Image.h”\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e “Core/Math.h”\u003c/p\u003e\n\u003cp\u003elImage::lImage(Context *context) :\u003cbr\u003e\nImage(context)\u003cbr\u003e\n{\u003c/p\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003elImage::~lImage()\u003cbr\u003e\n{\u003c/p\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::SetSize(int width, int height)\u003cbr\u003e\n{\u003cbr\u003e\nImage::SetSize(width, height, 4);\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::RegisterObject(Context* context)\u003cbr\u003e\n{\u003cbr\u003e\ncontext-\u0026gt;RegisterFactory();\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::SetPoint(int x, int y, const Color\u0026amp; color)\u003cbr\u003e\n{\u003cbr\u003e\nif(x \u0026lt; GetWidth() \u0026amp;\u0026amp; y \u0026lt; GetHeight())\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel((int)x, (int)y, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::DrawLine(int x0, int y0, int x1, int y1, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nif((x1 - x0) == 0 \u0026amp;\u0026amp; (y1 - y0) == 0)\u003cbr\u003e\n{\u003cbr\u003e\nx0++;\u003cbr\u003e\n}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint x = x0;\nint y = y0;\nint dx = (int)fabs((float)(x1 - x0));\nint dy = (int)fabs((float)(y1 - y0));\nint s1 = Math::Sign(x1 - x0);\nint s2 = Math::Sign(y1 - y0);\nint temp;\nbool exchange;\nif(dy \u0026gt; dx)\n{\n    temp = dx;\n    dx = dy;\n    dy = temp;\n    exchange = true;\n}\nelse\n{\n    exchange = false;\n}\nint e = 2 * dy - dx;\nfor(int i = 0; i \u0026lt;= dx; i++)\n{\n    SetPoint(x, y, color);\n    while(e \u0026gt;= 0)\n    {\n        if(exchange)\n        {\n            x += s1;\n        }\n        else\n        {\n            y += s2;\n        }\n        e -= 2 * dx;\n    }\n    if(exchange)\n    {\n        y += s2;\n    }\n    else\n    {\n        x += s1;\n    }\n    e += 2 * dy;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::DrawRectangle(int x, int y, int width, int height, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nDrawLine(x, y, x + width, y, color);\u003cbr\u003e\nDrawLine(x + width, y, x + width, y + height, color);\u003cbr\u003e\nDrawLine(x, y + height, x + width, y + height, color);\u003cbr\u003e\nDrawLine(x, y, x, y + height, color);\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::FillRectangle(int x0, int y0, int width, int height, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nfor(int x = x0; x \u0026lt; x0 + width; x++)\u003cbr\u003e\n{\u003cbr\u003e\nDrawLine(x, y0, x, y0 + height, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::FillRegion(int x, int y, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nreplacedColor = GetPixel(x, y);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSetPixel(x, y, color);\n\nReplace4Points(x, y, color);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::Replace4Points(int x, int y, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nif(y \u0026gt; 0)                       // upper pixel\u003cbr\u003e\n{\u003cbr\u003e\nif(GetPixel(x, y - 1) == replacedColor)\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel(x, y - 1, color);\u003cbr\u003e\nReplace4Points(x, y - 1, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\nif(x \u0026lt; GetWidth() - 1)   // rught pixel\u003cbr\u003e\n{\u003cbr\u003e\nif(GetPixel(x + 1, y) == replacedColor)\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel(x + 1, y, color);\u003cbr\u003e\nReplace4Points(x + 1, y, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\nif(y \u0026lt; GetHeight() - 1)\u003cbr\u003e\n{\u003cbr\u003e\nif(GetPixel(x, y + 1) == replacedColor)\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel(x, y + 1, color);\u003cbr\u003e\nReplace4Points(x, y + 1, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\nif(x \u0026gt; 0)\u003cbr\u003e\n{\u003cbr\u003e\nif(GetPixel(x - 1, y) == replacedColor)\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel(x - 1, y, color);\u003cbr\u003e\nReplace4Points(x - 1, y, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::FillRegion(int x, int y, const Color \u0026amp;color, const Color \u0026amp;colorBound)\u003cbr\u003e\n{\u003cbr\u003e\nboundingColor = colorBound;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif(GetPixel(x, y) != colorBound)\n{\n    SetPixel(x, y, color);\n    Replace4PointsBound(x, y, color);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::CopyImage(int x0, int y0, lImage \u0026amp;inImage)\u003cbr\u003e\n{\u003cbr\u003e\nint xMin = x0;\u003cbr\u003e\nint xMax = xMin + inImage.GetWidth();\u003cbr\u003e\nif (xMax \u0026gt;= GetWidth())\u003cbr\u003e\n{\u003cbr\u003e\nxMax = GetWidth() - 1;\u003cbr\u003e\n}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint yMin = y0;\nint yMax = yMin + inImage.GetHeight();\nif (yMax \u0026gt;= GetHeight())\n{\n    yMax = GetHeight() - 1;\n}\n\nfor (int x = x0; x \u0026lt; xMax; x++)\n{\n    for (int y = y0; y \u0026lt; yMax; y++)\n    {\n        int curX = x - x0;\n        int curY = y - y0;\n        Color color = inImage.GetPixel(curX, curY);\n\n        if (color.a_ \u0026gt; 0.5f)\n        {\n            SetPoint(x, y, color);\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#define\u003c/span\u003e FILL(a, b)                              \u003cbr\u003e\nColor col = GetPixel(a, b);                 \u003cbr\u003e\nif(col != boundingColor \u0026amp;\u0026amp; col != color)    \u003cbr\u003e\n{                                           \u003cbr\u003e\nSetPixel(a, b, color);                  \u003cbr\u003e\nReplace4PointsBound(a, b, color);       \u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::Replace4PointsBound(int x, int y, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nif(y \u0026gt; 0)\u003cbr\u003e\n{\u003cbr\u003e\nFILL(x, y - 1);\u003cbr\u003e\n}\u003cbr\u003e\nif(x \u0026lt; GetWidth() - 1)\u003cbr\u003e\n{\u003cbr\u003e\nFILL(x + 1, y);\u003cbr\u003e\n}\u003cbr\u003e\nif(y \u0026lt; GetHeight() - 1)\u003cbr\u003e\n{\u003cbr\u003e\nFILL(x, y + 1);\u003cbr\u003e\n}\u003cbr\u003e\nif(x \u0026gt; 0)\u003cbr\u003e\n{\u003cbr\u003e\nFILL(x - 1, y);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::DrawPolyline(const Color \u0026amp;color, int numPoints, int *xy)\u003cbr\u003e\n{\u003cbr\u003e\nint numLines = numPoints - 1;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor(int i = 0; i \u0026lt; numLines; i++)\n{\n    DrawLine(xy[i * 2], xy[i * 2 + 1], xy[i * 2 + 2], xy[i * 2 + 3], color);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::DrawCircle(float x, float y, float radius, const Color \u0026amp;color, float step)\u003cbr\u003e\n{\u003cbr\u003e\nfor (float angle = 0.0f; angle \u0026lt; 360.0f; angle += step)\u003cbr\u003e\n{\u003cbr\u003e\nSetPoint((int)(x + Cos(angle) * radius + 0.5f), (int)(y + Sin(angle) * radius + 0.5f), color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003eIntVector2 lImage::GetHotSpot() const\u003cbr\u003e\n{\u003cbr\u003e\nreturn hotSpot;\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::SetHotSpot(int x, int y)\u003cbr\u003e\n{\u003cbr\u003e\nhotSpot.x_ = x;\u003cbr\u003e\nhotSpot.y_ = y;\u003cbr\u003e\n}[/code]\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-01-02T01:08:14.965Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":5,"reads":22,"readers_count":21,"score":44.4,"yours":false,"topic_id":1520,"topic_slug":"draw-points-lines-and-triangles-on-the-screen","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":311,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":8688,"name":"","username":"freegodsoul","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/f/71c47a/{size}.png","created_at":"2015-11-22T13:17:37.000Z","cooked":"\u003cp\u003e[quote=“Sasha7b9o”]I wrote such bicycle:\u003c/p\u003e\n\u003cp\u003e[code]\u003cspan class=\"hashtag\"\u003e#pragma\u003c/span\u003e once\u003c/p\u003e\n\u003cp\u003eclass lImage : public Image\u003cbr\u003e\n{\u003cbr\u003e\nURHO3D_OBJECT(lImage, Image);\u003cbr\u003e\npublic:\u003cbr\u003e\nlImage(Context *context = gContext);\u003cbr\u003e\n~lImage();\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estatic void RegisterObject(Context *context = gContext);\n\nvoid SetSize(int width, int height);\nvoid SetPoint(int x, int y, const Color\u0026amp; color);\nvoid DrawLine(int x0, int y0, int x1, int y1, const Color \u0026amp;color);\nvoid DrawRectangle(int x, int y, int width, int height, const Color \u0026amp;color);\nvoid FillRectangle(int x, int y, int width, int height, const Color \u0026amp;color);\nvoid FillRegion(int x, int y, const Color \u0026amp;color);\nvoid FillRegion(int x, int y, const Color \u0026amp;color, const Color \u0026amp;colorBound);\nvoid CopyImage(int x, int y, lImage \u0026amp;image);      // Those points which have transparency more than 0.5 are copied\nvoid DrawPolyline(const Color \u0026amp;color, int numPoints, int *xy);\nvoid DrawCircle(float x, float y, float radius, const Color \u0026amp;color, float step = 1.0f);\nIntVector2 GetHotSpot() const;\nvoid SetHotSpot(int x, int y);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eprivate:\u003cbr\u003e\nlImage\u0026amp; operator=(const lImage\u0026amp;)\u003cbr\u003e\n{};\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evoid Replace4Points(int x, int y, const Color \u0026amp;color);\nvoid Replace4PointsBound(int x, int y, const Color \u0026amp;color);\n\nColor replacedColor;\nColor boundingColor;\nIntVector2 hotSpot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;stdafx.h\u0026gt;\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e “Image.h”\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e “Core/Math.h”\u003c/p\u003e\n\u003cp\u003elImage::lImage(Context *context) :\u003cbr\u003e\nImage(context)\u003cbr\u003e\n{\u003c/p\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003elImage::~lImage()\u003cbr\u003e\n{\u003c/p\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::SetSize(int width, int height)\u003cbr\u003e\n{\u003cbr\u003e\nImage::SetSize(width, height, 4);\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::RegisterObject(Context* context)\u003cbr\u003e\n{\u003cbr\u003e\ncontext-\u0026gt;RegisterFactory();\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::SetPoint(int x, int y, const Color\u0026amp; color)\u003cbr\u003e\n{\u003cbr\u003e\nif(x \u0026lt; GetWidth() \u0026amp;\u0026amp; y \u0026lt; GetHeight())\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel((int)x, (int)y, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::DrawLine(int x0, int y0, int x1, int y1, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nif((x1 - x0) == 0 \u0026amp;\u0026amp; (y1 - y0) == 0)\u003cbr\u003e\n{\u003cbr\u003e\nx0++;\u003cbr\u003e\n}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint x = x0;\nint y = y0;\nint dx = (int)fabs((float)(x1 - x0));\nint dy = (int)fabs((float)(y1 - y0));\nint s1 = Math::Sign(x1 - x0);\nint s2 = Math::Sign(y1 - y0);\nint temp;\nbool exchange;\nif(dy \u0026gt; dx)\n{\n    temp = dx;\n    dx = dy;\n    dy = temp;\n    exchange = true;\n}\nelse\n{\n    exchange = false;\n}\nint e = 2 * dy - dx;\nfor(int i = 0; i \u0026lt;= dx; i++)\n{\n    SetPoint(x, y, color);\n    while(e \u0026gt;= 0)\n    {\n        if(exchange)\n        {\n            x += s1;\n        }\n        else\n        {\n            y += s2;\n        }\n        e -= 2 * dx;\n    }\n    if(exchange)\n    {\n        y += s2;\n    }\n    else\n    {\n        x += s1;\n    }\n    e += 2 * dy;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::DrawRectangle(int x, int y, int width, int height, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nDrawLine(x, y, x + width, y, color);\u003cbr\u003e\nDrawLine(x + width, y, x + width, y + height, color);\u003cbr\u003e\nDrawLine(x, y + height, x + width, y + height, color);\u003cbr\u003e\nDrawLine(x, y, x, y + height, color);\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::FillRectangle(int x0, int y0, int width, int height, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nfor(int x = x0; x \u0026lt; x0 + width; x++)\u003cbr\u003e\n{\u003cbr\u003e\nDrawLine(x, y0, x, y0 + height, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::FillRegion(int x, int y, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nreplacedColor = GetPixel(x, y);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSetPixel(x, y, color);\n\nReplace4Points(x, y, color);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::Replace4Points(int x, int y, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nif(y \u0026gt; 0)                       // upper pixel\u003cbr\u003e\n{\u003cbr\u003e\nif(GetPixel(x, y - 1) == replacedColor)\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel(x, y - 1, color);\u003cbr\u003e\nReplace4Points(x, y - 1, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\nif(x \u0026lt; GetWidth() - 1)   // rught pixel\u003cbr\u003e\n{\u003cbr\u003e\nif(GetPixel(x + 1, y) == replacedColor)\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel(x + 1, y, color);\u003cbr\u003e\nReplace4Points(x + 1, y, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\nif(y \u0026lt; GetHeight() - 1)\u003cbr\u003e\n{\u003cbr\u003e\nif(GetPixel(x, y + 1) == replacedColor)\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel(x, y + 1, color);\u003cbr\u003e\nReplace4Points(x, y + 1, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\nif(x \u0026gt; 0)\u003cbr\u003e\n{\u003cbr\u003e\nif(GetPixel(x - 1, y) == replacedColor)\u003cbr\u003e\n{\u003cbr\u003e\nSetPixel(x - 1, y, color);\u003cbr\u003e\nReplace4Points(x - 1, y, color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::FillRegion(int x, int y, const Color \u0026amp;color, const Color \u0026amp;colorBound)\u003cbr\u003e\n{\u003cbr\u003e\nboundingColor = colorBound;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif(GetPixel(x, y) != colorBound)\n{\n    SetPixel(x, y, color);\n    Replace4PointsBound(x, y, color);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::CopyImage(int x0, int y0, lImage \u0026amp;inImage)\u003cbr\u003e\n{\u003cbr\u003e\nint xMin = x0;\u003cbr\u003e\nint xMax = xMin + inImage.GetWidth();\u003cbr\u003e\nif (xMax \u0026gt;= GetWidth())\u003cbr\u003e\n{\u003cbr\u003e\nxMax = GetWidth() - 1;\u003cbr\u003e\n}\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint yMin = y0;\nint yMax = yMin + inImage.GetHeight();\nif (yMax \u0026gt;= GetHeight())\n{\n    yMax = GetHeight() - 1;\n}\n\nfor (int x = x0; x \u0026lt; xMax; x++)\n{\n    for (int y = y0; y \u0026lt; yMax; y++)\n    {\n        int curX = x - x0;\n        int curY = y - y0;\n        Color color = inImage.GetPixel(curX, curY);\n\n        if (color.a_ \u0026gt; 0.5f)\n        {\n            SetPoint(x, y, color);\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#define\u003c/span\u003e FILL(a, b)                              \u003cbr\u003e\nColor col = GetPixel(a, b);                 \u003cbr\u003e\nif(col != boundingColor \u0026amp;\u0026amp; col != color)    \u003cbr\u003e\n{                                           \u003cbr\u003e\nSetPixel(a, b, color);                  \u003cbr\u003e\nReplace4PointsBound(a, b, color);       \u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::Replace4PointsBound(int x, int y, const Color \u0026amp;color)\u003cbr\u003e\n{\u003cbr\u003e\nif(y \u0026gt; 0)\u003cbr\u003e\n{\u003cbr\u003e\nFILL(x, y - 1);\u003cbr\u003e\n}\u003cbr\u003e\nif(x \u0026lt; GetWidth() - 1)\u003cbr\u003e\n{\u003cbr\u003e\nFILL(x + 1, y);\u003cbr\u003e\n}\u003cbr\u003e\nif(y \u0026lt; GetHeight() - 1)\u003cbr\u003e\n{\u003cbr\u003e\nFILL(x, y + 1);\u003cbr\u003e\n}\u003cbr\u003e\nif(x \u0026gt; 0)\u003cbr\u003e\n{\u003cbr\u003e\nFILL(x - 1, y);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::DrawPolyline(const Color \u0026amp;color, int numPoints, int *xy)\u003cbr\u003e\n{\u003cbr\u003e\nint numLines = numPoints - 1;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor(int i = 0; i \u0026lt; numLines; i++)\n{\n    DrawLine(xy[i * 2], xy[i * 2 + 1], xy[i * 2 + 2], xy[i * 2 + 3], color);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid lImage::DrawCircle(float x, float y, float radius, const Color \u0026amp;color, float step)\u003cbr\u003e\n{\u003cbr\u003e\nfor (float angle = 0.0f; angle \u0026lt; 360.0f; angle += step)\u003cbr\u003e\n{\u003cbr\u003e\nSetPoint((int)(x + Cos(angle) * radius + 0.5f), (int)(y + Sin(angle) * radius + 0.5f), color);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003eIntVector2 lImage::GetHotSpot() const\u003cbr\u003e\n{\u003cbr\u003e\nreturn hotSpot;\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003evoid lImage::SetHotSpot(int x, int y)\u003cbr\u003e\n{\u003cbr\u003e\nhotSpot.x_ = x;\u003cbr\u003e\nhotSpot.y_ = y;\u003cbr\u003e\n}[/code][/quote]\u003c/p\u003e\n\u003cp\u003eNice software renderer! \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/smiley.png?v=5\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\"\u003e\u003cbr\u003e\nBut I want actually something like \u003cspan class=\"bbcode-b\"\u003eCustomGeometry/DebugRenderer\u003c/span\u003e analog for overlay rendering. Because then I would have full power of Urho’s \u003cspan class=\"bbcode-b\"\u003ematerials \u003c/span\u003eand \u003cspan class=\"bbcode-b\"\u003etechniques\u003c/span\u003e.\u003cbr\u003e\nMore precisely, I want to implement \u003cspan class=\"bbcode-b\"\u003eSelectionBox\u003c/span\u003e like here: \u003ca href=\"http://www.ogre3d.org/tikiwiki/Intermediate+Tutorial+4\" data-bbcode=\"true\" rel=\"nofollow noopener\"\u003ehttp://www.ogre3d.org/tikiwiki/Intermediate+Tutorial+4\u003c/a\u003e\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2017-01-02T01:08:15.040Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":3,"reads":18,"readers_count":17,"score":33.6,"yours":false,"topic_id":1520,"topic_slug":"draw-points-lines-and-triangles-on-the-screen","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://www.ogre3d.org/tikiwiki/Intermediate+Tutorial+4","internal":false,"reflection":false,"title":"Intermediate Tutorial 4","clicks":14}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":339,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[8686,8687,8688]},"timeline_lookup":[[1,2558]],"suggested_topics":[{"id":7087,"title":"Android how to get error message sometimes little change gives me just crash","fancy_title":"Android how to get error message sometimes little change gives me just crash","slug":"android-how-to-get-error-message-sometimes-little-change-gives-me-just-crash","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2021-12-05T16:59:59.376Z","last_posted_at":"2021-12-05T18:17:02.335Z","bumped":true,"bumped_at":"2021-12-05T18:17:02.335Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":153,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1436,"username":"Maco","name":"Maco","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/m/90ced4/{size}.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":1317,"username":"Lys0gen","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/l/57b2e6/{size}.png"}}]},{"id":7080,"title":"Build urho3d source on windows 10 - cmake - \"Error in configuration process, project files may be invalid\"","fancy_title":"Build urho3d source on windows 10 - cmake - \u0026ldquo;Error in configuration process, project files may be invalid\u0026rdquo;","slug":"build-urho3d-source-on-windows-10-cmake-error-in-configuration-process-project-files-may-be-invalid","posts_count":8,"reply_count":4,"highest_post_number":8,"image_url":null,"created_at":"2021-12-03T01:55:53.267Z","last_posted_at":"2021-12-06T22:46:59.584Z","bumped":true,"bumped_at":"2021-12-06T22:46:59.584Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":324,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1488,"username":"ToolmakerSteve","name":"ToolmakerSteve","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/ba9def/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":631,"username":"JTippetts1","name":"J Tippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts1/{size}/96_2.png"}}]},{"id":7125,"title":"Android mobile shows jaggies in the instersection plane-terrain","fancy_title":"Android mobile shows jaggies in the instersection plane-terrain","slug":"android-mobile-shows-jaggies-in-the-instersection-plane-terrain","posts_count":5,"reply_count":3,"highest_post_number":5,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/original/2X/d/d36aedb4e8cf5409efca6c976aae7e4a5c499eb9.png","created_at":"2022-01-11T11:59:18.993Z","last_posted_at":"2022-01-11T21:27:40.692Z","bumped":true,"bumped_at":"2022-01-12T07:36:41.695Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":129,"category_id":10,"featured_link":null,"has_accepted_answer":true,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":856,"username":"feresmu","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/f/f08c70/{size}.png"}},{"extras":null,"description":"Frequent Poster, Accepted Answer","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}}]},{"id":7129,"title":"Best Model Import Pipeline as of Jan 2022?","fancy_title":"Best Model Import Pipeline as of Jan 2022?","slug":"best-model-import-pipeline-as-of-jan-2022","posts_count":7,"reply_count":0,"highest_post_number":7,"image_url":null,"created_at":"2022-01-17T09:27:23.432Z","last_posted_at":"2022-01-17T20:37:59.458Z","bumped":true,"bumped_at":"2022-01-17T20:37:59.458Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":4,"views":170,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1334,"username":"najak3d","name":"Brian Knox","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/n/6a8cbe/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1038,"username":"dertom","name":"Thomas Trocha","avatar_template":"/user_avatar/discourse.urho3d.io/dertom/{size}/1815_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1165,"username":"throwawayerino","name":"Actually Permanent","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/da6949/{size}.png"}}]},{"id":7254,"title":"Android :android:urho3d-lib:generateJsonModelDebug failed task","fancy_title":"Android :android:urho3d-lib:generateJsonModelDebug failed task","slug":"android-urho3d-lib-generatejsonmodeldebug-failed-task","posts_count":14,"reply_count":8,"highest_post_number":14,"image_url":null,"created_at":"2022-05-07T08:16:09.637Z","last_posted_at":"2022-08-31T13:37:02.824Z","bumped":true,"bumped_at":"2022-08-31T13:37:02.824Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"Android :android:urho3d-lib:generateJsonModelDebug failed task","tags_descriptions":{},"like_count":2,"views":344,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":1518,"username":"Joshua-PotatoMan","name":"Joshua","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/j/e9c0ed/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1522,"username":"tungts1101","name":"tungts1101","avatar_template":"/user_avatar/discourse.urho3d.io/tungts1101/{size}/3803_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":809,"username":"elix22","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/elix22/{size}/1437_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]}],"tags_descriptions":{},"id":1520,"title":"Draw points, lines and triangles on the screen","fancy_title":"Draw points, lines and triangles on the screen","posts_count":3,"created_at":"2015-11-22T12:13:38.000Z","views":670,"reply_count":0,"like_count":2,"last_posted_at":"2015-11-22T13:17:37.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"draw-points-lines-and-triangles-on-the-screen","category_id":10,"word_count":1702,"deleted_at":null,"user_id":339,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_1520","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":3,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":2,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":339,"username":"freegodsoul","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/f/71c47a/{size}.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1},{"id":311,"username":"Sasha7b9o","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/sasha7b9o/{size}/169_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1}],"created_by":{"id":339,"username":"freegodsoul","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/f/71c47a/{size}.png"},"last_poster":{"id":339,"username":"freegodsoul","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/f/71c47a/{size}.png"},"links":[{"url":"http://www.ogre3d.org/tikiwiki/Intermediate+Tutorial+4","title":"Intermediate Tutorial 4","internal":false,"attachment":false,"reflection":false,"clicks":14,"user_id":339,"domain":"www.ogre3d.org","root_domain":"ogre3d.org"}]}}