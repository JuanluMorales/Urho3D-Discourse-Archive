{"post_stream":{"posts":[{"id":4810,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-16T22:47:20.000Z","cooked":"\u003cp\u003eHey,\u003c/p\u003e\n\u003cp\u003eI took a crack at converting some JAVA procedural method to c++. I’m getting the following compile error.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/media/home2/vivienne/testingc++/olsen2dwip.cpp||In member function ?int* OlsenNoise2D::olsennoise(int, int, int, int)?:|\n/media/home2/vivienne/testingc++/olsen2dwip.cpp|79|error: no matching function for call to ?OlsenNoise2D::hashrandom(int, int, int\u0026amp;)?|\n/media/home2/vivienne/testingc++/olsen2dwip.cpp|79|note: candidate is:|\n/media/home2/vivienne/testingc++/olsen2dwip.cpp|17|note: int OlsenNoise2D::hashrandom(int*)|\n/media/home2/vivienne/testingc++/olsen2dwip.cpp|17|note:   candidate expects 1 argument, 3 provided|\n/media/home2/vivienne/testingc++/olsen2dwip.cpp||In member function ?int OlsenNoise2D::hashrandom(int*)?:|\n/media/home2/vivienne/testingc++/olsen2dwip.cpp|144|error: request for member ?size? in ?elements?, which is of non-class type ?int*?|\n/media/home2/vivienne/testingc++/olsen2dwip.cpp|147|error: ?hash? cannot be used as a function|\n||=== Build finished: 6 errors, 0 warnings ===|\n\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe code is at PasteBin is \u003ca href=\"http://pastebin.com/gh6P5zf3\" rel=\"nofollow noopener\"\u003epastebin.com/gh6P5zf3\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[code]\u003cbr\u003e\nint * OlsenNoise2D::olsennoise(int x, int y, int width, int height)\u003cbr\u003e\n{\u003cbr\u003e\nint maxiterations = 7;\u003cbr\u003e\nint cx, cy;\u003cbr\u003e\nint cxh, cyh;\u003cbr\u003e\nint cwidth, cheight;\u003cbr\u003e\nint xoff, yoff;\u003cbr\u003e\nint nwidth, nheight;\u003cbr\u003e\nint nx, ny;\u003cbr\u003e\nint nxh, nyh;\u003cbr\u003e\nint m=0;\u003cbr\u003e\nint n=0;\u003cbr\u003e\nint * field = NULL;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (int iteration = 0; iteration \u0026lt; maxiterations; iteration++)\n{\n    nx = x;\n    ny = y;\n\n    nxh = x + width;\n    nyh = y + width;\n\n    n = maxiterations - iteration;\n\n    for (int i = 1; i \u0026lt; n; i++)\n    {\n        nx = (nx / 2) - 1;\n        ny = (ny / 2) - 1;\n        nxh = 1 -(-nxh/2);\n        nyh = 1 -(-nyh/2);\n    }\n\n    xoff = -2*((nx/2)) + nx + 1;\n    yoff = -2*((ny/2)) + ny + 1;\n\n    cx = (nx / 2) - 1;\n    cy = (ny / 2) - 1;\n    cxh = 1 -(-nxh/2);\n    cyh = 1 -(-nyh/2);\n\n    nwidth = nxh - nx;\n    nheight = nyh - ny;\n\n    cwidth = cxh - cx;\n    cheight = cyh - cy;\n\n\n    /// Field\n    m=cwidth;\n    n=cheight;\n\n    if (field == NULL) field = new int[m*(n*m)];\n\n    for (int j = 0; j \u0026lt; m; j++)\n    {\n        for (int k = 0; k \u0026lt; n; k++)\n        {\n            field[j+(k*m)] += (hashrandom(cx + j, cy + k, iteration) \u0026amp; (1 \u0026lt;\u0026lt; (7 - iteration)));\n        }\n    }\n\n    /// Up sampled\n    //m=field.length * 2;\n    //n=field[0].length * 2;\n    m=cwidth*2;\n    n=cheight*2;\n\n\n    int * upsampled = new int[m*(n*m)];\n\n    for (int j = 0; j \u0026lt; m; j++)\n    {\n        for (int k = 0; k \u0026lt; n; k++)\n        {\n            upsampled[j+(k*m)] = field[(j / 2)+((k / 2)*cwidth)];\n        }\n    }\n    field = upsampled;\n\n    /// Blur field\n    //int m=field.length - 2;\n    //int n=field[0].length - 2;\n    m=cwidth-2;\n    n=cheight-2;\n\n    int * blurfield = new int[m*(n*m)];\n\n    for (int j = 0; j \u0026lt; m; j++)\n    {\n        for (int k = 0;  k \u0026lt; n; k++)\n        {\n            for (int h = 0; h \u0026lt; 9; h++)\n            {\n                blurfield[j+(k*m)] += field[(j + (h % 3))+((k + (h / 3))*(cheight*2))];\n            }\n            blurfield[j+(k*m)] /= 9;\n        }\n    }\n    field = blurfield;\n\n    /// Trim field\n    m=nwidth;\n    n=nheight;\n\n    int * trimfield = new int[m*(n*m)];\n\n    for (int j = 0;j \u0026lt; m; j++)\n    {\n        for (int k = 0; k \u0026lt; n; k++)\n        {\n            trimfield[j+(k*m)] = field[(j + xoff)+((k + yoff)*(nheight-2))];\n        }\n    }\n    field = trimfield;\n}\nreturn field;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003eint OlsenNoise2D::hashrandom(int elements[])\u003cbr\u003e\n{\u003cbr\u003e\nlong hash = 0;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (int i = 0; i \u0026lt; elements.size; i++)\n{\n    hash ^= elements[i];\n    hash = hash(hash);\n}\nreturn (int) hash;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003elong OlsenNoise2D::hash(long v)\u003cbr\u003e\n{\u003cbr\u003e\nlong hash = v;\u003cbr\u003e\nlong h = hash;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eswitch ((int) hash \u0026amp; 3)\n{\ncase 3:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 32;\n    hash ^= h \u0026lt;\u0026lt; 36;\n    hash += hash \u0026gt;\u0026gt; 22;\n    break;\ncase 2:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 22;\n    hash += hash \u0026gt;\u0026gt; 34;\n    break;\ncase 1:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 20;\n    hash += hash \u0026gt;\u0026gt; 2;\n}\nhash ^= hash \u0026lt;\u0026lt; 6;\nhash += hash \u0026gt;\u0026gt; 10;\nhash ^= hash \u0026lt;\u0026lt; 8;\nhash += hash \u0026gt;\u0026gt; 34;\nhash ^= hash \u0026lt;\u0026lt; 50;\nhash += hash \u0026gt;\u0026gt; 12;\nreturn hash;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eint main()\u003cbr\u003e\n{\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ereturn 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}[/code]\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T01:03:30.307Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":25,"reads":8,"readers_count":7,"score":126.6,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://pastebin.com/gh6P5zf3","internal":false,"reflection":false,"title":"Olsen Noise Algorithm - Pastebin.com","clicks":1}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4811,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-16T23:00:46.000Z","cooked":"\u003cp\u003eRevised\u003c/p\u003e\n\u003cp\u003e[code]/*\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cspan class=\"mention\"\u003e@author\u003c/span\u003e Tat\u003c/li\u003e\n\u003cli\u003ec++ rewrite vivienne (WIP)\u003cbr\u003e\n*/\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;stdio.h\u0026gt;\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;stdlib.h\u0026gt;\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;png++/png.hpp\u0026gt;\u003c/p\u003e\n\u003cp\u003eusing namespace std;\u003c/p\u003e\n\u003cp\u003evoid SaveTerrFile(const int * image, int size);\u003c/p\u003e\n\u003cp\u003eclass OlsenNoise2D\u003cbr\u003e\n{\u003c/p\u003e\n\u003cp\u003epublic:\u003cbr\u003e\nint * olsennoise(int x, int y, int width, int height);\u003c/p\u003e\n\u003cp\u003eprivate:\u003cbr\u003e\nint hashrandom(std::vector elements);\u003cbr\u003e\nlong hash(long v);\u003c/p\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eint * OlsenNoise2D::olsennoise(int x, int y, int width, int height)\u003cbr\u003e\n{\u003cbr\u003e\nint maxiterations = 7;\u003cbr\u003e\nint cx, cy;\u003cbr\u003e\nint cxh, cyh;\u003cbr\u003e\nint cwidth, cheight;\u003cbr\u003e\nint xoff, yoff;\u003cbr\u003e\nint nwidth, nheight;\u003cbr\u003e\nint nx, ny;\u003cbr\u003e\nint nxh, nyh;\u003cbr\u003e\nint m=0;\u003cbr\u003e\nint n=0;\u003cbr\u003e\nint * field = NULL;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (int iteration = 0; iteration \u0026lt; maxiterations; iteration++)\n{\n    nx = x;\n    ny = y;\n\n    nxh = x + width;\n    nyh = y + width;\n\n    n = maxiterations - iteration;\n\n    for (int i = 1; i \u0026lt; n; i++)\n    {\n        nx = (nx / 2) - 1;\n        ny = (ny / 2) - 1;\n        nxh = 1 -(-nxh/2);\n        nyh = 1 -(-nyh/2);\n    }\n\n    xoff = -2*((nx/2)) + nx + 1;\n    yoff = -2*((ny/2)) + ny + 1;\n\n    cx = (nx / 2) - 1;\n    cy = (ny / 2) - 1;\n    cxh = 1 -(-nxh/2);\n    cyh = 1 -(-nyh/2);\n\n    nwidth = nxh - nx;\n    nheight = nyh - ny;\n\n    cwidth = cxh - cx;\n    cheight = cyh - cy;\n\n\n    /// Field\n    m=cwidth;\n    n=cheight;\n\n    if (field == NULL) field = new int[m*(n*m)];\n\n    for (int j = 0; j \u0026lt; m; j++)\n    {\n        for (int k = 0; k \u0026lt; n; k++)\n        {\n            field[j+(k*m)] += (hashrandom({cx + j, cy + k, iteration}) \u0026amp; (1 \u0026lt;\u0026lt; (7 - iteration)));\n        }\n    }\n\n    /// Up sampled\n    //m=field.length * 2;\n    //n=field[0].length * 2;\n    m=cwidth*2;\n    n=cheight*2;\n\n    int * upsampled = new int[m*(n*m)];\n\n    for (int j = 0; j \u0026lt; m; j++)\n    {\n        for (int k = 0; k \u0026lt; n; k++)\n        {\n            upsampled[j+(k*m)] = field[(j / 2)+((k / 2)*cwidth)];\n        }\n    }\n    field = upsampled;\n\n    /// Blur field\n    //int m=field.length - 2;\n    //int n=field[0].length - 2;\n    m=cwidth-2;\n    n=cheight-2;\n\n    int * blurfield = new int[m*(n*m)];\n\n    for (int j = 0; j \u0026lt; m; j++)\n    {\n        for (int k = 0;  k \u0026lt; n; k++)\n        {\n            for (int h = 0; h \u0026lt; 9; h++)\n            {\n                blurfield[j+(k*m)] += field[(j + (h % 3))+((k + (h / 3))*(cheight*2))];\n            }\n            blurfield[j+(k*m)] /= 9;\n        }\n    }\n    field = blurfield;\n\n    /// Trim field\n    m=nwidth;\n    n=nheight;\n\n    int * trimfield = new int[m*(n*m)];\n\n    for (int j = 0;j \u0026lt; m; j++)\n    {\n        for (int k = 0; k \u0026lt; n; k++)\n        {\n            trimfield[j+(k*m)] = field[(j + xoff)+((k + yoff)*(nheight-2))];\n        }\n    }\n    field = trimfield;\n}\nreturn field;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003eint OlsenNoise2D::hashrandom(std::vector elements)\u003cbr\u003e\n{\u003cbr\u003e\nlong hashcalc = 0;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (int i = 0; i \u0026lt; elements.size(); i++)\n{\n    hashcalc ^= elements[i];\n    hashcalc = hash(hashcalc);\n}\nreturn (int) hashcalc;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003elong OlsenNoise2D::hash(long v)\u003cbr\u003e\n{\u003cbr\u003e\nlong hash = v;\u003cbr\u003e\nlong h = hash;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eswitch ((int) hash \u0026amp; 3)\n{\ncase 3:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 32;\n    hash ^= h \u0026lt;\u0026lt; 36;\n    hash += hash \u0026gt;\u0026gt; 22;\n    break;\ncase 2:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 22;\n    hash += hash \u0026gt;\u0026gt; 34;\n    break;\ncase 1:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 20;\n    hash += hash \u0026gt;\u0026gt; 2;\n}\nhash ^= hash \u0026lt;\u0026lt; 6;\nhash += hash \u0026gt;\u0026gt; 10;\nhash ^= hash \u0026lt;\u0026lt; 8;\nhash += hash \u0026gt;\u0026gt; 34;\nhash ^= hash \u0026lt;\u0026lt; 50;\nhash += hash \u0026gt;\u0026gt; 12;\nreturn hash;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eint main()\u003cbr\u003e\n{\u003cbr\u003e\n/// Test\u003cbr\u003e\nint ImageSize=2049;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint * imageInput = new int[ImageSize*ImageSize];\n\n/// Image\nOlsenNoise2D testingolsen;\nimageInput=testingolsen.olsennoise(0,0,ImageSize,ImageSize);\n\n\nSaveTerrFile(imageInput, ImageSize);\n\nreturn 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid SaveTerrFile(const int * image, int size)\u003cbr\u003e\n{\u003cbr\u003e\npng::image\u0026lt; png::rgb_pixel \u0026gt; newimage(size, size);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (unsigned int y = 0; y \u0026lt; newimage.get_width(); ++y)\n{\n    for (unsigned int x = 0; x \u0026lt; newimage.get_height(); ++x)\n    {\n        int col = int(image[x+(y*newimage.get_width())]*255);\n        newimage[y][x] = png::rgb_pixel(col,col,col);\n        // non-checking equivalent of image.set_pixel(x, y, ...);\n    }\n}\n\nnewimage.write(\"rgbOlsen.png\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003e[/code]\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-01-02T01:03:30.376Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":7,"readers_count":6,"score":6.4,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4814,"name":"","username":"JTippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts/{size}/357_2.png","created_at":"2015-02-17T03:07:32.000Z","cooked":"\u003cp\u003eThe revision compiles, I take it? (It does for me, at least.)\u003c/p\u003e\n\u003cp\u003eIn the original, the clue lies in the error message itself.\u003cbr\u003e\n\"error: no matching function for call to ?OlsenNoise2D::hashrandom(int, int, int\u0026amp;)\"\u003cbr\u003e\nThis means that you are trying to call a function called hashrandom that takes two ints and a reference to a third int, but the only candidate function it can find that’s called hashrandom expects an array of ints instead. Also, in C++, an array of ints is just a “dumb” sequential array of values, and not a “smart” array that includes a size() method. The solution (as you discovered) is to use a vector.\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2017-01-02T01:03:30.643Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":8,"readers_count":7,"score":1.6,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":30,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4815,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-17T03:38:00.000Z","cooked":"\u003cp\u003e[quote=“JTippetts”]The revision compiles, I take it? (It does for me, at least.)\u003c/p\u003e\n\u003cp\u003eIn the original, the clue lies in the error message itself.\u003cbr\u003e\n\"error: no matching function for call to ?OlsenNoise2D::hashrandom(int, int, int\u0026amp;)\"\u003cbr\u003e\nThis means that you are trying to call a function called hashrandom that takes two ints and a reference to a third int, but the only candidate function it can find that’s called hashrandom expects an array of ints instead. Also, in C++, an array of ints is just a “dumb” sequential array of values, and not a “smart” array that includes a size() method. The solution (as you discovered) is to use a vector.[/quote]\u003c/p\u003e\n\u003cp\u003eThe whole thing is weird I think. Usually I translate  array[x][y] to a sequential difference of  array[x+(y+width)] like you said a sequence. The first for loop does fit thtat after looking at it.\u003c/p\u003e\n\u003cp\u003eIts like\u003cbr\u003e\nfield 0\u003cbr\u003e\nfield 01\u003cbr\u003e\nfield 012 (set limit based on the previous level)\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2017-01-02T01:03:30.709Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":8,"readers_count":7,"score":1.6,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4829,"name":"","username":"JTippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts/{size}/357_2.png","created_at":"2015-02-17T15:22:09.000Z","cooked":"\u003cp\u003eOne potential source of problems that I see by looking at the compile warnings is that in the hash() function you are using \u003cspan class=\"bbcode-b\"\u003elong int\u003c/span\u003e, but you are attempting to bitshift by large amounts such as 36 or 50. long is only guaranteed by the standard to be at least a 32-bit type, so on platforms where it is implemented as 32 bits (including Windows) all of your bits are going to be shifted out completely when you shift by more than 32. Likely what you want to use instead is a \u003cspan class=\"bbcode-b\"\u003elong long int\u003c/span\u003e which is guaranteed to be at least 64 bits.\u003c/p\u003e\n\u003cp\u003eAlso, you’re going to leak memory like crazy. In your main, you allocate imageInput as an array sized 2049x2049, but then you immediately overwrite it with the return result of the olsennoise() function, leaving the chunk you had allocated hanging out there in limbo rather than being properly freed. In addition, inside olsennoise you allocate an array of ints using new, assign the allocated block to the field variable, later allocate another array and assign it to upsample, then assign that to field, leaving the previously allocated block hanging out in the wind. Then you allocate \u003cspan class=\"bbcode-i\"\u003eanother\u003c/span\u003e array, assign it to blurfield, then assign that to field: again, overwriting the previous address and leaving another allocated block in limbo. Then you do the same with a variable called trimfield. That’s a whole lot of memory you’re leaving allocated and twisting in the wind each time you call olsennoise(). You then return field, but nowhere in main is this returned array ever deleted.\u003c/p\u003e\n\u003cp\u003eYou have to remember that C++ \u003cspan class=\"bbcode-b\"\u003enew\u003c/span\u003e doesn’t work like Java \u003cspan class=\"bbcode-b\"\u003enew\u003c/span\u003e, in that you have to explicitly call \u003cspan class=\"bbcode-b\"\u003edelete\u003c/span\u003e on anything you \u003cspan class=\"bbcode-b\"\u003enew\u003c/span\u003e or it will leak.\u003c/p\u003e\n\u003cp\u003eAnother problem is that in olsennoise you allocate memory for field, then in the following loop you modify the values of field using the += operator (adding values to what was already there) without ever initializing the values you allocated to 0. That’s undefined behavior right there. It’s possible that the allocated chunk is 0 already, but not certain, and you could in fact be adding values to garbage. C++ new doesn’t automatically initialize non-class objects to 0.\u003c/p\u003e","post_number":5,"post_type":1,"updated_at":"2017-01-02T01:03:31.666Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":9,"readers_count":8,"score":1.8,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":30,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4830,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-17T16:18:00.000Z","cooked":"\u003cp\u003e[quote=“JTippetts”]One potential source of problems that I see by looking at the compile warnings is that in the hash() function you are using \u003cspan class=\"bbcode-b\"\u003elong int\u003c/span\u003e, but you are attempting to bitshift by large amounts such as 36 or 50. long is only guaranteed by the standard to be at least a 32-bit type, so on platforms where it is implemented as 32 bits (including Windows) all of your bits are going to be shifted out completely when you shift by more than 32. Likely what you want to use instead is a \u003cspan class=\"bbcode-b\"\u003elong long int\u003c/span\u003e which is guaranteed to be at least 64 bits.\u003c/p\u003e\n\u003cp\u003eAlso, you’re going to leak memory like crazy. In your main, you allocate imageInput as an array sized 2049x2049, but then you immediately overwrite it with the return result of the olsennoise() function, leaving the chunk you had allocated hanging out there in limbo rather than being properly freed. In addition, inside olsennoise you allocate an array of ints using new, assign the allocated block to the field variable, later allocate another array and assign it to upsample, then assign that to field, leaving the previously allocated block hanging out in the wind. Then you allocate \u003cspan class=\"bbcode-i\"\u003eanother\u003c/span\u003e array, assign it to blurfield, then assign that to field: again, overwriting the previous address and leaving another allocated block in limbo. Then you do the same with a variable called trimfield. That’s a whole lot of memory you’re leaving allocated and twisting in the wind each time you call olsennoise(). You then return field, but nowhere in main is this returned array ever deleted.\u003c/p\u003e\n\u003cp\u003eYou have to remember that C++ \u003cspan class=\"bbcode-b\"\u003enew\u003c/span\u003e doesn’t work like Java \u003cspan class=\"bbcode-b\"\u003enew\u003c/span\u003e, in that you have to explicitly call \u003cspan class=\"bbcode-b\"\u003edelete\u003c/span\u003e on anything you \u003cspan class=\"bbcode-b\"\u003enew\u003c/span\u003e or it will leak.\u003c/p\u003e\n\u003cp\u003eAnother problem is that in olsennoise you allocate memory for field, then in the following loop you modify the values of field using the += operator (adding values to what was already there) without ever initializing the values you allocated to 0. That’s undefined behavior right there. It’s possible that the allocated chunk is 0 already, but not certain, and you could in fact be adding values to garbage. C++ new doesn’t automatically initialize non-class objects to 0.[/quote]\u003c/p\u003e\n\u003cp\u003eI’ll look at the code today. It was a rough rough conversion. I’m going make the change. I have to figure out how it fully functions tho but the way the person has it shifting the memory is not typically a way I would do it.\u003c/p\u003e","post_number":6,"post_type":1,"updated_at":"2017-01-02T01:03:31.731Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":7,"readers_count":6,"score":1.4,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4831,"name":"","username":"JTippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts/{size}/357_2.png","created_at":"2015-02-17T17:32:18.000Z","cooked":"\u003cp\u003eWell, bit-shifting is a common component of hashing in noise implementations like this. The idea of hashing is to take values in a sequence (such as the coordinate pairs iterating a grid) and convert them to something random-seeming yet deterministic: ie, the output looks random, but calling hash on a given coordinate always results in the same output each call.\u003c/p\u003e\n\u003cp\u003eI’m not sure I really understand the need for this algorithm. For generating a terrain, it seems needlessly convoluted, and allocates a whole lot of large memory chunks. (In your code, I see allocations of the form m\u003cem\u003em\u003c/em\u003en which, if m and n are equal to 2049, comes out to a whopping 32GB for a 32-bit int array.)  I understand from skimming the guy’s original blog post that it’s supposed to filter better than Perlin noise, but if you’re generating a terrain you’re not filtering it anyway. Perlin noise can be evaluated in-place without the need for allocating huge workspace buffers, and can produce roughly comparable and eminently acceptable results.\u003c/p\u003e","post_number":7,"post_type":1,"updated_at":"2017-01-02T01:03:31.797Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":6,"readers_count":5,"score":1.2,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":30,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4834,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-17T19:08:30.000Z","cooked":"\u003cp\u003e[quote=“JTippetts”]Well, bit-shifting is a common component of hashing in noise implementations like this. The idea of hashing is to take values in a sequence (such as the coordinate pairs iterating a grid) and convert them to something random-seeming yet deterministic: ie, the output looks random, but calling hash on a given coordinate always results in the same output each call.\u003c/p\u003e\n\u003cp\u003eI’m not sure I really understand the need for this algorithm. For generating a terrain, it seems needlessly convoluted, and allocates a whole lot of large memory chunks. (In your code, I see allocations of the form m\u003cem\u003em\u003c/em\u003en which, if m and n are equal to 2049, comes out to a whopping 32GB for a 32-bit int array.)  I understand from skimming the guy’s original blog post that it’s supposed to filter better than Perlin noise, but if you’re generating a terrain you’re not filtering it anyway. Perlin noise can be evaluated in-place without the need for allocating huge workspace buffers, and can produce roughly comparable and eminently acceptable results.[/quote]\u003c/p\u003e\n\u003cp\u003eThat was a error on my part trying to figure out whats going on. The results to me isn’t very acceptable. I’m picky.\u003c/p\u003e\n\u003cp\u003eAlso diamond square method is another method but I haven’t  find any good resource to allow offsetting. With STB I can choose a offset. This guys code I can choose a offset also.\u003c/p\u003e\n\u003cp\u003eI changed the code to this \u003ca href=\"http://pastebin.com/bkeSiXgb\" rel=\"nofollow noopener\"\u003epastebin.com/bkeSiXgb\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIf I set the interation to 1.  The equivalent of this in a image. \u003ca href=\"http://imgur.com/BzDWARK\" rel=\"nofollow noopener\"\u003eimgur.com/BzDWARK\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNow if I set it higher to 1, I get a segmentation fault which I think lays in this code and the length of elements vector\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\u003c/code\u003e\u003c/pre\u003e","post_number":8,"post_type":1,"updated_at":"2017-01-02T01:03:32.038Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":5,"readers_count":4,"score":1.0,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://pastebin.com/bkeSiXgb","internal":false,"reflection":false,"title":"[C++] Rewrite - Pastebin.com","clicks":0},{"url":"http://imgur.com/BzDWARK","internal":false,"reflection":false,"title":"Imgur: The most awesome images on the Internet","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4841,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-17T23:30:32.000Z","cooked":"\u003cp\u003eHi JTippett\u003c/p\u003e\n\u003cp\u003eThis is the code I modified \u003ca href=\"http://pastebin.com/PBCzcH3Q\" rel=\"nofollow noopener\"\u003epastebin.com/PBCzcH3Q\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIf I set the interations to 2. It creates \u003ca href=\"http://imgur.com/u4o8732\" rel=\"nofollow noopener\"\u003eimgur.com/u4o8732\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSo, I made the pointers and removed the allocated memory when need be.   The original code is \u003ca href=\"http://godsnotwheregodsnot.blogspot.com/2014/09/olsen-noise-source-code-in-java.html\" rel=\"nofollow noopener\"\u003egodsnotwheregodsnot.blogspot.com … -java.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI don’t think I should be using memcpy that way I am. Usually I just reference a pointer or whatever.\u003c/p\u003e\n\u003cp\u003eMaybe you’ll notice something. The speed of it is about 2 seconds when ran.  If done right, infinite terrain like \u003ca href=\"http://imgur.com/f2aanDf\" rel=\"nofollow noopener\"\u003eimgur.com/f2aanDf\u003c/a\u003e can be done.\u003c/p\u003e\n\u003cp\u003eVivienne\u003c/p\u003e","post_number":9,"post_type":1,"updated_at":"2017-01-02T01:03:32.557Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":1,"reads":7,"readers_count":6,"score":6.4,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://imgur.com/u4o8732","internal":false,"reflection":false,"title":"Imgur: The most awesome images on the Internet","clicks":2},{"url":"http://godsnotwheregodsnot.blogspot.com/2014/09/olsen-noise-source-code-in-java.html","internal":false,"reflection":false,"title":"Ssnot!: Olsen Noise Source Code in Java.","clicks":0},{"url":"http://pastebin.com/PBCzcH3Q","internal":false,"reflection":false,"title":"[C++] Olsen Noise Algorithm C++ WIP - Pastebin.com","clicks":0},{"url":"http://imgur.com/f2aanDf","internal":false,"reflection":false,"title":"Imgur: The most awesome images on the Internet","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4845,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-18T00:27:42.000Z","cooked":"\u003cp\u003eCurrent not working fully code\u003c/p\u003e\n\u003cp\u003eThis is the code so far I converted to C++ (Olsen 2D)\u003cbr\u003e\n\u003ca href=\"http://pastebin.com/qbgBL0Hq\" rel=\"nofollow noopener\"\u003epastebin.com/qbgBL0Hq\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis is the image produce\u003cbr\u003e\n\u003ca href=\"http://imgur.com/nb2pMjP\" rel=\"nofollow noopener\"\u003eimgur.com/nb2pMjP\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eOriginal source code\u003cbr\u003e\n\u003ca href=\"http://pastebin.com/gh6P5zf3\" rel=\"nofollow noopener\"\u003epastebin.com/gh6P5zf3\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDemo Online(You should see what it should produce at 5 interations)\u003cbr\u003e\n\u003ca href=\"http://tatarize.nfshost.com/OlsenNoise.htm\" rel=\"nofollow noopener\"\u003etatarize.nfshost.com/OlsenNoise.htm\u003c/a\u003e\u003c/p\u003e","post_number":10,"post_type":1,"updated_at":"2017-01-02T01:03:32.874Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":9,"readers_count":8,"score":1.8,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://imgur.com/nb2pMjP","internal":false,"reflection":false,"title":"Imgur: The most awesome images on the Internet","clicks":1},{"url":"http://pastebin.com/gh6P5zf3","internal":false,"reflection":false,"title":"Olsen Noise Algorithm - Pastebin.com","clicks":0},{"url":"http://tatarize.nfshost.com/OlsenNoise.htm","internal":false,"reflection":false,"title":"Olsen Noise Demo","clicks":0},{"url":"http://pastebin.com/qbgBL0Hq","internal":false,"reflection":false,"title":"[C++] Olsen Noise Algorithm C++ WIP .001 - Pastebin.com","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4866,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-19T00:00:04.000Z","cooked":"\u003cp\u003eHello,\u003c/p\u003e\n\u003cp\u003eCould someone take a look at this. I’m not sure what’s wrong or a simple solution. The discussion between the original developer is here.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://godsnotwheregodsnot.blogspot.com/2014/08/3d-olsen-noise.html\" rel=\"nofollow noopener\"\u003egodsnotwheregodsnot.blogspot.com … noise.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe code is below. It works 90%. My goal is 100% plus throw in another 15%.\u003c/p\u003e\n\u003cp\u003eA image produced is \u003ca href=\"http://imgur.com/P8EYbPn\" rel=\"nofollow noopener\"\u003eimgur.com/P8EYbPn\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[code]/*\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cspan class=\"mention\"\u003e@author\u003c/span\u003e Tat\u003c/li\u003e\n\u003cli\u003ec++ rewrite vivienne (WIP)\u003c/li\u003e\n\u003cli\u003everion .01\u003cbr\u003e\n*/\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;stdio.h\u0026gt;\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;stdlib.h\u0026gt;\u003cbr\u003e\n\u003cspan class=\"hashtag\"\u003e#include\u003c/span\u003e \u0026lt;png++/png.hpp\u0026gt;\u003c/p\u003e\n\u003cp\u003eusing namespace std;\u003c/p\u003e\n\u003cp\u003evoid SaveTerrFile(const int * image, int size, char * filename);\u003c/p\u003e\n\u003cp\u003eclass OlsenNoise2D\u003cbr\u003e\n{\u003c/p\u003e\n\u003cp\u003epublic:\u003cbr\u003e\nint * olsennoise(int x, int y, int width, int height);\u003c/p\u003e\n\u003cp\u003eprivate:\u003cbr\u003e\nint hashrandom(std::vector elements);\u003cbr\u003e\nlong long hash(long long v);\u003c/p\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eint * OlsenNoise2D::olsennoise(int x, int y, int width, int height)\u003cbr\u003e\n{\u003cbr\u003e\nint maxiterations = 4;\u003cbr\u003e\nint cx, cy;\u003cbr\u003e\nint cxh, cyh;\u003cbr\u003e\nint cwidth, cheight;\u003cbr\u003e\nint xoff, yoff;\u003cbr\u003e\nint nwidth, nheight;\u003cbr\u003e\nint nx, ny;\u003cbr\u003e\nint nxh, nyh;\u003cbr\u003e\nint m=0;\u003cbr\u003e\nint n=0;\u003cbr\u003e\nint fieldwidth=0;\u003cbr\u003e\nint fieldheight=0;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint * field = NULL;\n\nfor (int iteration = 0; iteration \u0026lt; maxiterations; iteration++)\n{\n    nx = x;\n    ny = y;\n\n    nxh = x + width;\n    nyh = y + height;\n\n    for (int i = 1,n = maxiterations - iteration; i \u0026lt; n; i++)\n    {\n        nx = (nx / 2) - 1;\n        ny = (ny / 2) - 1;\n        nxh = 1 -(-nxh/2);\n        nyh = 1 -(-nyh/2);\n    }\n\n    xoff = -2*((nx/2)) + nx + 1;\n    yoff = -2*((ny/2)) + ny + 1;\n\n    cx = (nx / 2) - 1;\n    cy = (ny / 2) - 1;\n    cxh = 1 -(-nxh/2);\n    cyh = 1 -(-nyh/2);\n\n    nwidth = nxh - nx;\n    nheight = nyh - ny;\n\n    cwidth = cxh - cx;\n    cheight = cyh - cy;\n\n    /// rest\n    fieldwidth=cwidth;\n    fieldheight=cheight;\n\n    /// Only happens once\n    if (field==NULL)\n    {\n        /// allocate memory\n        field = new int[height * width];\n\n        /// blank value\n        for (int x = 0; x \u0026lt; width; x++)\n        {\n            for (int y = 0; y \u0026lt; height; y++)\n            {\n                field[x+(y*width)]=0;\n            }\n        }\n    }\n\n    /// First loop\n    for (int j = 0, m=cwidth; j \u0026lt; m; j++)\n    {\n        for (int k = 0, n=cheight; k \u0026lt; n; k++)\n        {\n            field[j+(k*m)] += (hashrandom( {cx + j, cy + k, iteration}) \u0026amp; (1 \u0026lt;\u0026lt; (7 - iteration)));\n        }\n    }\n\n    /// Up sampled\n    int * upsampled = new int[(fieldwidth*2)*(fieldheight*2)];\n    long int upsampledsize=(fieldwidth*2)*(fieldheight*2);\n\n    for (int j = 0, m=fieldwidth*2; j \u0026lt; m; j++)\n    {\n        for (int k = 0,n=fieldheight*2; k \u0026lt; n; k++)\n        {\n            upsampled[j+(k*m)] = field[(j / 2)+((k / 2)*fieldwidth)];\n        }\n    }\n\n    memmove((void *)field,(void *) upsampled,upsampledsize*sizeof(int));\n    delete upsampled;\n\n    /// rest\n    fieldwidth=fieldwidth*2;\n    fieldheight=fieldheight*2;\n\n    /// Blur field\n    int * blurfield =new int[(fieldwidth-2)*(fieldheight-2)];\n    long int blurfieldsize = (fieldwidth-2)*(fieldheight-2);\n\n    for (int j = 0,m=fieldwidth-2; j \u0026lt; m; j++)\n    {\n        for (int k = 0, n=fieldheight-2;  k \u0026lt; n; k++)\n        {\n            for (int h = 0; h \u0026lt; 9; h++)\n            {\n                blurfield[j+(k*m)] += field[(j + (h % 3))+((k+(h/ 3))*fieldwidth)];\n            }\n            blurfield[j+(k*m)] /= 9;\n        }\n    }\n\n    memmove((void *)field,(void *)blurfield,blurfieldsize*sizeof(int));\n    delete blurfield;\n\n    /// rest\n    fieldwidth=fieldwidth-2;\n    fieldheight=fieldheight-2;\n\n    /// Trim field\n    int * trimfield = new int[nwidth*nheight];\n    long int trimfieldsize = nwidth*nheight;\n\n    for (int j = 0, m=nwidth; j \u0026lt; m; j++)\n    {\n        for (int k = 0, n=nheight; k \u0026lt; n; k++)\n        {\n            trimfield[j+(k*m)] = field[(j + xoff)+((k + yoff)*fieldwidth)];\n        }\n    }\n\n    /// create new\n    memmove((void *)field,(void *)trimfield,trimfieldsize*sizeof(int));\n\n    delete trimfield;\n}\n\nSaveTerrFile(field, width, \"output.png\");\n\nreturn field;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003eint OlsenNoise2D::hashrandom(std::vector elements)\u003cbr\u003e\n{\u003cbr\u003e\nlong long hashcalc = 0;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (int i = 0; i \u0026lt; elements.size(); i++)\n{\n    hashcalc ^= elements[i];\n    hashcalc = hash(hashcalc);\n}\nreturn (int) hashcalc;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003elong long OlsenNoise2D::hash(long long v)\u003cbr\u003e\n{\u003cbr\u003e\nlong long hash = v;\u003cbr\u003e\nlong long h = hash;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eswitch ((int) hash \u0026amp; 3)\n{\ncase 3:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 32;\n    hash ^= h \u0026lt;\u0026lt; 36;\n    hash += hash \u0026gt;\u0026gt; 22;\n    break;\ncase 2:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 22;\n    hash += hash \u0026gt;\u0026gt; 34;\n    break;\ncase 1:\n    hash += h;\n    hash ^= hash \u0026lt;\u0026lt; 20;\n    hash += hash \u0026gt;\u0026gt; 2;\n}\nhash ^= hash \u0026lt;\u0026lt; 6;\nhash += hash \u0026gt;\u0026gt; 10;\nhash ^= hash \u0026lt;\u0026lt; 8;\nhash += hash \u0026gt;\u0026gt; 34;\nhash ^= hash \u0026lt;\u0026lt; 50;\nhash += hash \u0026gt;\u0026gt; 12;\nreturn hash;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e};\u003c/p\u003e\n\u003cp\u003eint main()\u003cbr\u003e\n{\u003cbr\u003e\n/// Test\u003cbr\u003e\nint ImageSize=2048;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint * imageInput = new int[ImageSize*ImageSize];\n\n/// Image\nOlsenNoise2D testingolsen;\nimageInput=testingolsen.olsennoise(1,1,ImageSize,ImageSize);\n\n// SaveTerrFile(imageInput, ImageSize, \"rgbOlsen.png\");\n\ndelete imageInput;\n\nreturn 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003evoid SaveTerrFile(const int * image, int size, char * filename)\u003cbr\u003e\n{\u003cbr\u003e\npng::image\u0026lt; png::rgb_pixel \u0026gt; newimage(size, size);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (unsigned int y = 0; y \u0026lt; newimage.get_width(); ++y)\n{\n    for (unsigned int x = 0; x \u0026lt; newimage.get_height(); ++x)\n    {\n        int col = int(image[x+(y*newimage.get_width())]);\n        newimage[y][x] = png::rgb_pixel(col,col,col);\n        // non-checking equivalent of image.set_pixel(x, y, ...);\n    }\n}\n\nnewimage.write(filename);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003e[/code]\u003c/p\u003e","post_number":11,"post_type":1,"updated_at":"2017-01-02T01:03:34.344Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":8,"readers_count":7,"score":1.6,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://imgur.com/P8EYbPn","internal":false,"reflection":false,"title":"Imgur: The most awesome images on the Internet","clicks":0},{"url":"http://godsnotwheregodsnot.blogspot.com/2014/08/3d-olsen-noise.html","internal":false,"reflection":false,"title":"Ssnot!: 3D Olsen Noise","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4883,"name":"","username":"JTippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts/{size}/357_2.png","created_at":"2015-02-19T16:02:56.000Z","cooked":"\u003cp\u003eI get a segfault at the line \u003cspan class=\"bbcode-b\"\u003ememmove((void *)field,(void \u003cem\u003e) upsampled,upsampledsize\u003c/em\u003esizeof(int));\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eThat olsennoise() method looks like a prime candidate for being broken up into smaller functions. You’d probably have better luck isolating your bug that way.\u003c/p\u003e","post_number":12,"post_type":1,"updated_at":"2017-01-02T01:03:35.604Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":5,"readers_count":4,"score":1.0,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":30,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4884,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-19T16:43:14.000Z","cooked":"\u003cp\u003e[quote=“JTippetts”]I get a segfault at the line \u003cspan class=\"bbcode-b\"\u003ememmove((void *)field,(void \u003cem\u003e) upsampled,upsampledsize\u003c/em\u003esizeof(int));\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eThat olsennoise() method looks like a prime candidate for being broken up into smaller functions. You’d probably have better luck isolating your bug that way.[/quote]\u003c/p\u003e\n\u003cp\u003eYea. I was working on the code last night.\u003c/p\u003e\n\u003cp\u003eWorking copy image\u003cbr\u003e\nThe \u003ca href=\"http://imgur.com/a/ei4dF\" rel=\"nofollow noopener\"\u003eimgur.com/a/ei4dF\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWorking copy\u003cbr\u003e\n\u003ca href=\"http://pastebin.com/iZUPJThc\" rel=\"nofollow noopener\"\u003epastebin.com/iZUPJThc\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere is a slight issue with the edge maybe because of low numbers from the calculation process since(Mentioned by the author). I removed memmov. I was mixing memmov with c++ allocation methods of delete[] and new. If that’s figured out as to the edge, then you have infinite terrain dirt fast that’s reasonable and probably better then diamond square method.\u003c/p\u003e\n\u003cp\u003eThe developer is trying to work on a fix to the problem \u003ca href=\"http://godsnotwheregodsnot.blogspot.com/2014/08/3d-olsen-noise.html\" rel=\"nofollow noopener\"\u003egodsnotwheregodsnot.blogspot.com … noise.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eHis code is at \u003ca href=\"http://pastebin.com/BdVY9wXN\" rel=\"nofollow noopener\"\u003epastebin.com/BdVY9wXN\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eMy code is at \u003ca href=\"http://pastebin.com/LTww8EQr\" rel=\"nofollow noopener\"\u003epastebin.com/LTww8EQr\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSince I changing code from a array to a pointer array. Basically [x][y] to [x*(y\u003cem\u003ewidth)]. I have to find every [y] and change it to [y\u003c/em\u003ewidth] that matches that specific code and function which takes me longer. Since, I already converted the previous code, it is a little bit faster and deciphering Java.\u003c/p\u003e\n\u003cp\u003eVivienne\u003c/p\u003e\n\u003cp\u003eBTW, the guy wants to make a Android app to Demostrate. I see this as a possible why to get a noise generator in Urho3d and to highlight Urho3D. He made a 3D version also.\u003c/p\u003e","post_number":13,"post_type":1,"updated_at":"2017-01-02T01:03:35.671Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":1,"reads":7,"readers_count":6,"score":6.4,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://imgur.com/a/ei4dF","internal":false,"reflection":false,"title":"Olsen Noise Working Copy C++ - Album on Imgur","clicks":2},{"url":"http://pastebin.com/BdVY9wXN","internal":false,"reflection":false,"title":"Olsen Noise still broke - Pastebin.com","clicks":2},{"url":"http://pastebin.com/LTww8EQr","internal":false,"reflection":false,"title":"[C++] Olsen 2D version 2.00 Conversion Not-working - Pastebin.com","clicks":1},{"url":"http://pastebin.com/iZUPJThc","internal":false,"reflection":false,"title":"[C++] Olsen Noise Algorithm C++ WIP (Working copy). - Pastebin.com","clicks":0},{"url":"http://godsnotwheregodsnot.blogspot.com/2014/08/3d-olsen-noise.html","internal":false,"reflection":false,"title":"Ssnot!: 3D Olsen Noise","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":4895,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2015-02-19T21:00:32.000Z","cooked":"\u003cp\u003e[quote=“JTippetts”]I get a segfault at the line \u003cspan class=\"bbcode-b\"\u003ememmove((void *)field,(void \u003cem\u003e) upsampled,upsampledsize\u003c/em\u003esizeof(int));\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eThat olsennoise() method looks like a prime candidate for being broken up into smaller functions. You’d probably have better luck isolating your bug that way.[/quote]\u003c/p\u003e\n\u003cp\u003eThese are images of the generated textured loaded into the Urho3D editor Terrain node.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://imgur.com/a/p42gb\" rel=\"nofollow noopener\"\u003eimgur.com/a/p42gb\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI think it’s infinite like STB Perlin just setting (x,y).\u003c/p\u003e\n\u003cp\u003eSince the terrain blend works. It sounds like a fresh mix of infinite terrain.\u003c/p\u003e\n\u003cp\u003eNote, just want to create a way to make roads, maybe generate a path then use it to mask or alter the heightmap,\u003c/p\u003e","post_number":14,"post_type":1,"updated_at":"2017-01-02T01:03:36.558Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":8,"readers_count":7,"score":1.6,"yours":false,"topic_id":851,"topic_slug":"procedurlal-method-olsen-noise","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://imgur.com/a/p42gb","internal":false,"reflection":false,"title":"Olsen Based - Album on Imgur","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[4810,4811,4814,4815,4829,4830,4831,4834,4841,4845,4866,4883,4884,4895]},"timeline_lookup":[[1,2836],[7,2835],[11,2834],[14,2833]],"suggested_topics":[{"id":7115,"title":"Is it possbile to use one billboard for a lens flare?","fancy_title":"Is it possbile to use one billboard for a lens flare?","slug":"is-it-possbile-to-use-one-billboard-for-a-lens-flare","posts_count":17,"reply_count":4,"highest_post_number":17,"image_url":null,"created_at":"2022-01-02T03:10:48.953Z","last_posted_at":"2022-01-03T21:37:51.953Z","bumped":true,"bumped_at":"2022-01-03T21:37:51.953Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":4,"views":275,"category_id":10,"featured_link":null,"has_accepted_answer":true,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":861,"username":"GodMan","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}},{"extras":null,"description":"Frequent Poster, Accepted Answer","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7107,"title":"Error: SDL/SDL_gamecontroller.h: No such file or directory #include \u003cSDL/SDL_gamecontroller.h\u003e","fancy_title":"Error: SDL/SDL_gamecontroller.h: No such file or directory #include \u0026lt;SDL/SDL_gamecontroller.h\u0026gt;","slug":"error-sdl-sdl-gamecontroller-h-no-such-file-or-directory-include-sdl-sdl-gamecontroller-h","posts_count":6,"reply_count":1,"highest_post_number":6,"image_url":null,"created_at":"2021-12-21T15:29:52.810Z","last_posted_at":"2021-12-22T15:32:44.818Z","bumped":true,"bumped_at":"2021-12-22T15:32:44.818Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":3,"views":271,"category_id":10,"featured_link":null,"has_accepted_answer":true,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1497,"username":"timob256","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/b782af/{size}.png"}},{"extras":null,"description":"Frequent Poster, Accepted Answer","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7098,"title":"Cartoon Fire Effect","fancy_title":"Cartoon Fire Effect","slug":"cartoon-fire-effect","posts_count":6,"reply_count":0,"highest_post_number":6,"image_url":null,"created_at":"2021-12-10T04:08:49.887Z","last_posted_at":"2021-12-12T02:49:51.076Z","bumped":true,"bumped_at":"2021-12-12T02:49:51.076Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":6,"views":274,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":861,"username":"GodMan","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]},{"id":7086,"title":"Handling CrowdAgents that get stuck","fancy_title":"Handling CrowdAgents that get stuck","slug":"handling-crowdagents-that-get-stuck","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2021-12-04T01:26:23.062Z","last_posted_at":"2021-12-05T04:37:54.143Z","bumped":true,"bumped_at":"2021-12-05T04:37:54.143Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":137,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":861,"username":"GodMan","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]},{"id":7127,"title":"Switching ribbon trails emission glitches transparent materials","fancy_title":"Switching ribbon trails emission glitches transparent materials","slug":"switching-ribbon-trails-emission-glitches-transparent-materials","posts_count":8,"reply_count":3,"highest_post_number":8,"image_url":null,"created_at":"2022-01-13T17:17:46.847Z","last_posted_at":"2022-02-10T08:10:49.330Z","bumped":true,"bumped_at":"2022-02-10T08:10:49.330Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":323,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1188,"username":"Taqer","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/d2c977/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":631,"username":"JTippetts1","name":"J Tippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts1/{size}/96_2.png"}}]}],"tags_descriptions":{},"id":851,"title":"Procedurlal Method (Olsen Noise)","fancy_title":"Procedurlal Method (Olsen Noise)","posts_count":14,"created_at":"2015-02-16T22:47:20.000Z","views":332,"reply_count":0,"like_count":0,"last_posted_at":"2015-02-19T21:00:32.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"procedurlal-method-olsen-noise","category_id":10,"word_count":4142,"deleted_at":null,"user_id":88,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_851","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":14,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":2,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":88,"username":"vivienneanthony","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","post_count":10,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":30,"username":"JTippetts","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts/{size}/357_2.png","post_count":4,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2}],"created_by":{"id":88,"username":"vivienneanthony","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png"},"last_poster":{"id":88,"username":"vivienneanthony","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png"},"links":[{"url":"http://imgur.com/a/ei4dF","title":"Olsen Noise Working Copy C++ - Album on Imgur","internal":false,"attachment":false,"reflection":false,"clicks":2,"user_id":88,"domain":"imgur.com","root_domain":"imgur.com"},{"url":"http://imgur.com/u4o8732","title":"Imgur: The most awesome images on the Internet","internal":false,"attachment":false,"reflection":false,"clicks":2,"user_id":88,"domain":"imgur.com","root_domain":"imgur.com"},{"url":"http://pastebin.com/BdVY9wXN","title":"Olsen Noise still broke - Pastebin.com","internal":false,"attachment":false,"reflection":false,"clicks":2,"user_id":88,"domain":"pastebin.com","root_domain":"pastebin.com"},{"url":"http://imgur.com/nb2pMjP","title":"Imgur: The most awesome images on the Internet","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":88,"domain":"imgur.com","root_domain":"imgur.com"},{"url":"http://pastebin.com/gh6P5zf3","title":"Olsen Noise Algorithm - Pastebin.com","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":88,"domain":"pastebin.com","root_domain":"pastebin.com"},{"url":"http://pastebin.com/LTww8EQr","title":"[C++] Olsen 2D version 2.00 Conversion Not-working - Pastebin.com","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":88,"domain":"pastebin.com","root_domain":"pastebin.com"}]}}