{"post_stream":{"posts":[{"id":15995,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2017-02-12T08:14:21.484Z","cooked":"\u003cp\u003eHey,\u003c/p\u003e\n\u003cp\u003eI have some code and it’s not showing 3 sides of a cube. I cannot figure what’s wrong. As I experminted with several ways. The code to produce the normal is right.\u003c/p\u003e\n\u003cp\u003eI’m going cut and paste the full code maybe someone can pick up on it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e\nvoid DynamicGeometry::CreateScene()\n{\n    ResourceCache* cache = GetSubsystem\u0026lt;ResourceCache\u0026gt;();\n\n    scene_ = new Scene(context_);\n\n    // Create the Octree component to the scene so that drawable objects can be rendered. Use default volume\n    // (-1000, -1000, -1000) to (1000, 1000, 1000)\n    scene_-\u0026gt;CreateComponent\u0026lt;Octree\u0026gt;();\n\n    // Create a Zone for ambient light \u0026amp; fog control\n    Node* zoneNode = scene_-\u0026gt;CreateChild(\"Zone\");\n    Zone* zone = zoneNode-\u0026gt;CreateComponent\u0026lt;Zone\u0026gt;();\n    zone-\u0026gt;SetBoundingBox(BoundingBox(-1000.0f, 1000.0f));\n    zone-\u0026gt;SetFogColor(Color(0.2f, 0.2f, 0.2f));\n    zone-\u0026gt;SetFogStart(200.0f);\n    zone-\u0026gt;SetFogEnd(300.0f);\n\n    // Create a directional light\n    Node* lightNode = scene_-\u0026gt;CreateChild(\"DirectionalLight\");\n    lightNode-\u0026gt;SetDirection(Vector3(-0.6f, -1.0f, -0.8f)); // The direction vector does not need to be normalized\n    Light* light = lightNode-\u0026gt;CreateComponent\u0026lt;Light\u0026gt;();\n    light-\u0026gt;SetLightType(LIGHT_DIRECTIONAL);\n    light-\u0026gt;SetColor(Color(0.4f, 1.0f, 0.4f));\n    light-\u0026gt;SetSpecularIntensity(1.5f);\n\n    // Get the original model and its unmodified vertices, which are used as source data for the animation\n    Model* originalModel = cache-\u0026gt;GetResource\u0026lt;Model\u0026gt;(\"Models/Box.mdl\");\n    if (!originalModel)\n    {\n        URHO3D_LOGERROR(\"Model not found, cannot initialize example scene\");\n        return;\n    }\n\n\n\n    // Finally create one model (pyramid shape) and a StaticModel to display it from scratch\n    // Note: there are duplicated vertices to enable face normals. We will calculate normals programmatically\n    unsigned numVertices = 18;\n\n\n    // set chunks or patches\n    int PatchSize=8;\n\n\n    // Set Cube size\n    float CubeSize=10;;\n\n    // Get Cube Center - Create Defaults\n    Vector3 center = Vector3::ZERO;\n    Vector3 direction_x = Vector3::ZERO;\n    Vector3 direction_y = Vector3::ZERO;\n\n\n    // Create buffer\n    Vector\u0026lt;Vector3\u0026gt; vertexData;\n    Vector\u0026lt;unsigned short\u0026gt; indexData;\n\n    // Create a index\n    unsigned int index = 0;\n\n    for(unsigned int face=0; face\u0026lt; 6; face++)\n    {\n\n        // Get Cube Center\n        center = ((float)CubeSize/2)*TerrainFaceCoordinate[face];\n\n        // Calculate direction based of x\n        switch(face)\n        {\n        case Pos_X:\n            direction_x = CubeSize*Vector3(0,1,0);\n            direction_y = CubeSize*Vector3(0,0,1);\n            break;\n        case Neg_X:\n            direction_x = CubeSize*Vector3(0,1,0);\n            direction_y = CubeSize*Vector3(0,0,1);\n            break;\n        case Pos_Y:\n            direction_x = CubeSize*Vector3(1,0,0);\n            direction_y = CubeSize*Vector3(0,0,1);\n            break;\n        case Neg_Y:\n            direction_x = CubeSize*Vector3(1,0,0);\n            direction_y = CubeSize*Vector3(0,0,1);\n            break;\n        case Pos_Z:\n            direction_x = CubeSize*Vector3(1,0,0);\n            direction_y = CubeSize*Vector3(0,1,0);\n            break;\n        case Neg_Z:\n            direction_x = CubeSize*Vector3(1,0,0);\n            direction_y = CubeSize*Vector3(0,1,0);\n            break;\n        }\n\n        // loop through and create a grid of vertices. // do not draw edge\n        for (int u = 0; u \u0026lt; PatchSize; u++)\n        {\n            for (int v = 0; v \u0026lt; PatchSize; v++)\n            {\n                // Calculate patch size\n                Vector3 x1=(direction_x / PatchSize) * (v- PatchSize / 2);\n                Vector3 y1=(direction_y / PatchSize) * (u- PatchSize / 2);\n\n                // Create the vertex grid around the center of thecube face (which is passed into the function as Vector3 center).\n                Vector3 v1= center+ x1+y1;\n\n                // Calculate patch size\n                Vector3 x2=(direction_x / PatchSize) * ((v+1) - PatchSize / 2);\n                Vector3 y2=(direction_y / PatchSize) * (u- PatchSize / 2);\n\n                // Create the vertex grid around the center of thecube face (which is passed into the function as Vector3 center).\n                Vector3 v2= center+ x2+y2;\n\n                // Calculate patch size\n                Vector3 x3=(direction_x / PatchSize) * (v- PatchSize / 2);\n                Vector3 y3=(direction_y / PatchSize) * ((u+1)- PatchSize / 2);\n\n                // Create the vertex grid around the center of thecube face (which is passed into the function as Vector3 center).\n                Vector3 v3= center+ x3+y3;\n\n                // Calculate patch size\n                Vector3 x4=(direction_x / PatchSize) * ((v+1)- PatchSize / 2);\n                Vector3 y4=(direction_y / PatchSize) * ((u+1)- PatchSize / 2);\n\n                // Create the vertex grid around the center of thecube face (which is passed into the function as Vector3 center).\n                Vector3 v4=center+ x4+y4;\n\n                Vector3 n1;\n\n                Vector3 edge1 = v4-v1;\n                Vector3 edge2 = v3-v1;\n\n                n1= edge1.CrossProduct(edge2);\n\n                n1 = n1.Normalized();\n\n                // store first triangle\n                vertexData.Push(v1);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n                vertexData.Push(v2);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n                vertexData.Push(v4);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n                // another trianlge\n                vertexData.Push(v4);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n                vertexData.Push(v3);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n                vertexData.Push(v1);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n            }\n        }\n    }\n    numVertices = indexData.Size();\n\n    SharedPtr\u0026lt;Model\u0026gt; fromScratchModel(new Model(context_));\n    SharedPtr\u0026lt;VertexBuffer\u0026gt; vb(new VertexBuffer(context_));\n    SharedPtr\u0026lt;IndexBuffer\u0026gt; ib(new IndexBuffer(context_));\n    SharedPtr\u0026lt;Geometry\u0026gt; geom(new Geometry(context_));\n\n    // Shadowed buffer needed for raycasts to work, and so that data can be automatically restored on device loss\n    vb-\u0026gt;SetShadowed(true);\n\n    // We could use the \"legacy\" element bitmask to define elements for more compact code, but let's demonstrate\n    // defining the vertex elements explicitly to allow any element types and order\n    PODVector\u0026lt;VertexElement\u0026gt; elements;\n    elements.Push(VertexElement(TYPE_VECTOR3, SEM_POSITION));\n    elements.Push(VertexElement(TYPE_VECTOR3, SEM_NORMAL));\n\n\n    vb-\u0026gt;SetSize(numVertices, elements);\n    vb-\u0026gt;SetData(\u0026amp;vertexData[0]);\n\n    ib-\u0026gt;SetShadowed(true);\n    ib-\u0026gt;SetSize(numVertices, false);\n    ib-\u0026gt;SetData(\u0026amp;indexData[0]);\n\n    geom-\u0026gt;SetVertexBuffer(0, vb);\n    geom-\u0026gt;SetIndexBuffer(ib);\n    geom-\u0026gt;SetDrawRange(TRIANGLE_LIST, 0, numVertices);\n\n    fromScratchModel-\u0026gt;SetNumGeometries(1);\n    fromScratchModel-\u0026gt;SetGeometry(0, 0, geom);\n    fromScratchModel-\u0026gt;SetBoundingBox(BoundingBox(Vector3(-0.5f, -0.5f, -0.5f), Vector3(0.5f, 0.5f, 0.5f)));\n\n    // Though not necessary to render, the vertex \u0026amp; index buffers must be listed in the model so that it can be saved properly\n    Vector\u0026lt;SharedPtr\u0026lt;VertexBuffer\u0026gt; \u0026gt; vertexBuffers;\n    Vector\u0026lt;SharedPtr\u0026lt;IndexBuffer\u0026gt; \u0026gt; indexBuffers;\n    vertexBuffers.Push(vb);\n    indexBuffers.Push(ib);\n\n    // Morph ranges could also be not defined. Here we simply define a zero range (no morphing) for the vertex buffer\n    PODVector\u0026lt;unsigned\u0026gt; morphRangeStarts;\n    PODVector\u0026lt;unsigned\u0026gt; morphRangeCounts;\n    morphRangeStarts.Push(0);\n    morphRangeCounts.Push(0);\n    fromScratchModel-\u0026gt;SetVertexBuffers(vertexBuffers, morphRangeStarts, morphRangeCounts);\n    fromScratchModel-\u0026gt;SetIndexBuffers(indexBuffers);\n\n    Node* node = scene_-\u0026gt;CreateChild(\"FromScratchObject\");\n    node-\u0026gt;SetPosition(Vector3(0.0f, 3.0f, 0.0f));\n    StaticModel* object = node-\u0026gt;CreateComponent\u0026lt;StaticModel\u0026gt;();\n    object-\u0026gt;SetModel(fromScratchModel);\n\n    // Create the camera\n    cameraNode_ = new Node(context_);\n    cameraNode_-\u0026gt;SetPosition(Vector3(0.0f, 2.0f, -20.0f));\n    Camera* camera = cameraNode_-\u0026gt;CreateComponent\u0026lt;Camera\u0026gt;();\n    camera-\u0026gt;SetFarClip(300.0f);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eVivienne\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"//cdck-file-uploads-global.s3.dualstack.us-west-2.amazonaws.com/standard17/uploads/urho3d/original/1X/fdd1bfaff228f31fecdb2495f341a9741ad2b093.png\" width=\"690\" height=\"431\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"//cdck-file-uploads-global.s3.dualstack.us-west-2.amazonaws.com/standard17/uploads/urho3d/original/1X/121461415e3c485ecc7ca6470453f4da246766dd.png\" width=\"690\" height=\"431\"\u003e\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2017-02-12T08:14:21.484Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":17,"reads":33,"readers_count":32,"score":91.6,"yours":false,"topic_id":2787,"topic_slug":"vertex-normals-3-sides-of-cube-not-showing","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":15996,"name":"Eugene Kozlov","username":"Eugene","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png","created_at":"2017-02-12T09:43:14.224Z","cooked":"\u003cp\u003eNormals are unrelated to face visibility. Did you checked vertex order?\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-02-12T09:43:14.224Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":28,"readers_count":27,"score":10.6,"yours":false,"topic_id":2787,"topic_slug":"vertex-normals-3-sides-of-cube-not-showing","display_username":"Eugene Kozlov","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Core developer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":484,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":16001,"name":"","username":"vivienneanthony","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","created_at":"2017-02-12T16:13:25.213Z","cooked":"\u003cp\u003eI am checking. I checked the code and looked up order. It’s partially better in which I can see all sides but one set of triangles seem inverse. When I flip the order a little it’s back to the same problem. So  I need to read up on the order.\u003c/p\u003e\n\u003cp\u003eRight now the order is Triangle1(3 Vertex), Triangle2(3 Vertex).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e/ Finally create one model (pyramid shape) and a StaticModel to display it from scratch\n    // Note: there are duplicated vertices to enable face normals. We will calculate normals programmatically\n    unsigned numVertices = 18;\n\n\n    // set chunks or patches\n    int PatchSize=8;\n\n\n    // Set Cube size\n    float CubeSize=10;;\n\n    // Get Cube Center - Create Defaults\n    Vector3 center = Vector3::ZERO;\n    Vector3 direction_x = Vector3::ZERO;\n    Vector3 direction_y = Vector3::ZERO;\n\n\n    // Create buffer\n    Vector\u0026lt;Vector3\u0026gt; vertexData;\n    Vector\u0026lt;unsigned short\u0026gt; indexData;\n\n    // Create a index\n    unsigned int index = 0;\n\n    for(unsigned int face=0; face\u0026lt; 6; face++)\n    {\n\n        // Get Cube Center\n        center = ((float)CubeSize/2)*TerrainFaceCoordinate[face];\n\n        // Calculate direction based of x\n        switch(face)\n        {\n        case Pos_X:\n            direction_x = CubeSize*Vector3(0,1,0);\n            direction_y = CubeSize*Vector3(0,0,1);\n            break;\n        case Neg_X:\n            direction_x = CubeSize*Vector3(0,1,0);\n            direction_y = CubeSize*Vector3(0,0,1);\n            break;\n        case Pos_Y:\n            direction_x = CubeSize*Vector3(1,0,0);\n            direction_y = CubeSize*Vector3(0,0,1);\n            break;\n        case Neg_Y:\n            direction_x = CubeSize*Vector3(1,0,0);\n            direction_y = CubeSize*Vector3(0,0,1);\n            break;\n        case Pos_Z:\n            direction_x = CubeSize*Vector3(1,0,0);\n            direction_y = CubeSize*Vector3(0,1,0);\n            break;\n        case Neg_Z:\n            direction_x = CubeSize*Vector3(1,0,0);\n            direction_y = CubeSize*Vector3(0,1,0);\n            break;\n        }\n\n        // loop through and create a grid of vertices. // do not draw edge\n        for (int u = 0; u \u0026lt; PatchSize; u++)\n        {\n            for (int v = 0; v \u0026lt; PatchSize; v++)\n            {\n                // Calculate patch size\n                Vector3 x0=(direction_x / PatchSize) * (v- PatchSize / 2);\n                Vector3 y0=(direction_y / PatchSize) * (u- PatchSize / 2);\n\n                // Create the vertex grid around the center of thecube face (which is passed into the function as Vector3 center).\n                Vector3 v0= center+ x0+y0;\n\n                // Calculate patch size\n                Vector3 x1=(direction_x / PatchSize) * (v - PatchSize / 2);\n                Vector3 y1=(direction_y / PatchSize) * (u+1- PatchSize / 2);\n\n                // Create the vertex grid around the center of thecube face (which is passed into the function as Vector3 center).\n                Vector3 v1= center+ x1+y1;\n\n                // Calculate patch size\n                Vector3 x2=(direction_x / PatchSize) * (v+1- PatchSize / 2);\n                Vector3 y2=(direction_y / PatchSize) * (u- PatchSize / 2);\n\n                // Create the vertex grid around the center of thecube face (which is passed into the function as Vector3 center).\n                Vector3 v2= center+ x2+y2;\n\n                // Calculate patch size\n                Vector3 x3=(direction_x / PatchSize) * ((v+1)- PatchSize / 2);\n                Vector3 y3=(direction_y / PatchSize) * ((u+1)- PatchSize / 2);\n\n                // Create the vertex grid around the center of thecube face (which is passed into the function as Vector3 center).\n                Vector3 v3=center+ x3+y3;\n\n                Vector3 edge1 = v2-v1;\n                Vector3 edge2 = v3-v1;\n\n                Vector3 n1 = edge1.CrossProduct(edge2).Normalized();\n\n                // order is wrong\n                vertexData.Push(v0);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n                vertexData.Push(v1);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n\n\n                vertexData.Push(v2);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n\n                vertexData.Push(v1);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n\n\n                vertexData.Push(v2);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n\n                vertexData.Push(v3);\n                vertexData.Push(n1);\n                indexData.Push(index++);\n\n\n            }\n        }\n    }\n    numVertices = indexData.Size();\n\n    SharedPtr\u0026lt;Model\u0026gt; fromScratchModel(new Model(context_));\n    SharedPtr\u0026lt;VertexBuffer\u0026gt; vb(new VertexBuffer(context_));\n    SharedPtr\u0026lt;IndexBuffer\u0026gt; ib(new IndexBuffer(context_));\n    SharedPtr\u0026lt;Geometry\u0026gt; geom(new Geometry(context_));\n\n    // Shadowed buffer needed for raycasts to work, and so that data can be automatically restored on device loss\n    vb-\u0026gt;SetShadowed(true);\n\n    // We could use the \"legacy\" element bitmask to define elements for more compact code, but let's demonstrate\n    // defining the vertex elements explicitly to allow any element types and order\n    PODVector\u0026lt;VertexElement\u0026gt; elements;\n    elements.Push(VertexElement(TYPE_VECTOR3, SEM_POSITION));\n    elements.Push(VertexElement(TYPE_VECTOR3, SEM_NORMAL));\n\n\n    vb-\u0026gt;SetSize(numVertices, elements);\n    vb-\u0026gt;SetData(\u0026amp;vertexData[0]);\n\n    ib-\u0026gt;SetShadowed(true);\n    ib-\u0026gt;SetSize(numVertices, false);\n    ib-\u0026gt;SetData(\u0026amp;indexData[0]);\n\n    geom-\u0026gt;SetVertexBuffer(0, vb);\n    geom-\u0026gt;SetIndexBuffer(ib);\n    geom-\u0026gt;SetDrawRange(TRIANGLE_LIST, 0, numVertices);\n\n    fromScratchModel-\u0026gt;SetNumGeometries(1);\n    fromScratchModel-\u0026gt;SetGeometry(0, 0, geom);\n    fromScratchModel-\u0026gt;SetBoundingBox(BoundingBox(Vector3(-0.5f, -0.5f, -0.5f), Vector3(0.5f, 0.5f, 0.5f)));\n\n    // Though not necessary to render, the vertex \u0026amp; index buffers must be listed in the model so that it can be saved properly\n    Vector\u0026lt;SharedPtr\u0026lt;VertexBuffer\u0026gt; \u0026gt; vertexBuffers;\n    Vector\u0026lt;SharedPtr\u0026lt;IndexBuffer\u0026gt; \u0026gt; indexBuffers;\n    vertexBuffers.Push(vb);\n    indexBuffers.Push(ib);\n\n    // Morph ranges could also be not defined. Here we simply define a zero range (no morphing) for the vertex buffer\n    PODVector\u0026lt;unsigned\u0026gt; morphRangeStarts;\n    PODVector\u0026lt;unsigned\u0026gt; morphRangeCounts;\n    morphRangeStarts.Push(0);\n    morphRangeCounts.Push(0);\n    fromScratchModel-\u0026gt;SetVertexBuffers(vertexBuffers, morphRangeStarts, morphRangeCounts);\n    fromScratchModel-\u0026gt;SetIndexBuffers(indexBuffers);\n\n    Node* node = scene_-\u0026gt;CreateChild(\"FromScratchObject\");\n    node-\u0026gt;SetPosition(Vector3(0.0f, 3.0f, 0.0f));\n    StaticModel* object = node-\u0026gt;CreateComponent\u0026lt;StaticModel\u0026gt;();\n    object-\u0026gt;SetModel(fromScratchModel);\n\n    // Create the camera\n    cameraNode_ = new Node(context_);\n    cameraNode_-\u0026gt;SetPosition(Vector3(0.0f, 2.0f, -20.0f));\n    Camera* camera = cameraNode_-\u0026gt;CreateComponent\u0026lt;Camera\u0026gt;();\n    camera-\u0026gt;SetFarClip(300.0f);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"//cdck-file-uploads-global.s3.dualstack.us-west-2.amazonaws.com/standard17/uploads/urho3d/original/1X/38a87e96e956b56c98566a7d97f7d98da0ff191f.png\" width=\"690\" height=\"431\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"//cdck-file-uploads-global.s3.dualstack.us-west-2.amazonaws.com/standard17/uploads/urho3d/original/1X/e6c9935b29479e7719ec0db48f774326bb80b15e.png\" width=\"690\" height=\"431\"\u003e\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2017-02-12T16:13:25.213Z","reply_count":1,"reply_to_post_number":2,"quote_count":0,"incoming_link_count":0,"reads":25,"readers_count":24,"score":10.0,"yours":false,"topic_id":2787,"topic_slug":"vertex-normals-3-sides-of-cube-not-showing","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":88,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":16002,"name":"","username":"Lumak","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png","created_at":"2017-02-12T22:40:46.357Z","cooked":"\u003cp\u003eThis is what I’m seeing:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e1st triangle: v0-v1-v2 -\u0026gt; clockwise winding order\u003c/li\u003e\n\u003cli\u003e2nd triangle: v1-v2-v3 -\u0026gt; counter-clockwise winding -\u0026gt; shouldn’t it be: v1-v3-v2 ?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eedit: or you can set the material cull=“none”\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2017-02-12T22:43:03.913Z","reply_count":0,"reply_to_post_number":3,"quote_count":0,"incoming_link_count":0,"reads":24,"readers_count":23,"score":4.8,"yours":false,"topic_id":2787,"topic_slug":"vertex-normals-3-sides-of-cube-not-showing","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"vivienneanthony","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":256,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[15995,15996,16001,16002]},"timeline_lookup":[[1,2110],[4,2109]],"suggested_topics":[{"id":7081,"title":"Install Urho3D Library - Windows 10 - rake build - \"project does not exist\"","fancy_title":"Install Urho3D Library - Windows 10 - rake build - \u0026ldquo;project does not exist\u0026rdquo;","slug":"install-urho3d-library-windows-10-rake-build-project-does-not-exist","posts_count":4,"reply_count":1,"highest_post_number":4,"image_url":null,"created_at":"2021-12-03T03:06:40.974Z","last_posted_at":"2021-12-03T17:53:10.844Z","bumped":true,"bumped_at":"2021-12-03T17:53:10.844Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":190,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1488,"username":"ToolmakerSteve","name":"ToolmakerSteve","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/ba9def/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1491,"username":"xlat","name":"Alex Kuch","avatar_template":"/user_avatar/discourse.urho3d.io/xlat/{size}/3620_2.png"}}]},{"id":7125,"title":"Android mobile shows jaggies in the instersection plane-terrain","fancy_title":"Android mobile shows jaggies in the instersection plane-terrain","slug":"android-mobile-shows-jaggies-in-the-instersection-plane-terrain","posts_count":5,"reply_count":3,"highest_post_number":5,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/original/2X/d/d36aedb4e8cf5409efca6c976aae7e4a5c499eb9.png","created_at":"2022-01-11T11:59:18.993Z","last_posted_at":"2022-01-11T21:27:40.692Z","bumped":true,"bumped_at":"2022-01-12T07:36:41.695Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":129,"category_id":10,"featured_link":null,"has_accepted_answer":true,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":856,"username":"feresmu","name":null,"avatar_template":"https://avatars.discourse-cdn.com/v4/letter/f/f08c70/{size}.png"}},{"extras":null,"description":"Frequent Poster, Accepted Answer","user":{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png"}}]},{"id":7127,"title":"Switching ribbon trails emission glitches transparent materials","fancy_title":"Switching ribbon trails emission glitches transparent materials","slug":"switching-ribbon-trails-emission-glitches-transparent-materials","posts_count":8,"reply_count":3,"highest_post_number":8,"image_url":null,"created_at":"2022-01-13T17:17:46.847Z","last_posted_at":"2022-02-10T08:10:49.330Z","bumped":true,"bumped_at":"2022-02-10T08:10:49.330Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":323,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":1188,"username":"Taqer","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/t/d2c977/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":631,"username":"JTippetts1","name":"J Tippetts","avatar_template":"/user_avatar/discourse.urho3d.io/jtippetts1/{size}/96_2.png"}}]},{"id":7176,"title":"Orthographic scene slowing down when zooming out","fancy_title":"Orthographic scene slowing down when zooming out","slug":"orthographic-scene-slowing-down-when-zooming-out","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-01-30T10:05:50.218Z","last_posted_at":"2022-01-30T10:05:50.294Z","bumped":true,"bumped_at":"2022-01-30T10:05:50.294Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":127,"category_id":10,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":1351,"username":"Haukinger","name":"Haukinger","avatar_template":"/user_avatar/discourse.urho3d.io/haukinger/{size}/3670_2.png"}}]},{"id":7266,"title":"Compile Urho3D 1.8 failed with the default MinGW of Clion2022.1","fancy_title":"Compile Urho3D 1.8 failed with the default MinGW of Clion2022.1","slug":"compile-urho3d-1-8-failed-with-the-default-mingw-of-clion2022-1","posts_count":4,"reply_count":1,"highest_post_number":4,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/optimized/2X/f/fcbe1a1f0cd74c5cc158c8c790c6c472f3b96011_2_1024x359.png","created_at":"2022-05-14T06:22:45.469Z","last_posted_at":"2022-05-16T06:45:54.546Z","bumped":true,"bumped_at":"2022-05-16T06:45:54.546Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":0,"views":124,"category_id":10,"featured_link":null,"has_accepted_answer":true,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":745,"username":"ChunFengTsin","name":"Chun Feng Tsin","avatar_template":"/user_avatar/discourse.urho3d.io/chunfengtsin/{size}/450_2.png"}},{"extras":null,"description":"Frequent Poster, Accepted Answer","user":{"id":263,"username":"1vanK","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/1vank/{size}/768_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]}],"tags_descriptions":{},"id":2787,"title":"Vertex Normals - 3 Sides of Cube not showing","fancy_title":"Vertex Normals - 3 Sides of Cube not showing","posts_count":4,"created_at":"2017-02-12T08:14:21.406Z","views":625,"reply_count":2,"like_count":0,"last_posted_at":"2017-02-12T22:40:46.357Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"vertex-normals-3-sides-of-cube-not-showing","category_id":10,"word_count":1839,"deleted_at":null,"user_id":88,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/optimized/1X/fdd1bfaff228f31fecdb2495f341a9741ad2b093_2_1024x640.png","slow_mode_seconds":0,"draft":null,"draft_key":"topic_2787","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":4,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":3,"show_read_indicator":false,"thumbnails":[{"max_width":null,"max_height":null,"width":1440,"height":900,"url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/original/1X/fdd1bfaff228f31fecdb2495f341a9741ad2b093.png"},{"max_width":1024,"max_height":1024,"width":1024,"height":640,"url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/optimized/1X/fdd1bfaff228f31fecdb2495f341a9741ad2b093_2_1024x640.png"}],"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":88,"username":"vivienneanthony","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png","post_count":2,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":256,"username":"Lumak","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2},{"id":484,"username":"Eugene","name":"Eugene Kozlov","avatar_template":"/user_avatar/discourse.urho3d.io/eugene/{size}/902_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":2}],"created_by":{"id":88,"username":"vivienneanthony","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/vivienneanthony/{size}/942_2.png"},"last_poster":{"id":256,"username":"Lumak","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/l/8491ac/{size}.png"}}}