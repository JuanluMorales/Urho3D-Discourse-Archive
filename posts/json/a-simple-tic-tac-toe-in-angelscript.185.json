{"post_stream":{"posts":[{"id":1031,"name":"","username":"gasp","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/0ea827/{size}.png","created_at":"2014-04-02T20:32:05.000Z","cooked":"\u003cp\u003eHello,\u003cbr\u003e\ni wanted to play with Urho3d to create a simple game, i’ve created a tictactoe with the base assets :\u003cbr\u003e\nuse UrhoPlayer with this .as script :\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e// TicTacToe 3D scene example.\n// This sample demonstrates:\n//     - Creating a 3D scene with static content\n//     - Raytracing to select a node and use \"vars\" to store data\n//     - a simple who win algorithm\n#include \"Scripts/Utilities/Sample.as\"\n\n\t//You can play with this values\nconst float FLOOR_ELEMENT_SIZE = 4.0f;\t// Change scale of the game\nconst int ROW_FLOW_NUMBER=13;\t        // Play area is a square, so row = column\nconst int REQUIRED_TO_WIN=6;\t        // Number of aligned piece to win\nconst bool DISABLE_ROTATION=true;\t\t//If true, all the cell a aligned, and not moved on click\n\n// ## Code is below\n//Global var\nScene@ scene_;\nNode@ cameraNode;\nControls camControl;\nfloat yaw = 10.0f;\nfloat pitch = 30.0f;\nArray\u0026lt;Node@\u0026gt; tblPlateau;\nNode@ plateauParent;\nText@ activePlayerText ;\nconst int OWNED_BY_NO_ONE=0;\nbool gameCreated=false;\t//if you leave \"e\" or \"s\" it doens't spam the commande\nbool drawDebug = false;\nint activePlayer=1;\t// 1st played is the first to play :p\nint numCasePlayed =0;\nvoid Start()\n{\n\t// Execute the common startup for samples\n\tSampleStart();\n\n\t// Create the scene content\n\tCreateScene();\n\n\t\n\t// Create the UI content\n\tCreateUI();\n\t\n\t\n\t// Setup the viewport for displaying the scene\n\tSetupViewport();\n\n\t// Hook up to the frame update events\n\tSubscribeToEvents();\n\t\n\t// Start the game\n\tstartOfGame();\t\n\t   \n\n     \n}\n\nvoid CreateUI()\n{\n\t// Create a Cursor UI element because we want to be able to hide and show it at will. When hidden, the mouse cursor will\n\t// control the camera, and when visible, it will point the raycast target\n\tXMLFile@ style = cache.GetResource(\"XMLFile\", \"UI/DefaultStyle.xml\");\n\tCursor@ cursor = Cursor();\n\tcursor.SetStyleAuto(style);\n\tui.cursor = cursor;\n\t// Set starting position of the cursor at the rendering window center\n\tcursor.SetPosition(graphics.width / 2, graphics.height / 2);\n\n\t// Construct new Text object, set string to display and font to use\n\tText@ instructionText = ui.root.CreateChild(\"Text\");\n\tinstructionText.text =\n\t    \"Use up,down,left,right arrow keys to move\\n\"\n\t\t\"Use \\\"e\\\" End the game, \\\"s\\\" re-start a game\\n\"\n\t    \"LMB to place ticTacToe Element, RMB to rotate view\\n\"\n\t\t\"You need : \"+REQUIRED_TO_WIN+\" aligned to win \\n\"\n\t    \"Space to move Up\\n\";\n\n\tinstructionText.SetFont(cache.GetResource(\"Font\", \"Fonts/Anonymous Pro.ttf\"), 15);\n\t// The text has multiple rows. Center them in relation to each other\n\tinstructionText.textAlignment = HA_CENTER;\n\n\t// Position the text relative to the screen center\n\tinstructionText.horizontalAlignment = HA_CENTER;\n\tinstructionText.verticalAlignment = VA_CENTER;\n\tinstructionText.SetPosition(0, ui.root.height / 4);\n\n\tactivePlayerText = ui.root.CreateChild(\"Text\");\n\tactivePlayerText.text =\"player \"+activePlayer;\n\tactivePlayerText.textAlignment = HA_CENTER;\n\tactivePlayerText.horizontalAlignment = HA_CENTER;\n\tactivePlayerText.verticalAlignment = VA_BOTTOM;\n\tactivePlayerText.SetPosition(0, 1);\n\tactivePlayerText.SetFont(cache.GetResource(\"Font\", \"Fonts/Anonymous Pro.ttf\"), 30);\n\tactivePlayerText.color = Color(0.0f, 1.0f, 0.0f);\n\n}\n\nvoid CreateScene()\n{\n\tscene_ = Scene();\n\n\t// Create the Octree component to the scene. This is required before adding any drawable components, or else nothing will\n\t// show up. The default octree volume will be from (-1000, -1000, -1000) to (1000, 1000, 1000) in world coordinates; it\n\t// is also legal to place objects outside the volume but their visibility can then not be checked in a hierarchically\n\t// optimizing manner\n\tscene_.CreateComponent(\"Octree\");\n\tscene_.CreateComponent(\"DebugRenderer\");\n\t// Create a directional light to the world so that we can see something. The light scene node's orientation controls the\n\t// light direction; we will use the SetDirection() function which calculates the orientation from a forward direction vector.\n\t// The light will use default settings (white light, no shadows)\n\tNode@ lightNode = scene_.CreateChild(\"DirectionalLight\");\n\tlightNode.direction = Vector3(0.6f, -1.0f, 0.8f); // The direction vector does not need to be normalized\n\tLight@ light = lightNode.CreateComponent(\"Light\");\n\tlight.lightType = LIGHT_DIRECTIONAL;\n\n\n\n\n\t// Create a scene node for the camera, which we will move around\n\t// The camera will use default settings (1000 far clip distance, 45 degrees FOV, set aspect ratio automatically)\n\tcameraNode = scene_.CreateChild(\"Camera\");\n\tcameraNode.CreateComponent(\"Camera\");\n\n\t// Set an initial position for the camera scene node above the plane\n\tcameraNode.position = Vector3((FLOOR_ELEMENT_SIZE*ROW_FLOW_NUMBER)/2, 10.0f, -15.0f);\n\tcameraNode.Pitch(pitch);\n\tcameraNode.Yaw(yaw);\n}\n\n\n\nvoid SetupViewport()\n{\n\t// Set up a viewport to the Renderer subsystem so that the 3D scene can be seen. We need to define the scene and the camera\n\t// at minimum. Additionally we could configure the viewport screen size and the rendering path (eg. forward / deferred) to\n\t// use, but now we just use full screen and default render path configured in the engine command line options\n\tViewport@ viewport = Viewport(scene_, cameraNode.GetComponent(\"Camera\"));\n\trenderer.viewports[0] = viewport;\n}\n\nvoid MoveCamera(float timeStep)\n{\n\t// Right mouse button controls mouse cursor visibility: hide when pressed\n\tui.cursor.visible = !input.mouseButtonDown[MOUSEB_RIGHT];\n\n\t// Do not move if the UI has a focused element (the console)\n\tif (ui.focusElement !is null)\n\t\treturn;\n\n\t// Movement speed as world units per second\n\tconst float MOVE_SPEED = 20.0f;\n\t// Mouse sensitivity as degrees per pixel\n\tconst float MOUSE_SENSITIVITY = 0.1f;\n\n\t// Use this frame's mouse motion to adjust camera node yaw and pitch. Clamp the pitch between -90 and 90 degrees\n\t// Only move the camera when the cursor is hidden\n\tif (!ui.cursor.visible) {\n\t\tIntVector2 mouseMove = input.mouseMove;\n\t\tyaw += MOUSE_SENSITIVITY * mouseMove.x;\n\t\tpitch += MOUSE_SENSITIVITY * mouseMove.y;\n\t\tpitch = Clamp(pitch, -90.0f, 90.0f);\n\n\t\t// Construct new orientation for the camera scene node from yaw and pitch. Roll is fixed to zero\n\t\tcameraNode.rotation = Quaternion(pitch, yaw, 0.0f);\n\t}\n\n\t// Read WASD keys and move the camera scene node to the corresponding direction if they are pressed\n\t//Currently setted for french keyboard\n\tif (input.keyDown[KEY_UP])\n\t\tcameraNode.TranslateRelative(Vector3(0.0f, 0.0f, 1.0f) * MOVE_SPEED * timeStep);\n\tif (input.keyDown[KEY_DOWN])\n\t\tcameraNode.TranslateRelative(Vector3(0.0f, 0.0f, -1.0f) * MOVE_SPEED * timeStep);\n\tif (input.keyDown[KEY_LEFT])\n\t\tcameraNode.TranslateRelative(Vector3(-1.0f, 0.0f, 0.0f) * MOVE_SPEED * timeStep);\n\tif (input.keyDown[KEY_RIGHT])\n\t\tcameraNode.TranslateRelative(Vector3(1.0f, 0.0f, 0.0f) * MOVE_SPEED * timeStep);\n\tif (input.keyDown[KEY_D])\n\t\tcameraNode.TranslateRelative(Vector3(0.0f, 2.0f, 0.0f) * MOVE_SPEED * timeStep);\n\t//Check what is  clicked, and if game engine need to react\n\tif (ui.cursor.visible \u0026amp;\u0026amp; input.mouseButtonPress[MOUSEB_LEFT])\n\t\twhatHaveYouCLicked();\n\tif (input.keyDown[KEY_E])\n\t\tendOfGame();\n\tif (input.keyDown[KEY_S])\n\t\tstartOfGame\t();\n\t//Active / Desactive debug\n\tif (input.keyPress[KEY_SPACE])\n\t\tdrawDebug = !drawDebug;\n\n}\nvoid startOfGame()\n{\n\tif (gameCreated)\n\t\treturn;\n\tplateauParent  = scene_.CreateChild(\"damier\");\n\t//Create the \"floor\" with a list of node who will be valid target for raycasting\n\t\tfor (uint j = 0; j \u0026lt; ROW_FLOW_NUMBER; ++j) {\n\t\t\tfor (uint i = 0; i \u0026lt; ROW_FLOW_NUMBER; ++i) {\n\t\t\tNode@ floorNode = plateauParent.CreateChild(\"damier\");\n\t\t\t//Setting vars who will help up to track what is doable and what is not\n\t\t\tfloorNode.vars[\"x\"]=i;\n\t\t\tfloorNode.vars[\"y\"]=j;\n\t\t\tfloorNode.vars[\"playedBy\"]=OWNED_BY_NO_ONE;\t//Case not played\n\t\t\tfloorNode.position = Vector3(i*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2), 0.0f, j*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2));\n\t\t\t\t//We re-use already present materials, they use 99% of the FLOOR_ELEMENT_SIZE\n\t\t\tfloorNode.scale=Vector3(FLOOR_ELEMENT_SIZE-(FLOOR_ELEMENT_SIZE/100),-(FLOOR_ELEMENT_SIZE/100),FLOOR_ELEMENT_SIZE-(FLOOR_ELEMENT_SIZE/100));\n\t\t\t\t//create the static model\n\t\t\tStaticModel@ floorStaticModel = floorNode.CreateComponent(\"StaticModel\");\n\t\t\tfloorStaticModel.model = \tcache.GetResource(\"Model\", \"Models/Box.mdl\");\n\t\t\tfloorStaticModel.material = cache.GetResource(\"Material\", \"Materials/Stone.xml\");\n\t\t\t\t//Save in an Array of Node@\n\t\t\ttblPlateau.Push(floorNode);\n\t\t}\n\t}\n\t/**\n\t * Sample for iterating the plateau lineary and accessing each part\n\t */ \n\t if (!DISABLE_ROTATION){\n\t for (uint i = 0; i \u0026lt; tblPlateau.length; ++i) {\n\t\ttblPlateau[i].Rotate(Quaternion(0.0f, 30.0f, 0.0f));\n\t\tPrint(tblPlateau[i].vars[\"x\"]);\n\t\n\t }\n\t }\n\t \n\t\t//Define somes vars\n\tgameCreated=true;\n\tactivePlayer=1;\n\tactivePlayerText.text =\"player \"+activePlayer;\n}\nvoid endOfGame()\n{\n\t//Need to add a test not to erase 50  times the game\n\ttblPlateau.Clear();\n\tplateauParent.RemoveAllChildren();\n\tgameCreated=false;\n}\nvoid whatHaveYouCLicked()\n{\n\tVector3 hitPos;\n\tDrawable@ hitDrawable;\n\tif (Raycast(250.0f, hitPos, hitDrawable)) {\n\t\t// search with floor coords what cell is touched by the ray vector3 impact point\n\t\tint caseXpos = (hitPos.x/FLOOR_ELEMENT_SIZE);\n\t\tint caseYpos = (hitPos.z/FLOOR_ELEMENT_SIZE);\n\t\t\t//2nd method : Selected Node\n\t\tNode@ selectedNode = hitDrawable.node;\n\t\t\t//Online node named \"damier\" are valide target\n\t\tif (selectedNode.name ==\"damier\") {\n\t\t\tif (selectedNode.vars[\"playedBy\"].GetUInt()==0) {\n\t\t\t\t//search area by vector3D coordinates\n\t\t\t\tint caseX = selectedNode.vars[\"x\"].GetUInt();\n\t\t\t\tint caseY = selectedNode.vars[\"y\"].GetUInt();\n\t\t\t\tint indice=caseY*ROW_FLOW_NUMBER+caseX;\t//linearize the coordonnates\n\t\t\t\t\n\t\t\t\tif (!DISABLE_ROTATION \u0026amp;\u0026amp; indice\u0026lt;=tblPlateau.length) {\n\t\t\t\t\ttblPlateau[indice].Rotate(Quaternion(0.0f, -30.0f, 0.0f));\n\t\t\t\t\t//Print(tblPlateau[indice].vars[\"x\"]);\n\t\t\t\t}\n\t\t\t\t\t//we link the game element (Cross/Cicle normally) to it's node to be able to remove it within the game\n\t\t\t\tNode@ gameElementNode = plateauParent.CreateChild(\"player\"+activePlayer+\" gameElement\");\n\t\t\t\t\t//we center the element  in the dalle\n\t\t\t\tgameElementNode.position = Vector3(caseX*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2), 0.2f, caseY*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2));\n\t\t\t\tStaticModel@ staticModel = gameElementNode.CreateComponent(\"StaticModel\");\n\t\t\t\tlog.Info(\"Player \" + activePlayer +\" have play in [\"+selectedNode.vars[\"x\"].GetUInt()+\"][\"+selectedNode.vars[\"y\"].GetUInt()+\"]\");\n\t\t\t\t\t//set node local vars\n\t\t\t\tselectedNode.vars[\"playedBy\"]= activePlayer ;\n\t\t\t\t\t//easy way to know it's an end of play ^^\n\t\t\t\tnumCasePlayed++;\n\t\t\t\tif (activePlayer==1) {\n\t\t\t\t\tstaticModel.model = cache.GetResource(\"Model\", \"Models/Sphere.mdl\");\n\t\t\t\t\tstaticModel.material = cache.GetResource(\"Material\", \"Materials/Terrain.xml\");\n\t\t\t\t\t//We scale object according to the floor size\n\t\t\t\t\tgameElementNode.SetScale(FLOOR_ELEMENT_SIZE/4.0f);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstaticModel.model = cache.GetResource(\"Model\", \"Models/Torus.mdl\");\n\t\t\t\t\tstaticModel.material = cache.GetResource(\"Material\", \"Materials/Terrain.xml\");\n\t\t\t\t\tgameElementNode.SetScale(FLOOR_ELEMENT_SIZE/4.0f);\n\t\t\t\t}\n\t\t\t\t// Did we have a winner ?\n\t\t\t\tif (didWeHaveAWinner(caseX,caseY)) {\n\t\t\t\t\tactivePlayerText.text =\"player \"+activePlayer +\" Win!\" ;\n\t\t\t\t\tshowMenu();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\t//all area fill \u0026amp; no winner\n\t\t\t\t\tif (numCasePlayed == ROW_FLOW_NUMBER*ROW_FLOW_NUMBER) {\n\t\t\t\t\t\tactivePlayerText.text=\"End Of Game, it's a draw !\";\n\t\t\t\t\t\t//showMenu();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t//game continue, change current player\n\t\t\t\t\t\tif (activePlayer==1)\n\t\t\t\t\t\t\tactivePlayer=2;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tactivePlayer=1;\n\t\t\t\t\t\tactivePlayerText.text =\"player \"+activePlayer;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.Info (\"!! Node Already played by player \"+selectedNode.vars[\"playedBy\"].GetUInt()+\"[\"+selectedNode.vars[\"x\"].GetUInt()+\"][\"+selectedNode.vars[\"y\"].GetUInt()+\"]\");\n\t\t\t}\n\t\t}\n\n\t}\n}\n\t/**\n\t * Maybe we need a menu here :p\n\t * */\nvoid showMenu()\n{\n\tendOfGame();\n}\n/**\n * Detection of a winner\n * */\nbool didWeHaveAWinner(int x_,int y_)\n{\n\tint nbFound=0;\n\tint i=0;\n\tint indice=0;\n\t// ## Horizontal Search\n\twhile (x_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[y_*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;i=0;\n\twhile (x_-i\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[y_*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound+=i-1;\t//we doesn't count 2 time the originate cell\n\tlog.Info(\"Horizontale : \"+nbFound+\" \");\t\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)//have we a horizontal winner ?\n\t\treturn true;\n\t// ## Vertical search\n\ti=0;\n\twhile (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_].vars[\"playedBy\"].GetUInt()) i++;\t\n\tnbFound=i;i=0;//go \"Down\"\n\twhile ((y_-i)\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_].vars[\"playedBy\"].GetUInt()){\n\t\t\t//If you want to be able to trace the algo : \n\t\t// indice=(y_-i)*ROW_FLOW_NUMBER+x_;\n\t   \t //log.Info(\"up \"+tblPlateau[indice].name+\" x: \"+tblPlateau[indice].vars[\"x\"].GetUInt()+\" y: \"+tblPlateau[indice].vars[\"y\"].GetUInt()+\n\t\t\t\t//\" Player: \"+tblPlateau[indice].vars[\"playedBy\"].GetUInt()+\" Player : \"+activePlayer);\t\t\n\t\t\t\ti++;\t\n\t}\n\tnbFound+=i-1;\n\tlog.Info(\"Verticale : \"+nbFound);\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\n\t\treturn true;\n\t// ## Diagonal Search\n\ti=0;while (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; x_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++; \n\tnbFound=i;\n\ti=0;while ( (y_-i)\u0026gt;=0 \u0026amp;\u0026amp; (x_-i)\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt()) i++; \n\tnbFound+=i-1;\t\n\tlog.Info(\"Diagonal / : \"+nbFound+\" \");\t\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)//have we a horizontal winner ?\n\t\treturn true;\t\t\t\t\n\ti=0;while (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; x_-i\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt()) i++; \n\tnbFound=i;\n\ti=0;while ( (y_-i)\u0026gt;=0 \u0026amp;\u0026amp; (x_+i)\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++; \n\tnbFound+=i-1;\t\n\tlog.Info(\"Diagonal \\\\ : \"+nbFound+\" \");\t\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)//have we a horizontal winner ?\n\t\treturn true;\t\t\t\t\t\t\n\treturn false;\n}\n/**\n * Cast a Ray and store the 3D pos in hitPos, and the node in hitDrawable (stolen from 08_decals)\n  * */\nbool Raycast(float maxDistance, Vector3\u0026amp; hitPos, Drawable@\u0026amp; hitDrawable)\n{\n\thitDrawable = null;\n\tIntVector2 pos = ui.cursorPosition;\n\t// Check the cursor is visible and there is no UI element in front of the cursor\n\tif (!ui.cursor.visible || ui.GetElementAt(pos, true) !is null)\n\t\treturn false;\n\tCamera@ camera = cameraNode.GetComponent(\"Camera\");\n\tRay cameraRay = camera.GetScreenRay(float(pos.x) / graphics.width, float(pos.y) / graphics.height);\n\t// Pick only geometry objects, not eg. zones or lights, only get the first (closest) hit\n\t// Note the convenience accessor to scene's Octree component\n\tRayQueryResult result = scene_.octree.RaycastSingle(cameraRay, RAY_TRIANGLE, maxDistance, DRAWABLE_GEOMETRY);\n\tif (result.drawable !is null) {\n\t\thitPos = result.position;\n\t\thitDrawable = result.drawable;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nvoid SubscribeToEvents()\n{\n\t// Subscribe HandleUpdate() function for processing update events\n\tSubscribeToEvent(\"Update\", \"HandleUpdate\");\n\t// debug geometry\n\tSubscribeToEvent(\"PostRenderUpdate\", \"HandlePostRenderUpdate\");\n}\n\nvoid HandleUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\t// Take the frame time step, which is stored as a float\n\tfloat timeStep = eventData[\"TimeStep\"].GetFloat();\n\t// Move the camera, scale movement with time step\n\tMoveCamera(timeStep);\n\n}\nvoid HandlePostRenderUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\t// If draw debug mode is enabled, draw viewport debug geometry. This time use depth test, as otherwise the result becomes\n\t// hard to interpret due to large object count\n\tif (drawDebug)\n\t\trenderer.DrawDebugGeometry(true);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eyou can change number of cell, number of object to align and size of a cell, simple look at the start of the script.\u003c/p\u003e\n\u003cp\u003enext step is to clean the code, add an IA, maybe a menu with the UI\u003c/p\u003e\n\u003cp\u003eand after a LUA / C++ version to understand more stuff.\u003cbr\u003e\n(i know using a fine 3D engine for Urho3d is really OVERKILL, apport nothing but it’s for testing somes concepts with Urho3D\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2017-01-02T00:58:43.707Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":125,"reads":16,"readers_count":15,"score":628.2,"yours":false,"topic_id":185,"topic_slug":"a-simple-tic-tac-toe-in-angelscript","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":62,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":1044,"name":"","username":"Canardian","avatar_template":"/user_avatar/discourse.urho3d.io/canardian/{size}/67_2.png","created_at":"2014-04-04T09:50:17.000Z","cooked":"\u003caside class=\"quote no-group\" data-username=\"gasp\"\u003e\n\u003cdiv class=\"title\"\u003e\n\u003cdiv class=\"quote-controls\"\u003e\u003c/div\u003e\n\u003cimg alt=\"\" width=\"20\" height=\"20\" src=\"https://avatars.discourse-cdn.com/v4/letter/g/0ea827/40.png\" class=\"avatar\"\u003e gasp:\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e(i know using a fine 3D engine for Urho3d is really OVERKILL, apport nothing but it’s for testing somes concepts with Urho3D\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/aside\u003e\n\u003cp\u003eI wouldn’t say so, because I started to make any kind of apps with Urho3D now, even simple office tools. Urho3D’s GUI system is so much more flexible and convenient to use than Windows GUI system, especially when you need lots of custom functionality. It’s kinda like .NET, but has more useful features, and full source code in C++. And of course it’s cross-platform too.\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2017-01-02T00:58:44.716Z","reply_count":0,"reply_to_post_number":null,"quote_count":1,"incoming_link_count":0,"reads":10,"readers_count":9,"score":2.0,"yours":false,"topic_id":185,"topic_slug":"a-simple-tic-tac-toe-in-angelscript","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":18,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":1045,"name":"Lasse Öörni","username":"cadaver","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","created_at":"2014-04-04T10:47:36.000Z","cooked":"\u003cp\u003eYeah, it’s good to have several kinds of examples; I don’t think there’s things that shouldn’t be done with Urho, if it only supports them well enough. I did a text adventure \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/smiling_imp.png?v=5\" title=\":smiling_imp:\" class=\"emoji\" alt=\":smiling_imp:\"\u003e\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2017-01-02T00:58:44.792Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":11,"readers_count":10,"score":2.2,"yours":false,"topic_id":185,"topic_slug":"a-simple-tic-tac-toe-in-angelscript","display_username":"Lasse Öörni","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Urho3D Author","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":true,"staff":true,"user_id":3,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":1052,"name":"","username":"gasp","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/0ea827/{size}.png","created_at":"2014-04-05T08:41:19.000Z","cooked":"\u003cp\u003ea more evolued version, witch work in a touch device :\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e// TicTacToe 3D scene example.\n// This sample demonstrates:\n//     - Creating a 3D scene with static content\n//     - Raytracing to select a node and use \"vars\" to store data\n//     - Next is a  integrated way to check who win\n\n#include \"Scripts/Utilities/Sample.as\"\n#include \"Scripts/Utilities/Touch.as\"\n//You can play with this values\nconst float FLOOR_ELEMENT_SIZE = 4.0f;\t// Change scale of the game\nconst int ROW_FLOW_NUMBER=12;\t        // Play area is a square, so row = column\nconst int REQUIRED_TO_WIN=4;\t        // Number of aligned piece to win\nconst bool DISABLE_ROTATION=true;\t\t//If true, all the cell a aligned, and not moved on click\n\n// Needed for touch.as\nconst uint CTRL_FORWARD = 1;\nconst uint CTRL_BACK = 2;\nconst uint CTRL_LEFT = 4;\nconst uint CTRL_RIGHT = 8;\nconst uint CTRL_JUMP = 16;\n\n\n// ## Code is below\n//Global var\nScene@ scene_;\nNode@ cameraNodeScene;\nControls camControl;\nfloat yaw = 10.0f;\nfloat pitch = 30.0f;\nArray\u0026lt;Node@\u0026gt; tblPlateau;\nNode@ plateauParent;\nText@ activePlayerText ;\nconst int OWNED_BY_NO_ONE=0;\nbool gameCreated=false;\t//if you leave \"e\" or \"s\" it doens't spam the commande\nbool drawDebug = false;\nint activePlayer=1;\t// 1st played is the first to play :p\nint numCasePlayed =0;\n//Used for touch settings\n\nvoid Start()\n{\n\t// Execute the common startup for samples\n\tSampleStart();\n\n\t// Create the scene content\n\tCreateScene();\n\n\t//NEW : for touch stuff\n\tif (GetPlatform() == \"Android\" || GetPlatform() == \"iOS\")\n\t\tInitTouchInput();\n\t// Create the UI content\n\tCreateUI();\n\n\t// Setup the viewport for displaying the scene\n\tSetupViewport();\n\n\t// Hook up to the frame update events\n\tSubscribeToEvents();\n\n\t// Start a game\n\tstartOfGame();\n\n}\n\nvoid CreateUI()\n{\n\t// Create a Cursor UI element because we want to be able to hide and show it at will. When hidden, the mouse cursor will\n\t// control the camera, and when visible, it will point the raycast target\n\tXMLFile@ style = cache.GetResource(\"XMLFile\", \"UI/DefaultStyle.xml\");\n\tCursor@ cursor = Cursor();\n\tcursor.SetStyleAuto(style);\n\tui.cursor = cursor;\n\t// Set starting position of the cursor at the rendering window center\n\tcursor.SetPosition(graphics.width / 2, graphics.height / 2);\n\n\t// Construct new Text object, set string to display and font to use\n\tText@ instructionText = ui.root.CreateChild(\"Text\");\n\tinstructionText.text =\n\t    \"Use up,down,left,right arrow keys to move\\n\"\n\t    \"Use \\\"e\\\" End the game, \\\"s\\\" re-start a game\\n\"\n\t    \"LMB to place ticTacToe Element, RMB to rotate view\\n\"\n\t    \"You need : \"+REQUIRED_TO_WIN+\" aligned to win \\n\"\n\t    \"Space to move Up\\n\";\n\n\tinstructionText.SetFont(cache.GetResource(\"Font\", \"Fonts/Anonymous Pro.ttf\"), 15);\n\t// The text has multiple rows. Center them in relation to each other\n\tinstructionText.textAlignment = HA_CENTER;\n\t// Position the text relative to the screen center\n\tinstructionText.horizontalAlignment = HA_CENTER;\n\tinstructionText.verticalAlignment = VA_CENTER;\n\tinstructionText.SetPosition(0, ui.root.height / 4);\n\t//Define the green text who permit to follow the game stat\n\tactivePlayerText = ui.root.CreateChild(\"Text\");\n\tactivePlayerText.text =\"player \"+activePlayer;\n\tactivePlayerText.textAlignment = HA_CENTER;\n\tactivePlayerText.horizontalAlignment = HA_CENTER;\n\tactivePlayerText.verticalAlignment = VA_BOTTOM;\n\tactivePlayerText.SetPosition(0, 1);\n\tactivePlayerText.SetFont(cache.GetResource(\"Font\", \"Fonts/Anonymous Pro.ttf\"), 30);\n\tactivePlayerText.color = Color(0.0f, 1.0f, 0.0f);\n\n}\n\nvoid CreateScene()\n{\n\tscene_ = Scene();\n\n\t// Create the Octree component to the scene. This is required before adding any drawable components, or else nothing will\n\t// show up. The default octree volume will be from (-1000, -1000, -1000) to (1000, 1000, 1000) in world coordinates; it\n\t// is also legal to place objects outside the volume but their visibility can then not be checked in a hierarchically\n\t// optimizing manner\n\tscene_.CreateComponent(\"Octree\");\n\tscene_.CreateComponent(\"DebugRenderer\");\n\t// Create a directional light to the world so that we can see something. The light scene node's orientation controls the\n\t// light direction; we will use the SetDirection() function which calculates the orientation from a forward direction vector.\n\t// The light will use default settings (white light, no shadows)\n\tNode@ lightNode = scene_.CreateChild(\"DirectionalLight\");\n\tlightNode.direction = Vector3(0.6f, -1.0f, 0.8f); // The direction vector does not need to be normalized\n\tLight@ light = lightNode.CreateComponent(\"Light\");\n\tlight.lightType = LIGHT_DIRECTIONAL;\n\n\t// Create a scene node for the camera, which we will move around\n\t// The camera will use default settings (1000 far clip distance, 45 degrees FOV, set aspect ratio automatically)\n\tcameraNodeScene = scene_.CreateChild(\"Camera\");\n\tcameraNodeScene.CreateComponent(\"Camera\");\n\n\t// Set an initial position for the camera scene node above the plane\n\tcameraNodeScene.position = Vector3((FLOOR_ELEMENT_SIZE*ROW_FLOW_NUMBER)/2, 10.0f, -15.0f);\n\tcameraNodeScene.Pitch(pitch);\n\tcameraNodeScene.Yaw(yaw);\n}\n\n\n\nvoid SetupViewport()\n{\n\t// Set up a viewport to the Renderer subsystem so that the 3D scene can be seen. We need to define the scene and the camera\n\t// at minimum. Additionally we could configure the viewport screen size and the rendering path (eg. forward / deferred) to\n\t// use, but now we just use full screen and default render path configured in the engine command line options\n\tViewport@ viewport = Viewport(scene_, cameraNodeScene.GetComponent(\"Camera\"));\n\trenderer.viewports[0] = viewport;\n}\n/**\n * Modified version to allow Touch Events\n */\nvoid MoveCamera(float timeStep)\n{\n\tzoom = false;\n\t// Right mouse button controls mouse cursor visibility: hide when pressed\n\tui.cursor.visible = !input.mouseButtonDown[MOUSEB_RIGHT];\n\n\t// Do not move if the UI has a focused element (the console)\n\tif (ui.focusElement !is null)\n\t\treturn;\n\n\t// Movement speed as world units per second\n\tconst float MOVE_SPEED = 20.0f;\n\t// Mouse sensitivity as degrees per pixel\n\tconst float MOUSE_SENSITIVITY = 0.1f;\n\n\t// Use this frame's mouse motion to adjust camera node yaw and pitch. Clamp the pitch between -90 and 90 degrees\n\t// Only move the camera when the cursor is hidden\n\n\n\tif (!touchEnabled) {\n\t\tif (!ui.cursor.visible) {\n\t\t\tIntVector2 mouseMove = input.mouseMove;\n\t\t\tyaw += MOUSE_SENSITIVITY * mouseMove.x;\n\t\t\tpitch += MOUSE_SENSITIVITY * mouseMove.y;\n\t\t\tpitch = Clamp(pitch, -90.0f, 90.0f);\n\n\t\t}\n\t}\n\telse {\n\t\t//We will use the touch move with 1 finger to move camera\n\t\t// Touch Inputs\n\t\tint sens = 0;\n\t\t\n\t\tif (touchEnabled) {\n\t\t\t//1 finger = rotate the cam \u0026amp; click on a floor area\n\t\t\tif (input.numTouches == 1) {\n\t\t\t\tTouchState@ touch1 = input.touches[0];\n\t\t\t\tif  (Abs(touch1.delta.x)\u0026gt;5)\n\t\t\t\t\tyaw += MOUSE_SENSITIVITY * touch1.delta.x;\n\t\t\t\telse if  (Abs(touch1.delta.y) \u0026gt; 5 )\n\t\t\t\t\tpitch += MOUSE_SENSITIVITY * touch1.delta.y;\n\t\t\t\telse {\n\t\t\t\t\twhatHaveYouCLicked();\n\t\t\t\t}\n\t\t\t}\n\t\t\t//2 finger : zomm In / Out ( script taken from touch.as, but different finality\n        if (input.numTouches == 2)\n        {\n            TouchState@ touch1 = input.touches[0];\n            TouchState@ touch2 = input.touches[1];\n            // Check for zoom pattern (touches moving in opposite directions)\n            if ((touch1.delta.y \u0026gt; 0 \u0026amp;\u0026amp; touch2.delta.y \u0026lt; 0) || (touch1.delta.y \u0026lt; 0 \u0026amp;\u0026amp; touch2.delta.y \u0026gt; 0))\n                zoom = true;\n            else \n                zoom = false;\n\n            if (zoom)\n            {\n                int sens = 0;\n                // Check for zoom direction (in/out)\n                if (Abs(touch1.position.y - touch2.position.y) \u0026gt; Abs(touch1.lastPosition.y - touch2.lastPosition.y))\n                    sens = -1;\n                else\n\t\t\t\t\t\n                    sens = 1;\n\t\t\t\tcameraNodeScene.TranslateRelative(Vector3(0.0f, 0.0f, sens*1.0f) * Abs(touch1.delta.y - touch2.delta.y)* TOUCH_SENSITIVITY / 50);\t\t\t\t\t\n            }\n        }\n\n\t\t}\n\t}\n// Construct new orientation for the camera scene node from yaw and pitch. Roll is fixed to zero\n\tpitch = Clamp(pitch, -90.0f, 90.0f);\n\tcameraNodeScene.rotation = Quaternion(pitch, yaw, 0.0f);\n\n\n\t// Read WASD keys and move the camera scene node to the corresponding direction if they are pressed\n\tif (input.keyDown[KEY_UP])\n\t\tcameraNodeScene.TranslateRelative(Vector3(0.0f, 0.0f, 1.0f) * MOVE_SPEED * timeStep);\n\tif (input.keyDown[KEY_DOWN])\n\t\tcameraNodeScene.TranslateRelative(Vector3(0.0f, 0.0f, -1.0f) * MOVE_SPEED * timeStep);\n\tif (input.keyDown[KEY_LEFT])\n\t\tcameraNodeScene.TranslateRelative(Vector3(-1.0f, 0.0f, 0.0f) * MOVE_SPEED * timeStep);\n\tif (input.keyDown[KEY_RIGHT])\n\t\tcameraNodeScene.TranslateRelative(Vector3(1.0f, 0.0f, 0.0f) * MOVE_SPEED * timeStep);\n\tif (input.keyDown[KEY_D])\n\t\tcameraNodeScene.TranslateRelative(Vector3(0.0f, 2.0f, 0.0f) * MOVE_SPEED * timeStep);\n\t//Check what is  clicked, and if game engine need to react\n\tif (ui.cursor.visible \u0026amp;\u0026amp; input.mouseButtonPress[MOUSEB_LEFT])\n\t\twhatHaveYouCLicked();\n\t//end the game\n\tif (input.keyDown[KEY_E])\n\t\tendOfGame();\n\t//restart a game\n\tif (input.keyDown[KEY_S])\n\t\tstartOfGame\t();\n\t//Active / Desactive debug\n\tif (input.keyPress[KEY_SPACE])\n\t\tdrawDebug = !drawDebug;\n\n}\nvoid startOfGame()\n{\n\t//we don't recreate an already started game\n\tif (gameCreated)\n\t\treturn;\n\tplateauParent  = scene_.CreateChild(\"damier\");\n\t//Create the \"floor\" with a list of node who will be valid target for raycasting\n\tfor (uint j = 0; j \u0026lt; ROW_FLOW_NUMBER; ++j) {\n\t\tfor (uint i = 0; i \u0026lt; ROW_FLOW_NUMBER; ++i) {\n\t\t\tNode@ floorNode = plateauParent.CreateChild(\"damier\");\n\t\t\t//Setting vars who will help up to track what is doable and what is not\n\t\t\tfloorNode.vars[\"x\"]=i;\n\t\t\tfloorNode.vars[\"y\"]=j;\n\t\t\tfloorNode.vars[\"playedBy\"]=OWNED_BY_NO_ONE;\t//Case not played\n\t\t\tfloorNode.position = Vector3(i*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2), 0.0f, j*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2));\n\t\t\t//We re-use already present materials, they use 99% of the FLOOR_ELEMENT_SIZE\n\t\t\tfloorNode.scale=Vector3(FLOOR_ELEMENT_SIZE-(FLOOR_ELEMENT_SIZE/100),-(FLOOR_ELEMENT_SIZE/100),FLOOR_ELEMENT_SIZE-(FLOOR_ELEMENT_SIZE/100));\n\t\t\t//create the static model\n\t\t\tStaticModel@ floorStaticModel = floorNode.CreateComponent(\"StaticModel\");\n\t\t\tfloorStaticModel.model = \tcache.GetResource(\"Model\", \"Models/Box.mdl\");\n\t\t\tfloorStaticModel.material = cache.GetResource(\"Material\", \"Materials/Stone.xml\");\n\t\t\t//Save in an Array of Node@\n\t\t\ttblPlateau.Push(floorNode);\n\t\t}\n\t}\n\t// rotate the floor for a poorly visual effect\n\tif (!DISABLE_ROTATION) {\n\t\tfor (uint i = 0; i \u0026lt; tblPlateau.length; ++i) {\n\t\t\ttblPlateau[i].Rotate(Quaternion(0.0f, 30.0f, 0.0f));\n\t\t\tPrint(tblPlateau[i].vars[\"x\"]);\n\n\t\t}\n\t}\n\n\t//Define somes vars\n\tgameCreated=true;\n\tactivePlayer=1;\n\tactivePlayerText.text =\"player \"+activePlayer;\n}\nvoid endOfGame()\n{\n\t//Need to add a test not to erase 50 times the game\n\t//When we remove node, we reset the local var so no need to reset them\n\ttblPlateau.Clear();\n\tplateauParent.RemoveAllChildren();\n\tgameCreated=false;\n}\nvoid whatHaveYouCLicked()\n{\n\tVector3 hitPos;\n\tDrawable@ hitDrawable;\n\tif (Raycast(250.0f, hitPos, hitDrawable)) {\n\t\t// search with floor coords what cell is touched by the ray vector3 impact point\n\t\t/** not used for reference only\n\t\tint caseXpos = (hitPos.x/FLOOR_ELEMENT_SIZE);\n\t\tint caseYpos = (hitPos.z/FLOOR_ELEMENT_SIZE);\n\t\t */\n\t\t//2nd method : Selected Node\n\t\tNode@ selectedNode = hitDrawable.node;\n\t\t//Only node named \"damier\" are valide target\n\t\tif (selectedNode.name ==\"damier\") {\n\t\t\tif (selectedNode.vars[\"playedBy\"].GetUInt()==0) {\n\n\t\t\t\tint caseX = selectedNode.vars[\"x\"].GetUInt();\n\t\t\t\tint caseY = selectedNode.vars[\"y\"].GetUInt();\n\t\t\t\tint indice=caseY*ROW_FLOW_NUMBER+caseX;\t\t//linearize the coordonnates\n\t\t\t\tif (!DISABLE_ROTATION \u0026amp;\u0026amp; indice\u0026lt;=tblPlateau.length) {\n\t\t\t\t\ttblPlateau[indice].Rotate(Quaternion(0.0f, -30.0f, 0.0f));\n\t\t\t\t}\n\t\t\t\t//we link the game element (Cross/Cicle normally) to it's node to be able to be removed when game end\n\t\t\t\tNode@ gameElementNode = plateauParent.CreateChild(\"player\"+activePlayer+\" gameElement\");\n\t\t\t\t//we center the element  in the dalle\n\t\t\t\tgameElementNode.position = Vector3(caseX*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2), 0.2f, caseY*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2));\n\t\t\t\tStaticModel@ staticModel = gameElementNode.CreateComponent(\"StaticModel\");\n\t\t\t\tlog.Info(\"Player \" + activePlayer +\" have play in [\"+selectedNode.vars[\"x\"].GetUInt()+\"][\"+selectedNode.vars[\"y\"].GetUInt()+\"]\");\n\t\t\t\t//set node local vars\n\t\t\t\tselectedNode.vars[\"playedBy\"]= activePlayer ;\n\t\t\t\t//easy way to know if all case are full\n\t\t\t\tnumCasePlayed++;\n\t\t\t\tif (activePlayer==1) {\n\t\t\t\t\tstaticModel.model = cache.GetResource(\"Model\", \"Models/Sphere.mdl\");\n\t\t\t\t\tstaticModel.material = cache.GetResource(\"Material\", \"Materials/Terrain.xml\");\n\t\t\t\t\t//We scale object according to the floor size\n\t\t\t\t\tgameElementNode.SetScale(FLOOR_ELEMENT_SIZE/4.0f);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstaticModel.model = cache.GetResource(\"Model\", \"Models/Torus.mdl\");\n\t\t\t\t\tstaticModel.material = cache.GetResource(\"Material\", \"Materials/Terrain.xml\");\n\t\t\t\t\tgameElementNode.SetScale(FLOOR_ELEMENT_SIZE/4.0f);\n\t\t\t\t}\n\t\t\t\t// Did we have a winner ?\n\t\t\t\tif (didWeHaveAWinner(caseX,caseY)) {\n\t\t\t\t\tactivePlayerText.text =\"player \"+activePlayer +\" Win!\" ;\n\t\t\t\t\tshowMenu();\n\t\t\t\t}\n\t\t\t\t//all area fill \u0026amp; no winner\n\t\t\t\telse if (numCasePlayed == ROW_FLOW_NUMBER*ROW_FLOW_NUMBER) {\n\t\t\t\t\tactivePlayerText.text=\"End Of Game, it's a draw !\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//game continue, change current player\n\t\t\t\t\tif (activePlayer==1)\n\t\t\t\t\t\tactivePlayer=2;\n\t\t\t\t\telse\n\t\t\t\t\t\tactivePlayer=1;\n\t\t\t\t\tactivePlayerText.text =\"player \"+activePlayer;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.Info (\"!! Node Already played by player \"+selectedNode.vars[\"playedBy\"].GetUInt()+\"[\"+selectedNode.vars[\"x\"].GetUInt()+\"][\"+selectedNode.vars[\"y\"].GetUInt()+\"]\");\n\t\t\t}\n\t\t}\n\t}\n}\n/**\n * Maybe we need a menu here :p\n * */\nvoid showMenu()\n{\n\tendOfGame();\n\t//TODO : a menu :p\n}\n/**\n * Detection of a winner\n * */\nbool didWeHaveAWinner(int x_,int y_)\n{\n\tint nbFound=0;\n\tint i=0;\n\tint indice=0;\n\t/*\n\t\t\t//If you want to be able to trace the algo, replace \"i++;\" with :\n\t\t {\n\t\tindice=(y_-i)*ROW_FLOW_NUMBER+(x_-i);\n\t   \t log.Info(\"Trace:\"+tblPlateau[indice].name+\"[\"+tblPlateau[indice].vars[\"x\"].GetUInt()+\"][\"+tblPlateau[indice].vars[\"y\"].GetUInt()+\n\t\t\t\t\"] CaseOwner: \"+tblPlateau[indice].vars[\"playedBy\"].GetUInt()+\" activePlayer : \"+activePlayer);\n\t\t i++;\n\t\t }\n\t\t\t\t*/\n\t// ## Horizontal Search\n\twhile (x_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[y_*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;\n\ti=0;\n\twhile (x_-i\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[y_*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound+=i-1;\t//we doesn't count 2 time the originate cell\n\tlog.Info(\"Horizontale : \"+nbFound+\" \");\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\t//have we a winner ?\n\t\treturn true;\n\t// ## Vertical search\n\ti=0;\n\twhile (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;\n\ti=0;//go \"Down\"\n\twhile ((y_-i)\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_].vars[\"playedBy\"].GetUInt())\ti++;\n\tnbFound+=i-1;\n\tlog.Info(\"Verticale : \"+nbFound);\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\n\t\treturn true;\n\t// ## Diagonal Search\n\ti=0;\n\twhile (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; x_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;\n\ti=0;\n\twhile ( (y_-i)\u0026gt;=0 \u0026amp;\u0026amp; (x_-i)\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt())  i++;\n\tnbFound+=i-1;\n\tlog.Info(\"Diagonal / : \"+nbFound+\" \");\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\n\t\treturn true;\n\ti=0;\n\twhile (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; x_-i\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;\n\ti=0;\n\twhile ( (y_-i)\u0026gt;=0 \u0026amp;\u0026amp; (x_+i)\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound+=i-1;\n\tlog.Info(\"Diagonal \\\\ : \"+nbFound+\" \");\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\n\t\treturn true;\n\treturn false;\n}\n/**\n * Cast a Ray and store the 3D pos in hitPos, and the node in hitDrawable (stolen from 08_decals)\n  * */\nbool Raycast(float maxDistance, Vector3\u0026amp; hitPos, Drawable@\u0026amp; hitDrawable)\n{\n\tIntVector2 pos;\n\thitDrawable = null;\n\tif (touchEnabled) {\n\t\tTouchState@ touch1 = input.touches[0];\n\t\tpos = touch1.lastPosition;\n\t}\n\telse {\n\t\tpos = ui.cursorPosition;\n\n\t}\n\n\n\t// Check the cursor is visible and there is no UI element in front of the cursor\n\tif (!ui.cursor.visible || ui.GetElementAt(pos, true) !is null)\n\t\treturn false;\n\tCamera@ camera = cameraNodeScene.GetComponent(\"Camera\");\n\tRay cameraRay = camera.GetScreenRay(float(pos.x) / graphics.width, float(pos.y) / graphics.height);\n\t// Pick only geometry objects, not eg. zones or lights, only get the first (closest) hit\n\t// Note the convenience accessor to scene's Octree component\n\tRayQueryResult result = scene_.octree.RaycastSingle(cameraRay, RAY_TRIANGLE, maxDistance, DRAWABLE_GEOMETRY);\n\tif (result.drawable !is null) {\n\t\thitPos = result.position;\n\t\thitDrawable = result.drawable;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nvoid SubscribeToEvents()\n{\n\t// Subscribe HandleUpdate() function for processing update events\n\tSubscribeToEvent(\"Update\", \"HandleUpdate\");\n\t// debug geometry\n\tSubscribeToEvent(\"PostRenderUpdate\", \"HandlePostRenderUpdate\");\n\t//Touch Events :\n\tSubscribeToTouchEvents();\n}\n\nvoid HandleUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\t// Take the frame time step, which is stored as a float\n\tfloat timeStep = eventData[\"TimeStep\"].GetFloat();\n\t// Move the camera, scale movement with time step\n\tMoveCamera(timeStep);\n\n}\n/*\n * Needed for the debug geometry\n */\nvoid HandlePostRenderUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\t// If draw debug mode is enabled, draw viewport debug geometry. This time use depth test, as otherwise the result becomes\n\t// hard to interpret due to large object count\n\tif (drawDebug)\n\t\trenderer.DrawDebugGeometry(true);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe major “bug” currently is to differentiate :\u003cbr\u003e\n–\u0026gt; A touch witouth more that 5 of move to place piece\u003cbr\u003e\n–\u0026gt; A touch + move to define a rotate camera\u003c/p\u003e\n\u003cp\u003eYou can use 2 fingers to zoom in/out of the scene\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2017-01-02T00:58:45.344Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":12,"readers_count":11,"score":2.4,"yours":false,"topic_id":185,"topic_slug":"a-simple-tic-tac-toe-in-angelscript","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":62,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":1070,"name":"","username":"aster2013","avatar_template":"/user_avatar/discourse.urho3d.io/aster2013/{size}/828_2.png","created_at":"2014-04-09T15:25:16.000Z","cooked":"\u003cp\u003e\u003cimg src=\"https://emoji.discourse-cdn.com/twitter/smiley.png?v=5\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\"\u003e You can create a 2D tic tac toe sample, if you like.\u003c/p\u003e","post_number":5,"post_type":1,"updated_at":"2017-01-02T00:58:46.648Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":5,"reads":11,"readers_count":10,"score":27.2,"yours":false,"topic_id":185,"topic_slug":"a-simple-tic-tac-toe-in-angelscript","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"Core developer","title_is_group":false,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":11,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":1119,"name":"","username":"gasp","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/0ea827/{size}.png","created_at":"2014-04-14T16:39:30.000Z","cooked":"\u003cp\u003ebetter touch \u0026amp; general feeling :\u003cbr\u003e\nScripts\\00_morpion.as :\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e// TicTacToe 3D scene example.\n// This sample demonstrates:\n//     - Creating a 3D scene with static content\n//     - Raytracing to select a node and use \"vars\" to store data\n//     - using touch / mouse controle to play the game\n\n#include \"Scripts/Utilities/Sample.as\"\n#include \"Scripts/Utilities/Touch2.as\"\n\nconst float FLOOR_ELEMENT_SIZE = 6.0f;\t// Change scale of the game\nconst int ROW_FLOW_NUMBER=3;\t        // Play area is a square, so row = column\nconst int REQUIRED_TO_WIN=3;\t        // Number of aligned piece to win\nconst bool DISABLE_ROTATION=true;\t\t//If true, all the cell a aligned, and not moved on click\n\n// Movement speed as world units per second\nconst float MOVE_SPEED = 20.0f;\n// Mouse sensitivity as degrees per pixel\nconst float MOUSE_SENSITIVITY = 0.1f;\n\nScene@ scene_;\nNode@ cameraNodeScene;\n//Camera Controles\nfloat yaw = 0.0f;\nfloat pitch = 30.0f;\nfloat moveSens = 0.0f;\nfloat moveStep = 0.0f;\n\nIntVector2 tokenPosition;\nbool tokenNeeded = false;\n\nArray\u0026lt;Node@\u0026gt; tblMenu;\nNode@ menu;\nArray\u0026lt;Node@\u0026gt; tblPlateau;\nNode@ plateauParent;\n\nText@ activePlayerText ;\nconst int OWNED_BY_NO_ONE=0;\nbool gameActive=false;\t\nbool drawDebug = false;\nuint activePlayer=1;\t// 1st played is the first to play :p\nint numCasePlayed =0;\n\nvoid Start()\n{\n\t// Execute the common startup for samples\n\tSampleStart();\n\n\t// Create the scene content\n\tCreateScene();\n\n\t//Detect Touch Device\n\tInitTouchInput();\n\n\t// Create the UI content\n\tCreateUI();\n\n\t// Setup the viewport for displaying the scene\n\tSetupViewport();\n\n\t// Hook up to the frame update events\n\tSubscribeToEvents();\n\t\n\t//Show the game menu\n\tshowMenu();\n}\n\nvoid SubscribeToEvents()\n{\n\t// Subscribe HandleUpdate() function for processing update events\n\tSubscribeToEvent(\"Update\", \"HandleUpdate\");\n\t// debug geometry\n\tSubscribeToEvent(\"PostRenderUpdate\", \"HandlePostRenderUpdate\");\n\t// touch Events :\n\tSubscribeToTouchEvents();\n\t//Is this the proper way ?\n\tSubscribeToEvent(\"menuEventStartGame\",\"createNewGame\");\n\tSubscribeToEvent(\"menuEventExit\",\"exitProgramme\");\n}\nvoid exitProgramme()\n{\n\tengine.Exit();\n}\nvoid HandleUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\t// Take the frame time step, which is stored as a float\n\tfloat timeStep = eventData[\"TimeStep\"].GetFloat();\n\t//Update the touchControl from touch2.as\n\tUpdateTouches();\n\t//Update the global var to feed ReactToInput()\n\tmanageTouchDevice();\n\tmanageMouseDevice();\n\t// Move the camera, scale movement with time step, place a token\n\tReactToInput(timeStep);\n}\nvoid manageTouchDevice()\n{\n\tif (touchControl.zoom) {\n\t\tmoveStep=Abs(touchControl.zoomSpeed) ;\n\t\tmoveSens=touchControl.zoomSens;\n\t} else {\n\t\tyaw+=touchControl.dragX;\n\t\tpitch+=touchControl.dragY;\n\t}\n\tif (touchControl.singleTouch) {\n\t\ttokenPosition = touchControl.touchlastPos;\n\t\t// We don't want to go more than once\n\t\ttouchControl.singleTouch=false;\n\t\ttokenNeeded=true;\n\t}\n}\nvoid manageMouseDevice()\n{\n\t// Right mouse button controls mouse cursor visibility: hide when pressed\n\tui.cursor.visible = !input.mouseButtonDown[MOUSEB_RIGHT];\n\t// Do not move if the UI has a focused element (the console)\n\tif (ui.focusElement !is null)\n\t\treturn;\n\tif (!ui.cursor.visible) {\n\t\tIntVector2 mouseMove = input.mouseMove;\n\t\tif (Abs(mouseMove.x) \u0026gt; MOUSE_SENSITIVITY)\n\t\t\tyaw+= mouseMove.x * MOUSE_SENSITIVITY;\n\t\tif (Abs(mouseMove.y) \u0026gt; MOUSE_SENSITIVITY)\n\t\t\tpitch +=  mouseMove.y * MOUSE_SENSITIVITY;\n\t}\n\tmoveStep=MOVE_SPEED;\n\tif (input.keyDown[KEY_DOWN])\n\t\tmoveSens = -1.0f;\n\tif (input.keyDown[KEY_UP])\n\t\tmoveSens = 1.0f;\n\t//Check what is  clicked, and if game engine need to react\n\tif (ui.cursor.visible \u0026amp;\u0026amp; input.mouseButtonPress[MOUSEB_LEFT]) {\n\t\ttokenNeeded=true;\t\t\t\t\t\t//we want to place a token\n\t\ttokenPosition = ui.cursorPosition;\t\t//at this position (see RayCast)\n\t}\n\t//The following is for information\n\t//for the end of the game\n\tif (input.keyDown[KEY_E])\n\t\tendCurrentGame();\n\t//restart a game\n\tif (input.keyDown[KEY_S])\n\t\tcreateNewGame\t();\n\t//Active / Desactive debug geometry\n\tif (input.keyPress[KEY_SPACE])\n\t\tdrawDebug = !drawDebug;\n}\n\n/**\n * what the engine need to do\n */\nvoid ReactToInput(float timeStep)\n{\n\t//cameraNodeScene.rotation = Quaternion(playerControls.pitch, playerControls.yaw, 0.0f);\n\tif (moveSens!=0.0f)\n\t\tcameraNodeScene.Translate(Vector3(0.0f, 0.0f, moveSens) * moveStep * timeStep);\n\tmoveSens=0.0f;\n\t// Construct new orientation for the camera scene node from yaw and pitch. Roll is fixed to zero\n\tpitch = Clamp(pitch, -90.0f, 90.0f);\n\tcameraNodeScene.rotation = Quaternion(pitch, yaw, 0.0f);\n\tif (tokenNeeded)\n\t\twhatHaveYouCLicked();\n\n}\n\nvoid CreateUI()\n{\n\t// Create a Cursor UI element because we want to be able to hide and show it at will. When hidden, the mouse cursor will\n\t// control the camera, and when visible, it will point the raycast target\n\tXMLFile@ style = cache.GetResource(\"XMLFile\", \"UI/DefaultStyle.xml\");\n\tCursor@ cursor = Cursor();\n\tcursor.SetStyleAuto(style);\n\tui.cursor = cursor;\n\t// Set starting position of the cursor at the rendering window center\n\tcursor.SetPosition(graphics.width / 2, graphics.height / 2);\nif (touchEnabled)\n\tui.cursor.visible=false;\n\t// Construct new Text object, set string to display and font to use\n\tText@ instructionText = ui.root.CreateChild(\"Text\");\n\tinstructionText.text =\n\t    \"Use up,down to move\\n\"\n\t    //\"Use \\\"e\\\" End the game, \\\"s\\\" re-start a game\\n\"\n\t    \"LMB to place ticTacToe Element, RMB to rotate view\\n\"\n\t    \"You need : \"+REQUIRED_TO_WIN+\" token aligned to win \\n\"\n\t    \"Space to show debug geometry\\n\";\n\n\tinstructionText.SetFont(cache.GetResource(\"Font\", \"Fonts/Anonymous Pro.ttf\"), 15);\n\t// The text has multiple rows. Center them in relation to each other\n\tinstructionText.textAlignment = HA_CENTER;\n\t// Position the text relative to the screen center\n\tinstructionText.horizontalAlignment = HA_CENTER;\n\tinstructionText.verticalAlignment = VA_CENTER;\n\tinstructionText.SetPosition(0, ui.root.height / 4);\n\t//Define the green text who permit to inform the player the status of the game\n\tactivePlayerText = ui.root.CreateChild(\"Text\");\n\tactivePlayerText.text =\"player \"+activePlayer;\n\tactivePlayerText.textAlignment = HA_CENTER;\n\tactivePlayerText.horizontalAlignment = HA_CENTER;\n\tactivePlayerText.verticalAlignment = VA_BOTTOM;\n\tactivePlayerText.SetPosition(0, 1);\n\tactivePlayerText.SetFont(cache.GetResource(\"Font\", \"Fonts/Anonymous Pro.ttf\"), 30);\n\tactivePlayerText.color = Color(0.0f, 1.0f, 0.0f);\n\n}\n\nvoid CreateScene()\n{\n\tscene_ = Scene();\n\t// Create the Octree component to the scene. This is required before adding any drawable components, or else nothing will\n\t// show up. The default octree volume will be from (-1000, -1000, -1000) to (1000, 1000, 1000) in world coordinates; it\n\t// is also legal to place objects outside the volume but their visibility can then not be checked in a hierarchically\n\t// optimizing manner\n\tscene_.CreateComponent(\"Octree\");\n\tscene_.CreateComponent(\"DebugRenderer\");\n\t// Create a directional light to the world so that we can see something. The light scene node's orientation controls the\n\t// light direction; we will use the SetDirection() function which calculates the orientation from a forward direction vector.\n\t// The light will use default settings (white light, no shadows)\n\tNode@ lightNode = scene_.CreateChild(\"DirectionalLight\");\n\tlightNode.direction = Vector3(0.6f, -1.0f, 0.8f); // The direction vector does not need to be normalized\n\tLight@ light = lightNode.CreateComponent(\"Light\");\n\tlight.lightType = LIGHT_DIRECTIONAL;\n\n\t// Create a scene node for the camera, which we will move around\n\t// The camera will use default settings (1000 far clip distance, 45 degrees FOV, set aspect ratio automatically)\n\tcameraNodeScene = scene_.CreateChild(\"Camera\");\n\tcameraNodeScene.CreateComponent(\"Camera\");\n\n\t// Set an initial position for the camera scene node above the plane\n\tcameraNodeScene.position = Vector3((FLOOR_ELEMENT_SIZE*ROW_FLOW_NUMBER)/2, 10.0f, -15.0f);\n\tcameraNodeScene.Pitch(pitch);\n\tcameraNodeScene.Yaw(yaw);\n\n\n}\n\n\n\nvoid SetupViewport()\n{\n\t// Set up a viewport to the Renderer subsystem so that the 3D scene can be seen. We need to define the scene and the camera\n\t// at minimum. Additionally we could configure the viewport screen size and the rendering path (eg. forward / deferred) to\n\t// use, but now we just use full screen and default render path configured in the engine command line options\n\tViewport@ viewport = Viewport(scene_, cameraNodeScene.GetComponent(\"Camera\"));\n\trenderer.viewports[0] = viewport;\n}\n\n/**\n * basic menu\n * */\nvoid showMenu()\n{\n\tgameActive=false;\n\tmenu = scene_.CreateChild(\"menu\");\n\taddMenuItem(graphics.width/3,80.0f,\"CreateNewGame\",\"menuEventStartGame\");\n\taddMenuItem(graphics.width/3,80.0f + graphics.height/100*5,    \"option 1\",\"menuEventNotMapped\");\n\taddMenuItem(graphics.width/3,80.0f + graphics.height/100*5 * 2,\"option 2\",\"menuEventNotMapped\");\n\taddMenuItem(graphics.width/3,80.0f + graphics.height/100*5 * 3,\"option 3\",\"menuEventNotMapped\");\n\taddMenuItem(graphics.width/3,80.0f + graphics.height/100*5 * 4 ,\"Exit the program\",\"menuEventExit\");\n}\n/*\n * Add an item to the game menu, function name used to call the related event\n * */\nvoid addMenuItem(float x,float y,String libelle,String function)\n{\n\tNode@ textNode = menu.CreateChild(\"menuOption\");\n\ttextNode.vars[\"function\"]=function;\t//will be used to know which function needed to rtun (funcdef ...)\n\t//Place the text\n\tCamera@ camera = cameraNodeScene.GetComponent(\"Camera\");\n\ttextNode.position = camera.ScreenToWorldPoint(Vector3(x / graphics.width, y / graphics.height, 10.0f));\n\t//define texte attribut\n\tText3D@ text3D = textNode.CreateComponent(\"Text3D\");\n\tFont@ font = cache.GetResource(\"Font\", \"Fonts/BlueHighway.ttf\");\n\ttext3D.SetFont(font, graphics.height/100*5);\n\ttext3D.color = Color(1, 1, 0);\n\ttext3D.text = libelle;\n\ttext3D.faceCamera = false;\n\ttblMenu.Push(textNode);\n}\nvoid createNewGame()\n{\n\t//we don't recreate a game if we already have an active game\n\tif (gameActive)\n\t\treturn;\n\tnumCasePlayed=0;\n\tendCurrentGame();\n\t//Remove the menu\n\ttblMenu.Clear();\n\tmenu.RemoveAllChildren();\n\t//we need a parent node\n\tplateauParent  = scene_.CreateChild(\"damier\");\n\t//Create the \"floor\" with a list of node who will be valid target for raycasting\n\tfor (uint j = 0; j \u0026lt; ROW_FLOW_NUMBER; ++j) {\n\t\tfor (uint i = 0; i \u0026lt; ROW_FLOW_NUMBER; ++i) {\n\t\t\tNode@ floorNode = plateauParent.CreateChild(\"damier\");\n\t\t\t//Setting vars who will help up to track what is doable and what is not\n\t\t\tfloorNode.vars[\"x\"]=i;\n\t\t\tfloorNode.vars[\"y\"]=j;\n\t\t\tfloorNode.vars[\"playedBy\"]=OWNED_BY_NO_ONE;\t//Case not played\n\t\t\tfloorNode.position = Vector3(i*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2), 0.0f, j*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2));\n\t\t\t//We re-use already present materials, they use 99% of the FLOOR_ELEMENT_SIZE\n\t\t\tfloorNode.scale=Vector3(FLOOR_ELEMENT_SIZE-(FLOOR_ELEMENT_SIZE/100),-(FLOOR_ELEMENT_SIZE/100),FLOOR_ELEMENT_SIZE-(FLOOR_ELEMENT_SIZE/100));\n\t\t\t//create the static model\n\t\t\tStaticModel@ floorStaticModel = floorNode.CreateComponent(\"StaticModel\");\n\t\t\tfloorStaticModel.model = \tcache.GetResource(\"Model\", \"Models/Box.mdl\");\n\t\t\tfloorStaticModel.material = cache.GetResource(\"Material\", \"Materials/Stone.xml\");\n\t\t\t//Save in an Array of Node@\n\t\t\ttblPlateau.Push(floorNode);\n\t\t}\n\t}\n\t// rotate the floor for a poorly visual effect\n\tif (!DISABLE_ROTATION) {\n\t\tfor (uint i = 0; i \u0026lt; tblPlateau.length; ++i) {\n\t\t\ttblPlateau[i].Rotate(Quaternion(0.0f, 30.0f, 0.0f));\n\t\t\tPrint(tblPlateau[i].vars[\"x\"]);\n\t\t}\n\t}\n\tgameActive=true;\n\tactivePlayer=1;\n\tactivePlayerText.text =\"player \"+activePlayer;\n}\nvoid endCurrentGame()\n{\n\t// When we remove node, the local var are delete\n\t// so we do not need to reset them\n\tif (tblPlateau  !is null \u0026amp;\u0026amp; plateauParent !is null) {\n\t\ttblPlateau.Clear();\n\t\tplateauParent.RemoveAllChildren();\n\t}\n\tgameActive=false;\n}\nvoid whatHaveYouCLicked()\n{\n\ttokenNeeded=false;\n\tVector3 hitPos;\n\tDrawable@ hitDrawable;\n\tif (Raycast(250.0f, hitPos, hitDrawable)) {\n\t\t// search with floor coords what cell is touched by the ray vector3 impact point\n\t\t/** not used for reference only\n\t\tint caseXpos = (hitPos.x/FLOOR_ELEMENT_SIZE);\n\t\tint caseYpos = (hitPos.z/FLOOR_ELEMENT_SIZE);\n\t\t */\n\t\t//2nd method : Selected Node\n\t\tNode@ selectedNode = hitDrawable.node;\n\n\t\tif (selectedNode.name == \"menuOption\") {\n\t\t\t// apparently if the event don't exist, no warning, no error\n\t\t\tselectedNode.SendEvent(selectedNode.vars[\"function\"].GetString());\n\t\t}\n\t\tif (selectedNode.name ==\"damier\" \u0026amp;\u0026amp;\tgameActive) {\t// only active when \"game\" is active\n\t\t\tif (selectedNode.vars[\"playedBy\"].GetUInt()==0) {\n\t\t\t\tint caseX = selectedNode.vars[\"x\"].GetUInt();\n\t\t\t\tint caseY = selectedNode.vars[\"y\"].GetUInt();\n\t\t\t\tuint indice=caseY*ROW_FLOW_NUMBER+caseX;\t\t//linearize the coordonnates\n\t\t\t\tif (!DISABLE_ROTATION\n\t\t\t\t    \u0026amp;\u0026amp; indice\u0026lt;=tblPlateau.length) {\n\t\t\t\t\ttblPlateau[indice].Rotate(Quaternion(0.0f, -30.0f, 0.0f));\n\t\t\t\t}\n\t\t\t\t//we link the game element (Cross/Cicle normally) to it's node to be able to be removed when game end\n\t\t\t\tNode@ gameElementNode = plateauParent.CreateChild(\"player\"+activePlayer+\" gameElement\");\n\t\t\t\t//we center the element  in the dalle\n\t\t\t\tgameElementNode.position = Vector3(caseX*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2), 0.2f, caseY*FLOOR_ELEMENT_SIZE+(FLOOR_ELEMENT_SIZE/2));\n\t\t\t\tStaticModel@ staticModel = gameElementNode.CreateComponent(\"StaticModel\");\n\t\t\t\tlog.Info(\"Player \" + activePlayer +\" have play in [\"+selectedNode.vars[\"x\"].GetUInt()+\"][\"+selectedNode.vars[\"y\"].GetUInt()+\"]\");\n\t\t\t\t//set node local vars\n\t\t\t\tselectedNode.vars[\"playedBy\"]= activePlayer ;\n\t\t\t\t//easy way to know if all case are full\n\t\t\t\tnumCasePlayed++;\n\t\t\t\tif (activePlayer==1) {\n\t\t\t\t\tstaticModel.model = cache.GetResource(\"Model\", \"Models/Sphere.mdl\");\n\t\t\t\t\tstaticModel.material = cache.GetResource(\"Material\", \"Materials/Terrain.xml\");\n\t\t\t\t\t//We scale object according to the floor size\n\t\t\t\t\tgameElementNode.SetScale(FLOOR_ELEMENT_SIZE/4.0f);\n\t\t\t\t} else {\n\t\t\t\t\tstaticModel.model = cache.GetResource(\"Model\", \"Models/Torus.mdl\");\n\t\t\t\t\tstaticModel.material = cache.GetResource(\"Material\", \"Materials/Terrain.xml\");\n\t\t\t\t\tgameElementNode.SetScale(FLOOR_ELEMENT_SIZE/4.0f);\n\t\t\t\t}\n\t\t\t\t// Did we have a winner ?\n\t\t\t\tif (didWeHaveAWinner(caseX,caseY)) {\n\t\t\t\t\tactivePlayerText.text =\"player \"+activePlayer +\" Win!\" ;\n\t\t\t\t\tshowMenu();\n\t\t\t\t}\n\t\t\t\t//all area fill \u0026amp; no winner\n\t\t\t\telse if (numCasePlayed == ROW_FLOW_NUMBER*ROW_FLOW_NUMBER) {\n\t\t\t\t\tactivePlayerText.text=\"End Of Game, it's a draw !\";\n\t\t\t\t\tshowMenu();\n\t\t\t\t} else {\n\t\t\t\t\t//game continue, change current player\n\t\t\t\t\tif (activePlayer==1)\n\t\t\t\t\t\tactivePlayer=2;\n\t\t\t\t\telse\n\t\t\t\t\t\tactivePlayer=1;\n\t\t\t\t\tactivePlayerText.text =\"player \"+activePlayer;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.Info (\"!! Node Already played by player \"+selectedNode.vars[\"playedBy\"].GetUInt()+\"[\"+selectedNode.vars[\"x\"].GetUInt()+\"][\"+selectedNode.vars[\"y\"].GetUInt()+\"]\");\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Detection of a winner\n * */\nbool didWeHaveAWinner(int x_,int y_)\n{\n\tint nbFound=0;\n\tint i=0;\n\tint indice=0;\n\t// ## Horizontal Search\n\twhile (x_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[y_*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;\n\ti=0;\n\twhile (x_-i\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[y_*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound+=i-1;\t//we doesn't count 2 time the originate cell\n\tlog.Info(\"Horizontale : \"+nbFound+\" \");\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\t//did we have we a winner ?\n\t\treturn true;\n\t// ## Vertical search\n\ti=0;\n\twhile (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;\n\ti=0;//go \"Down\"\n\twhile ((y_-i)\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_].vars[\"playedBy\"].GetUInt())\ti++;\n\tnbFound+=i-1;\n\tlog.Info(\"Verticale : \"+nbFound);\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\n\t\treturn true;\n\t// ## Diagonal Search\n\ti=0;\n\twhile (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; x_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;\n\ti=0;\n\twhile ( (y_-i)\u0026gt;=0 \u0026amp;\u0026amp; (x_-i)\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt())  i++;\n\tnbFound+=i-1;\n\tlog.Info(\"Diagonal / : \"+nbFound+\" \");\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\n\t\treturn true;\n\ti=0;\n\twhile (y_+i\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; x_-i\u0026gt;=0 \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_+i)*ROW_FLOW_NUMBER+x_-i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound=i;\n\ti=0;\n\twhile ( (y_-i)\u0026gt;=0 \u0026amp;\u0026amp; (x_+i)\u0026lt;ROW_FLOW_NUMBER \u0026amp;\u0026amp; activePlayer==tblPlateau[(y_-i)*ROW_FLOW_NUMBER+x_+i].vars[\"playedBy\"].GetUInt()) i++;\n\tnbFound+=i-1;\n\tlog.Info(\"Diagonal \\\\ : \"+nbFound+\" \");\n\tif (nbFound\u0026gt;=REQUIRED_TO_WIN)\n\t\treturn true;\n\treturn false;\n}\n/**\n * Cast a Ray and store the 3D pos in hitPos, and the node in hitDrawable (stolen from 08_decals)\n  * */\nbool Raycast(float maxDistance, Vector3\u0026amp; hitPos, Drawable@\u0026amp; hitDrawable)\n{\n\tIntVector2 pos;\n\thitDrawable = null;\n\tpos = tokenPosition;\n\t// Check the cursor is visible and there is no UI element in front of the cursor\n\tif (!ui.cursor.visible || ui.GetElementAt(pos, true) !is null)\n\t\treturn false;\n\tCamera@ camera = cameraNodeScene.GetComponent(\"Camera\");\n\tRay cameraRay = camera.GetScreenRay(float(pos.x) / graphics.width, float(pos.y) / graphics.height);\n\t// Pick only geometry objects, not eg. zones or lights, only get the first (closest) hit\n\t// Note the convenience accessor to scene's Octree component\n\tRayQueryResult result = scene_.octree.RaycastSingle(cameraRay, RAY_TRIANGLE, maxDistance, DRAWABLE_GEOMETRY);\n\tif (result.drawable !is null) {\n\t\thitPos = result.position;\n\t\thitDrawable = result.drawable;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/*\n * Needed for the debug geometry\n */\nvoid HandlePostRenderUpdate(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\t// If draw debug mode is enabled, draw viewport debug geometry. This time use depth test, as otherwise the result becomes\n\t// hard to interpret due to large object count\n\tif (drawDebug)\n\t\trenderer.DrawDebugGeometry(true);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ea second file to manage the touch input, put it in Utilities\\Touch2.as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-auto\"\u003e// Mobile framework for Android/iOS\n\n// Setup:\n// - On init, call this script using '#include \"Scripts/Utilities/Touch2.as\"' \n//   then 'InitTouchInput()' to detect touchEnbled engine on mobile platforms \n// - Subscribe to touch events  using 'SubscribeToTouchEvents()'\n// - Call the update function 'UpdateTouches()' from HandleUpdate or equivalent update handler function\n\n// Usage : \n// Gyroscope : disabled not tested for now\n// after updateTouches() you can test the following states :\n// Touches patterns:\n//     - 1 finger  touch  = touchControl.singleTouch' set to true and IntVector2 touchControl.touchlastPos can be used to raycast stuff / ui\n//\t\t\t\t\t\t\tyou need to use 'touchControl.singleTouchReset();' after you have used the 1 finger touch value\n//     - 1 or 2 finger  drag  = touchControl.dragX/touchControl.dragY : the value slide (\u0026gt; or \u0026lt;0)\n//     - 2 fingers sliding in opposite direction = touchControl.zoom true and touchControl.zoomSens : 1 or -1 (0 if not used)\n//     - 3,4 fingers touch = read touchControl.numberOfFinger, not inplemented \n\n\n\n//Constant\nconst float TOUCH_SENSITIVITY = 0.1f;\nconst bool  TOUCH_GYROSCOPE_ENABLED = false;\nconst float TOUCH_GYROSCOPE_THRESHOLD = 0.1;\n\n//Global Vars\nbool touchEnabled = false;\nTouchControls touchControl;\n\n\n\nvoid SubscribeToTouchEvents()\n{\n\tSubscribeToEvent(\"TouchBegin\", \"HandleTouchBegin\");\n\tSubscribeToEvent(\"TouchEnd\", \"HandleTouchEnd\");\n}\n\n/*\nvoid UpdateDeprecated()\n{\n\t\t// Clamp to screen\n\tif (helloText.position.x+touchControl.dragX \u0026gt;0 \u0026amp;\u0026amp; helloText.position.x+touchControl.dragX \u0026lt; graphics.width - helloText.size.x \u0026amp;\u0026amp;\n\t\thelloText.position.y+touchControl.dragY \u0026gt;0 \u0026amp;\u0026amp; helloText.position.y+touchControl.dragY \u0026lt; graphics.height - helloText.size.y) \n\thelloText.SetPosition(helloText.position.x+touchControl.dragX,helloText.position.y+touchControl.dragY);\n\t/* *\n\t* Point you'r update() function who can :\n\t* \t--\u0026gt; Move the camera, player ...\n\t*  --\u0026gt; Use the touchControl.singleTouch like below to use it as a single touch without move,\n\t* \t\tdon't forget to set singleTouch to false, if you don't want to launch the function 10 times\n\t/\n\tif (input.numTouches==0 \u0026amp;\u0026amp; touchControl.singleTouch) {\n\t\tlog.Info(\"Tadam On ray !!!\");\n\t\t\t//Clamp top screen\n\t\tif (touchControl.touchlastPos.x \u0026gt; graphics.width - helloText.size.x-(helloText.size.x)/2)\n\t\t\ttouchControl.touchlastPos.x=graphics.width - helloText.size.x;\n\t\tif (touchControl.touchlastPos.y \u0026gt; graphics.height - helloText.size.y-(helloText.size.y)/2)\n\t\t\ttouchControl.touchlastPos.y=graphics.height- helloText.size.y;\t\t\t\n\t\t\t\n\t\thelloText.SetPosition(touchControl.touchlastPos.x-(helloText.size.x)/2,touchControl.touchlastPos.y-(helloText.size.y)/2);\n\t\t//We only want this 1 times\n\t\ttouchControl.singleTouchReset();\t\t\n\t}\n}\n*/\n\n/*\n * the code below is exclusivly for the touch feature\n * */\n\nvoid InitTouchInput()\n{\n\tif (GetPlatform() == \"Android\" || GetPlatform() == \"iOS\") {\n\t\ttouchEnabled = true;\n\t\tlog.Info(\"Touch Enabled\");\n\t}\n}\n/**\n * Event handlers\n */\nvoid HandleTouchBegin(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\t// Get touch coordinates of the 1st point\n\ttouchControl.touchInitPos = IntVector2(eventData[\"X\"].GetInt(), eventData[\"Y\"].GetInt());\n\t// Get #touches or dragging value\n\tint touchID = eventData[\"TouchID\"].GetInt();\n\tlog.Info(\"HandleTouchBegin \"+touchID);\n\t// We need to reset the 1 finger touch\n\ttouchControl.singleTouch=false;\n}\nvoid HandleTouchEnd(StringHash eventType, VariantMap\u0026amp; eventData)\n{\n\tlog.Info(touchControl.touchlastPos.x+\"/\"+touchControl.touchlastPos.y);\n\t\t\n\ttouchControl.resetBeforeUpdate();\n\tlog.Info(\"HandleTouchEnd\");\n\t//Did we have a single touch or a drag\n\ttouchControl.release();\n}\n/**\n * Handle continuous usage a finger (aka when the finger is posed)\n */\nvoid UpdateTouches()\n{\n\tif (!touchEnabled)\n\t\treturn;\n\t//if any finger on the update panel, don't try to update something !\n\tif (input.numTouches==0)\n\t\treturn;\n\t\n\t//Reset current values\n\ttouchControl.resetBeforeUpdate();\n\tTouchState@ touch1 = input.touches[0];\n\ttouchControl.touchlastPos.x=touch1.position.x;\n\ttouchControl.touchlastPos.y=touch1.position.y;\n\n\t\t\n\t//  ## 2 finger ##  Zoom in/out\n\tif (input.numTouches == 2) {\n\t\tTouchState@ touch1 = input.touches[0];\n\t\tTouchState@ touch2 = input.touches[1];\n\t\t// Check for zoom pattern (touches moving in opposite directions)\n\t\tif ((touch1.delta.y \u0026gt; 0 \u0026amp;\u0026amp; touch2.delta.y \u0026lt; 0) || (touch1.delta.y \u0026lt; 0 \u0026amp;\u0026amp; touch2.delta.y \u0026gt; 0))\n\t\t\ttouchControl.zoom = true;\n\t\telse\n\t\t\ttouchControl.zoom = false;\n\n\t\tif (touchControl.zoom) {\n\t\t\t// Check for zoom direction (in/out)\n\t\t\tif (Abs(touch1.position.y - touch2.position.y) \u0026gt; Abs(touch1.lastPosition.y - touch2.lastPosition.y))\n\t\t\t\ttouchControl.zoomSens = 1;\n\t\t\telse\n\t\t\t\ttouchControl.zoomSens = -1;\n\t\t//Experimental\n\t\t\n\t\ttouchControl.zoomSpeed=(Abs(touch1.delta.y)+Abs(touch2.delta.y) + Abs(touch1.delta.x)+Abs(touch2.delta.x))*TOUCH_SENSITIVITY;\n\t\tlog.Info(touchControl.zoomSpeed);\n\t\t}\n\t}\n\t//  ## 1 finger or 2 finger not zooming ##\n\tif (input.numTouches == 1 ||(input.numTouches == 2 \u0026amp;\u0026amp; touchControl.zoom==false)) \n\t\t{\n\t\tTouchState@ touch1 = input.touches[0];\n\t\tif  (Abs(touch1.delta.x)\u0026gt;TOUCH_SENSITIVITY)\n\t\t\ttouchControl.dragX=touch1.delta.x * TOUCH_SENSITIVITY;\t//TODO : Test sensitiviy\n\t\tif  (Abs(touch1.delta.y) \u0026gt; TOUCH_SENSITIVITY )\n\t\t\ttouchControl.dragY=touch1.delta.y * TOUCH_SENSITIVITY;\n\t}\t\n\t//Not tested for now\n\tif (TOUCH_GYROSCOPE_ENABLED) {\n\t\t// Gyroscope (emulated by SDL through a virtual joystick)\n\t\tif (input.numJoysticks \u0026gt; 0) { // numJoysticks = 1 on iOS \u0026amp; Android\n\t\t\tJoystickState@ joystick = input.joysticks[0];\n\t\t\tif (joystick.numAxes \u0026gt;= 2) {\n\t\t\t\tif (Abs(joystick.axisPosition[0]) \u0026gt; TOUCH_GYROSCOPE_THRESHOLD)\n\t\t\t\t\ttouchControl.gyroscopeX=joystick.axisPosition[0];\n\t\t\t\tif (Abs(joystick.axisPosition[1]) \u0026gt; TOUCH_GYROSCOPE_THRESHOLD)\n\t\t\t\t\ttouchControl.gyroscopeY=joystick.axisPosition[1];\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass TouchControls\n{\n\t//used in UpdateTouches\n\tint dragX,dragY=0;\t\t\t\t// Current drag movment\n\tfloat gyroscopeX,gyroscopeY=0;\t// Gyroscope movement\n\tbool zoom = false;\n\tint zoomSens = 1 ;\t//Sense of the zoom -1 / 1\n\tint numberOfFinger=0;\n\tfloat zoomSpeed = 0 ;\n\t\n\t//used in HandleTouchBegin\n\tIntVector2 touchInitPos(0,0);\n\t//updated in HandleTouchEnd\n\tIntVector2 touchlastPos(0,0);\n\tbool singleTouch = false; //1 finger touch\n\n\t//Constructor\n\tTouchControls() \n\t{\n\t\tlog.Info(\"Calling TouchControls Constructor\");\n\t}\n\tvoid release() \n\t{\n\t\tTouchState@ touch1 = input.touches[0];\n\t\tif ( Abs(touchControl.touchInitPos.x-touchControl.touchlastPos.x) \u0026gt; TOUCH_SENSITIVITY ||\n\t\t     Abs(touchControl.touchInitPos.y-touchControl.touchlastPos.y) \u0026gt; TOUCH_SENSITIVITY) {\n\t\t\tsingleTouch=false;\n//\t\t\tlog.Info(\"move it !\"+Abs(touchControl.touchInitPos.x-touchControl.touchlastPos.x) +\" \"+ Abs(touchControl.touchInitPos.y-touchControl.touchlastPos.y) );\n//\t\t\tlog.Info(helloText.position.x+\"@\"+helloText.position.y);\n\t\t} else {\n\t\t\tsingleTouch=true;\n\t\t\tlog.Info(\"singleTouch !\");\n\t\t}\n\t}\n\t\n\tvoid resetBeforeUpdate() \n\t{\n\t\tnumberOfFinger=input.numTouches;\n\t\tzoomSpeed=dragX=dragY=zoomSens=0;\n\t\tgyroscopeX=gyroscopeY=0.0f;\n\t\tzoom=false;\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003etested in windows , android. need a polish on the touch feature, goal is to learn to use Urho3D, not to do the pretty best stuff for now \u003cimg src=\"https://emoji.discourse-cdn.com/twitter/stuck_out_tongue.png?v=9\" title=\":stuck_out_tongue:\" class=\"emoji\" alt=\":stuck_out_tongue:\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdiv class=\"lightbox-wrapper\"\u003e\u003ca class=\"lightbox\" href=\"http://i.imgur.com/i49sfB7.png\" title=\"\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"http://i.imgur.com/i49sfB7.png\" alt=\"\" width=\"654\" height=\"500\"\u003e\u003cdiv class=\"meta\"\u003e\u003csvg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"\u003e\u003cuse xlink:href=\"#far-image\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003cspan class=\"filename\"\u003e\u003c/span\u003e\u003cspan class=\"informations\"\u003e1049×801\u003c/span\u003e\u003csvg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"\u003e\u003cuse xlink:href=\"#discourse-expand\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cbr\u003e\n\u003cdiv class=\"lightbox-wrapper\"\u003e\u003ca class=\"lightbox\" href=\"http://i.imgur.com/AQRO0mE.png\" title=\"\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"http://i.imgur.com/AQRO0mE.png\" alt=\"\" width=\"634\" height=\"500\"\u003e\u003cdiv class=\"meta\"\u003e\u003csvg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"\u003e\u003cuse xlink:href=\"#far-image\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003cspan class=\"filename\"\u003e\u003c/span\u003e\u003cspan class=\"informations\"\u003e1031×813\u003c/span\u003e\u003csvg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"\u003e\u003cuse xlink:href=\"#discourse-expand\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/p\u003e","post_number":6,"post_type":1,"updated_at":"2017-01-02T00:58:50.356Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":3,"reads":11,"readers_count":10,"score":17.2,"yours":false,"topic_id":185,"topic_slug":"a-simple-tic-tac-toe-in-angelscript","display_username":"","primary_group_name":null,"flair_name":null,"flair_url":null,"flair_bg_color":null,"flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"http://i.imgur.com/i49sfB7.png","internal":false,"reflection":false,"title":"i49sfB7.png","clicks":0},{"url":"http://i.imgur.com/AQRO0mE.png","internal":false,"reflection":false,"title":"AQRO0mE.png","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":62,"hidden":false,"trust_level":1,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[1031,1044,1045,1052,1070,1119]},"timeline_lookup":[[1,3156],[2,3155],[4,3154],[5,3150],[6,3145]],"suggested_topics":[{"id":7103,"title":":test_tube: DebugRenderer as GUI","fancy_title":":test_tube: DebugRenderer as GUI","slug":"debugrenderer-as-gui","posts_count":4,"reply_count":1,"highest_post_number":4,"image_url":null,"created_at":"2021-12-17T02:25:06.606Z","last_posted_at":"2021-12-18T01:09:27.738Z","bumped":true,"bumped_at":"2021-12-18T01:09:27.738Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🧪 DebugRenderer as GUI","tags_descriptions":{},"like_count":4,"views":267,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":861,"username":"GodMan","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/e79b87/{size}.png"}}]},{"id":7110,"title":"Resource fetch define","fancy_title":"Resource fetch define","slug":"resource-fetch-define","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2021-12-27T12:28:55.126Z","last_posted_at":"2021-12-27T17:00:37.699Z","bumped":true,"bumped_at":"2021-12-27T17:00:37.699Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":7,"views":184,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":1304,"username":"lebrewer","name":"lebrewer","avatar_template":"/user_avatar/discourse.urho3d.io/lebrewer/{size}/2811_2.png"}}]},{"id":7120,"title":"Log Error Once Macro","fancy_title":"Log Error Once Macro","slug":"log-error-once-macro","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-01-04T02:24:37.857Z","last_posted_at":"2022-01-04T02:24:37.925Z","bumped":true,"bumped_at":"2022-01-04T02:24:37.925Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":3,"views":143,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":628,"username":"SirNate0","name":"SirNate0","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/s/9f8e36/{size}.png"}}]},{"id":7099,"title":":fallen_leaf: Polynomials \u0026 Harmonics","fancy_title":":fallen_leaf: Polynomials \u0026amp; Harmonics","slug":"polynomials-harmonics","posts_count":6,"reply_count":0,"highest_post_number":7,"image_url":null,"created_at":"2021-12-13T05:06:04.641Z","last_posted_at":"2021-12-27T23:27:39.489Z","bumped":true,"bumped_at":"2021-12-27T23:27:39.489Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"unicode_title":"🍂 Polynomials \u0026 Harmonics","tags_descriptions":{},"like_count":6,"views":392,"category_id":13,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":192,"username":"Modanung","name":"魔大农 𝞍𝞎𝝳 現招蜍","avatar_template":"/user_avatar/discourse.urho3d.io/modanung/{size}/3290_2.png"}}]},{"id":7262,"title":"iOS build cannot be installed on sim or device","fancy_title":"iOS build cannot be installed on sim or device","slug":"ios-build-cannot-be-installed-on-sim-or-device","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":"https://global.discourse-cdn.com/standard17/uploads/urho3d/original/2X/d/d889ae74b8b75bfe705a15b4cee71e82faea0f4d.png","created_at":"2022-05-12T15:33:33.531Z","last_posted_at":"2022-05-12T16:13:22.078Z","bumped":true,"bumped_at":"2022-05-12T16:13:22.078Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags_descriptions":{},"like_count":1,"views":95,"category_id":16,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":1340,"username":"KatekovAnton","name":"KatekovAnton","avatar_template":"/user_avatar/discourse.urho3d.io/katekovanton/{size}/2988_2.png"}}]}],"tags_descriptions":{},"id":185,"title":"A simple tic tac toe in AngelScript","fancy_title":"A simple tic tac toe in AngelScript","posts_count":6,"created_at":"2014-04-02T20:32:05.000Z","views":766,"reply_count":0,"like_count":0,"last_posted_at":"2014-04-14T16:39:30.000Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"a-simple-tic-tac-toe-in-angelscript","category_id":13,"word_count":7801,"deleted_at":null,"user_id":62,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_185","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":6,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"bookmarks":[],"topic_timer":null,"message_bus_last_id":0,"participant_count":4,"show_read_indicator":false,"thumbnails":null,"slow_mode_enabled_until":null,"tags_disable_ads":false,"details":{"can_edit":false,"notification_level":1,"participants":[{"id":62,"username":"gasp","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/0ea827/{size}.png","post_count":3,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1},{"id":3,"username":"cadaver","name":"Lasse Öörni","avatar_template":"/user_avatar/discourse.urho3d.io/cadaver/{size}/3_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"admin":true,"trust_level":2},{"id":11,"username":"aster2013","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/aster2013/{size}/828_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1},{"id":18,"username":"Canardian","name":"","avatar_template":"/user_avatar/discourse.urho3d.io/canardian/{size}/67_2.png","post_count":1,"primary_group_name":null,"flair_name":null,"flair_url":null,"flair_color":null,"flair_bg_color":null,"trust_level":1}],"created_by":{"id":62,"username":"gasp","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/0ea827/{size}.png"},"last_poster":{"id":62,"username":"gasp","name":"","avatar_template":"https://avatars.discourse-cdn.com/v4/letter/g/0ea827/{size}.png"}}}